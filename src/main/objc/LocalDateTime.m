//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/LocalDateTime.java
//

#include "AbstractReadableInstantFieldProperty.h"
#include "BaseLocal.h"
#include "Chronology.h"
#include "ConverterManager.h"
#include "DateTime.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormat.h"
#include "DateTimeFormatter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FromString.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "ISOChronology.h"
#include "ISODateTimeFormat.h"
#include "J2ObjC_source.h"
#include "LocalDate.h"
#include "LocalDateTime.h"
#include "LocalTime.h"
#include "PartialConverter.h"
#include "ReadableDuration.h"
#include "ReadablePartial.h"
#include "ReadablePeriod.h"
#include "ToString.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"

@interface OrgJodaTimeLocalDateTime () {
 @public
  jlong iLocalMillis_;
  OrgJodaTimeChronology *iChronology_;
}

- (id)readResolve;

- (JavaUtilDate *)correctDstTransitionWithJavaUtilDate:(JavaUtilDate *)date
                                  withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeLocalDateTime, iChronology_, OrgJodaTimeChronology *)

inline jlong OrgJodaTimeLocalDateTime_get_serialVersionUID();
#define OrgJodaTimeLocalDateTime_serialVersionUID -268716875315837168LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalDateTime, serialVersionUID, jlong)

inline jint OrgJodaTimeLocalDateTime_get_YEAR();
#define OrgJodaTimeLocalDateTime_YEAR 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalDateTime, YEAR, jint)

inline jint OrgJodaTimeLocalDateTime_get_MONTH_OF_YEAR();
#define OrgJodaTimeLocalDateTime_MONTH_OF_YEAR 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalDateTime, MONTH_OF_YEAR, jint)

inline jint OrgJodaTimeLocalDateTime_get_DAY_OF_MONTH();
#define OrgJodaTimeLocalDateTime_DAY_OF_MONTH 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalDateTime, DAY_OF_MONTH, jint)

inline jint OrgJodaTimeLocalDateTime_get_MILLIS_OF_DAY();
#define OrgJodaTimeLocalDateTime_MILLIS_OF_DAY 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalDateTime, MILLIS_OF_DAY, jint)

__attribute__((unused)) static JavaUtilDate *OrgJodaTimeLocalDateTime_correctDstTransitionWithJavaUtilDate_withJavaUtilTimeZone_(OrgJodaTimeLocalDateTime *self, JavaUtilDate *date, JavaUtilTimeZone *timeZone);

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeLocalDateTime__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeLocalDateTime__Annotations$1();

@interface OrgJodaTimeLocalDateTime_Property () {
 @public
  OrgJodaTimeLocalDateTime *iInstant_;
  OrgJodaTimeDateTimeField *iField_;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeLocalDateTime_Property, iInstant_, OrgJodaTimeLocalDateTime *)
J2OBJC_FIELD_SETTER(OrgJodaTimeLocalDateTime_Property, iField_, OrgJodaTimeDateTimeField *)

inline jlong OrgJodaTimeLocalDateTime_Property_get_serialVersionUID();
#define OrgJodaTimeLocalDateTime_Property_serialVersionUID -358138762846288LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalDateTime_Property, serialVersionUID, jlong)

@implementation OrgJodaTimeLocalDateTime

+ (OrgJodaTimeLocalDateTime *)now {
  return OrgJodaTimeLocalDateTime_now();
}

+ (OrgJodaTimeLocalDateTime *)nowWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeLocalDateTime_nowWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeLocalDateTime *)nowWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return OrgJodaTimeLocalDateTime_nowWithOrgJodaTimeChronology_(chronology);
}

+ (OrgJodaTimeLocalDateTime *)parseWithNSString:(NSString *)str {
  return OrgJodaTimeLocalDateTime_parseWithNSString_(str);
}

+ (OrgJodaTimeLocalDateTime *)parseWithNSString:(NSString *)str
         withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter {
  return OrgJodaTimeLocalDateTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, formatter);
}

+ (OrgJodaTimeLocalDateTime *)fromCalendarFieldsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  return OrgJodaTimeLocalDateTime_fromCalendarFieldsWithJavaUtilCalendar_(calendar);
}

+ (OrgJodaTimeLocalDateTime *)fromDateFieldsWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgJodaTimeLocalDateTime_fromDateFieldsWithJavaUtilDate_(date);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeLocalDateTime_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeLocalDateTime_initWithOrgJodaTimeDateTimeZone_(self, zone);
  return self;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeLocalDateTime_initWithOrgJodaTimeChronology_(self, chronology);
  return self;
}

- (instancetype)initWithLong:(jlong)instant {
  OrgJodaTimeLocalDateTime_initWithLong_(self, instant);
  return self;
}

- (instancetype)initWithLong:(jlong)instant
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeLocalDateTime_initWithLong_withOrgJodaTimeDateTimeZone_(self, instant, zone);
  return self;
}

- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeLocalDateTime_initWithLong_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

- (instancetype)initWithId:(id)instant {
  OrgJodaTimeLocalDateTime_initWithId_(self, instant);
  return self;
}

- (instancetype)initWithId:(id)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeLocalDateTime_initWithId_withOrgJodaTimeDateTimeZone_(self, instant, zone);
  return self;
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeLocalDateTime_initWithId_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour {
  OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute {
  OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond {
  OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology);
  return self;
}

- (id)readResolve {
  if (iChronology_ == nil) {
    return new_OrgJodaTimeLocalDateTime_initWithLong_withOrgJodaTimeChronology_(iLocalMillis_, OrgJodaTimeChronoISOChronology_getInstanceUTC());
  }
  if ([((OrgJodaTimeDateTimeZone *) nil_chk(JreLoadStatic(OrgJodaTimeDateTimeZone, UTC))) isEqual:[iChronology_ getZone]] == false) {
    return new_OrgJodaTimeLocalDateTime_initWithLong_withOrgJodaTimeChronology_(iLocalMillis_, [iChronology_ withUTC]);
  }
  return self;
}

- (jint)size {
  return 4;
}

- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  switch (index) {
    case OrgJodaTimeLocalDateTime_YEAR:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) year];
    case OrgJodaTimeLocalDateTime_MONTH_OF_YEAR:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) monthOfYear];
    case OrgJodaTimeLocalDateTime_DAY_OF_MONTH:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) dayOfMonth];
    case OrgJodaTimeLocalDateTime_MILLIS_OF_DAY:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) millisOfDay];
    default:
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I", @"Invalid index: ", index));
  }
}

- (jint)getValueWithInt:(jint)index {
  switch (index) {
    case OrgJodaTimeLocalDateTime_YEAR:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) year])) getWithLong:[self getLocalMillis]];
    case OrgJodaTimeLocalDateTime_MONTH_OF_YEAR:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) getWithLong:[self getLocalMillis]];
    case OrgJodaTimeLocalDateTime_DAY_OF_MONTH:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) getWithLong:[self getLocalMillis]];
    case OrgJodaTimeLocalDateTime_MILLIS_OF_DAY:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) getWithLong:[self getLocalMillis]];
    default:
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I", @"Invalid index: ", index));
  }
}

- (jint)getWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  if (type == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The DateTimeFieldType must not be null");
  }
  return [((OrgJodaTimeDateTimeField *) nil_chk([type getFieldWithOrgJodaTimeChronology:[self getChronology]])) getWithLong:[self getLocalMillis]];
}

- (jboolean)isSupportedWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  if (type == nil) {
    return false;
  }
  return [((OrgJodaTimeDateTimeField *) nil_chk([type getFieldWithOrgJodaTimeChronology:[self getChronology]])) isSupported];
}

- (jboolean)isSupportedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type {
  if (type == nil) {
    return false;
  }
  return [((OrgJodaTimeDurationField *) nil_chk([type getFieldWithOrgJodaTimeChronology:[self getChronology]])) isSupported];
}

- (jlong)getLocalMillis {
  return iLocalMillis_;
}

- (OrgJodaTimeChronology *)getChronology {
  return iChronology_;
}

- (jboolean)isEqual:(id)partial {
  if (self == partial) {
    return true;
  }
  if ([partial isKindOfClass:[OrgJodaTimeLocalDateTime class]]) {
    OrgJodaTimeLocalDateTime *other = (OrgJodaTimeLocalDateTime *) cast_chk(partial, [OrgJodaTimeLocalDateTime class]);
    if ([((OrgJodaTimeChronology *) nil_chk(iChronology_)) isEqual:((OrgJodaTimeLocalDateTime *) nil_chk(other))->iChronology_]) {
      return iLocalMillis_ == other->iLocalMillis_;
    }
  }
  return [super isEqual:partial];
}

- (jint)compareToWithId:(id<OrgJodaTimeReadablePartial>)partial {
  (void) cast_check(partial, OrgJodaTimeReadablePartial_class_());
  if (self == partial) {
    return 0;
  }
  if ([partial isKindOfClass:[OrgJodaTimeLocalDateTime class]]) {
    OrgJodaTimeLocalDateTime *other = (OrgJodaTimeLocalDateTime *) cast_chk(partial, [OrgJodaTimeLocalDateTime class]);
    if ([((OrgJodaTimeChronology *) nil_chk(iChronology_)) isEqual:((OrgJodaTimeLocalDateTime *) nil_chk(other))->iChronology_]) {
      return (iLocalMillis_ < other->iLocalMillis_ ? -1 : (iLocalMillis_ == other->iLocalMillis_ ? 0 : 1));
    }
  }
  return [super compareToWithId:partial];
}

- (OrgJodaTimeDateTime *)toDateTime {
  return [self toDateTimeWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  zone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(zone);
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk(iChronology_)) withZoneWithOrgJodaTimeDateTimeZone:zone];
  return new_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_([self getYear], [self getMonthOfYear], [self getDayOfMonth], [self getHourOfDay], [self getMinuteOfHour], [self getSecondOfMinute], [self getMillisOfSecond], chrono);
}

- (OrgJodaTimeLocalDate *)toLocalDate {
  return new_OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_([self getLocalMillis], [self getChronology]);
}

- (OrgJodaTimeLocalTime *)toLocalTime {
  return new_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_([self getLocalMillis], [self getChronology]);
}

- (JavaUtilDate *)toDate {
  jint dom = [self getDayOfMonth];
  JavaUtilDate *date = new_JavaUtilDate_initWithInt_withInt_withInt_withInt_withInt_withInt_([self getYear] - 1900, [self getMonthOfYear] - 1, dom, [self getHourOfDay], [self getMinuteOfHour], [self getSecondOfMinute]);
  [date setTimeWithLong:[date getTime] + [self getMillisOfSecond]];
  return OrgJodaTimeLocalDateTime_correctDstTransitionWithJavaUtilDate_withJavaUtilTimeZone_(self, date, JavaUtilTimeZone_getDefault());
}

- (JavaUtilDate *)toDateWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  JavaUtilCalendar *calendar = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_(timeZone);
  [((JavaUtilCalendar *) nil_chk(calendar)) clear];
  [calendar setWithInt:[self getYear] withInt:[self getMonthOfYear] - 1 withInt:[self getDayOfMonth] withInt:[self getHourOfDay] withInt:[self getMinuteOfHour] withInt:[self getSecondOfMinute]];
  JavaUtilDate *date = [calendar getTime];
  [((JavaUtilDate *) nil_chk(date)) setTimeWithLong:[date getTime] + [self getMillisOfSecond]];
  return OrgJodaTimeLocalDateTime_correctDstTransitionWithJavaUtilDate_withJavaUtilTimeZone_(self, date, timeZone);
}

- (JavaUtilDate *)correctDstTransitionWithJavaUtilDate:(JavaUtilDate *)date
                                  withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  return OrgJodaTimeLocalDateTime_correctDstTransitionWithJavaUtilDate_withJavaUtilTimeZone_(self, date, timeZone);
}

- (OrgJodaTimeLocalDateTime *)withLocalMillisWithLong:(jlong)newMillis {
  return (newMillis == [self getLocalMillis] ? self : new_OrgJodaTimeLocalDateTime_initWithLong_withOrgJodaTimeChronology_(newMillis, [self getChronology]));
}

- (OrgJodaTimeLocalDateTime *)withDateWithInt:(jint)year
                                      withInt:(jint)monthOfYear
                                      withInt:(jint)dayOfMonth {
  OrgJodaTimeChronology *chrono = [self getChronology];
  jlong instant = [self getLocalMillis];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) year])) setWithLong:instant withInt:year];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([chrono monthOfYear])) setWithLong:instant withInt:monthOfYear];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([chrono dayOfMonth])) setWithLong:instant withInt:dayOfMonth];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)withTimeWithInt:(jint)hourOfDay
                                      withInt:(jint)minuteOfHour
                                      withInt:(jint)secondOfMinute
                                      withInt:(jint)millisOfSecond {
  OrgJodaTimeChronology *chrono = [self getChronology];
  jlong instant = [self getLocalMillis];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) hourOfDay])) setWithLong:instant withInt:hourOfDay];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([chrono minuteOfHour])) setWithLong:instant withInt:minuteOfHour];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([chrono secondOfMinute])) setWithLong:instant withInt:secondOfMinute];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([chrono millisOfSecond])) setWithLong:instant withInt:millisOfSecond];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)withFieldsWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  if (partial == nil) {
    return self;
  }
  return [self withLocalMillisWithLong:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) setWithOrgJodaTimeReadablePartial:partial withLong:[self getLocalMillis]]];
}

- (OrgJodaTimeLocalDateTime *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                                withInt:(jint)value {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field must not be null");
  }
  jlong instant = [((OrgJodaTimeDateTimeField *) nil_chk([fieldType getFieldWithOrgJodaTimeChronology:[self getChronology]])) setWithLong:[self getLocalMillis] withInt:value];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                     withInt:(jint)amount {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field must not be null");
  }
  if (amount == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([fieldType getFieldWithOrgJodaTimeChronology:[self getChronology]])) addWithLong:[self getLocalMillis] withInt:amount];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)withDurationAddedWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)durationToAdd
                                                                       withInt:(jint)scalar {
  if (durationToAdd == nil || scalar == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) addWithLong:[self getLocalMillis] withLong:[durationToAdd getMillis] withInt:scalar];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                                   withInt:(jint)scalar {
  if (period == nil || scalar == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) addWithOrgJodaTimeReadablePeriod:period withLong:[self getLocalMillis] withInt:scalar];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)plusWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration {
  return [self withDurationAddedWithOrgJodaTimeReadableDuration:duration withInt:1];
}

- (OrgJodaTimeLocalDateTime *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:1];
}

- (OrgJodaTimeLocalDateTime *)plusYearsWithInt:(jint)years {
  if (years == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) years])) addWithLong:[self getLocalMillis] withInt:years];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)plusMonthsWithInt:(jint)months {
  if (months == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) months])) addWithLong:[self getLocalMillis] withInt:months];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)plusWeeksWithInt:(jint)weeks {
  if (weeks == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weeks])) addWithLong:[self getLocalMillis] withInt:weeks];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)plusDaysWithInt:(jint)days {
  if (days == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) addWithLong:[self getLocalMillis] withInt:days];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)plusHoursWithInt:(jint)hours {
  if (hours == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hours])) addWithLong:[self getLocalMillis] withInt:hours];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)plusMinutesWithInt:(jint)minutes {
  if (minutes == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minutes])) addWithLong:[self getLocalMillis] withInt:minutes];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)plusSecondsWithInt:(jint)seconds {
  if (seconds == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) seconds])) addWithLong:[self getLocalMillis] withInt:seconds];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)plusMillisWithInt:(jint)millis {
  if (millis == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millis])) addWithLong:[self getLocalMillis] withInt:millis];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)minusWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration {
  return [self withDurationAddedWithOrgJodaTimeReadableDuration:duration withInt:-1];
}

- (OrgJodaTimeLocalDateTime *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:-1];
}

- (OrgJodaTimeLocalDateTime *)minusYearsWithInt:(jint)years {
  if (years == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) years])) subtractWithLong:[self getLocalMillis] withInt:years];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)minusMonthsWithInt:(jint)months {
  if (months == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) months])) subtractWithLong:[self getLocalMillis] withInt:months];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)minusWeeksWithInt:(jint)weeks {
  if (weeks == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weeks])) subtractWithLong:[self getLocalMillis] withInt:weeks];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)minusDaysWithInt:(jint)days {
  if (days == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) subtractWithLong:[self getLocalMillis] withInt:days];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)minusHoursWithInt:(jint)hours {
  if (hours == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hours])) subtractWithLong:[self getLocalMillis] withInt:hours];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)minusMinutesWithInt:(jint)minutes {
  if (minutes == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minutes])) subtractWithLong:[self getLocalMillis] withInt:minutes];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)minusSecondsWithInt:(jint)seconds {
  if (seconds == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) seconds])) subtractWithLong:[self getLocalMillis] withInt:seconds];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime *)minusMillisWithInt:(jint)millis {
  if (millis == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millis])) subtractWithLong:[self getLocalMillis] withInt:millis];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDateTime_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The DateTimeFieldType must not be null");
  }
  if ([self isSupportedWithOrgJodaTimeDateTimeFieldType:fieldType] == false) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Field '", fieldType, @"' is not supported"));
  }
  return new_OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(self, [fieldType getFieldWithOrgJodaTimeChronology:[self getChronology]]);
}

- (jint)getEra {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) era])) getWithLong:[self getLocalMillis]];
}

- (jint)getCenturyOfEra {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) centuryOfEra])) getWithLong:[self getLocalMillis]];
}

- (jint)getYearOfEra {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfEra])) getWithLong:[self getLocalMillis]];
}

- (jint)getYearOfCentury {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfCentury])) getWithLong:[self getLocalMillis]];
}

- (jint)getYear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) year])) getWithLong:[self getLocalMillis]];
}

- (jint)getWeekyear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear])) getWithLong:[self getLocalMillis]];
}

- (jint)getMonthOfYear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) getWithLong:[self getLocalMillis]];
}

- (jint)getWeekOfWeekyear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear])) getWithLong:[self getLocalMillis]];
}

- (jint)getDayOfYear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear])) getWithLong:[self getLocalMillis]];
}

- (jint)getDayOfMonth {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) getWithLong:[self getLocalMillis]];
}

- (jint)getDayOfWeek {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek])) getWithLong:[self getLocalMillis]];
}

- (jint)getHourOfDay {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay])) getWithLong:[self getLocalMillis]];
}

- (jint)getMinuteOfHour {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour])) getWithLong:[self getLocalMillis]];
}

- (jint)getSecondOfMinute {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute])) getWithLong:[self getLocalMillis]];
}

- (jint)getMillisOfSecond {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond])) getWithLong:[self getLocalMillis]];
}

- (jint)getMillisOfDay {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) getWithLong:[self getLocalMillis]];
}

- (OrgJodaTimeLocalDateTime *)withEraWithInt:(jint)era {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) era])) setWithLong:[self getLocalMillis] withInt:era]];
}

- (OrgJodaTimeLocalDateTime *)withCenturyOfEraWithInt:(jint)centuryOfEra {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) centuryOfEra])) setWithLong:[self getLocalMillis] withInt:centuryOfEra]];
}

- (OrgJodaTimeLocalDateTime *)withYearOfEraWithInt:(jint)yearOfEra {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfEra])) setWithLong:[self getLocalMillis] withInt:yearOfEra]];
}

- (OrgJodaTimeLocalDateTime *)withYearOfCenturyWithInt:(jint)yearOfCentury {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfCentury])) setWithLong:[self getLocalMillis] withInt:yearOfCentury]];
}

- (OrgJodaTimeLocalDateTime *)withYearWithInt:(jint)year {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) year])) setWithLong:[self getLocalMillis] withInt:year]];
}

- (OrgJodaTimeLocalDateTime *)withWeekyearWithInt:(jint)weekyear {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear])) setWithLong:[self getLocalMillis] withInt:weekyear]];
}

- (OrgJodaTimeLocalDateTime *)withMonthOfYearWithInt:(jint)monthOfYear {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) setWithLong:[self getLocalMillis] withInt:monthOfYear]];
}

- (OrgJodaTimeLocalDateTime *)withWeekOfWeekyearWithInt:(jint)weekOfWeekyear {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear])) setWithLong:[self getLocalMillis] withInt:weekOfWeekyear]];
}

- (OrgJodaTimeLocalDateTime *)withDayOfYearWithInt:(jint)dayOfYear {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear])) setWithLong:[self getLocalMillis] withInt:dayOfYear]];
}

- (OrgJodaTimeLocalDateTime *)withDayOfMonthWithInt:(jint)dayOfMonth {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) setWithLong:[self getLocalMillis] withInt:dayOfMonth]];
}

- (OrgJodaTimeLocalDateTime *)withDayOfWeekWithInt:(jint)dayOfWeek {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek])) setWithLong:[self getLocalMillis] withInt:dayOfWeek]];
}

- (OrgJodaTimeLocalDateTime *)withHourOfDayWithInt:(jint)hour {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay])) setWithLong:[self getLocalMillis] withInt:hour]];
}

- (OrgJodaTimeLocalDateTime *)withMinuteOfHourWithInt:(jint)minute {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour])) setWithLong:[self getLocalMillis] withInt:minute]];
}

- (OrgJodaTimeLocalDateTime *)withSecondOfMinuteWithInt:(jint)second {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute])) setWithLong:[self getLocalMillis] withInt:second]];
}

- (OrgJodaTimeLocalDateTime *)withMillisOfSecondWithInt:(jint)millis {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond])) setWithLong:[self getLocalMillis] withInt:millis]];
}

- (OrgJodaTimeLocalDateTime *)withMillisOfDayWithInt:(jint)millis {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) setWithLong:[self getLocalMillis] withInt:millis]];
}

- (OrgJodaTimeLocalDateTime_Property *)era {
  return new_OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) era]);
}

- (OrgJodaTimeLocalDateTime_Property *)centuryOfEra {
  return new_OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) centuryOfEra]);
}

- (OrgJodaTimeLocalDateTime_Property *)yearOfCentury {
  return new_OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfCentury]);
}

- (OrgJodaTimeLocalDateTime_Property *)yearOfEra {
  return new_OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfEra]);
}

- (OrgJodaTimeLocalDateTime_Property *)year {
  return new_OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) year]);
}

- (OrgJodaTimeLocalDateTime_Property *)weekyear {
  return new_OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear]);
}

- (OrgJodaTimeLocalDateTime_Property *)monthOfYear {
  return new_OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear]);
}

- (OrgJodaTimeLocalDateTime_Property *)weekOfWeekyear {
  return new_OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear]);
}

- (OrgJodaTimeLocalDateTime_Property *)dayOfYear {
  return new_OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear]);
}

- (OrgJodaTimeLocalDateTime_Property *)dayOfMonth {
  return new_OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth]);
}

- (OrgJodaTimeLocalDateTime_Property *)dayOfWeek {
  return new_OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek]);
}

- (OrgJodaTimeLocalDateTime_Property *)hourOfDay {
  return new_OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay]);
}

- (OrgJodaTimeLocalDateTime_Property *)minuteOfHour {
  return new_OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour]);
}

- (OrgJodaTimeLocalDateTime_Property *)secondOfMinute {
  return new_OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute]);
}

- (OrgJodaTimeLocalDateTime_Property *)millisOfSecond {
  return new_OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond]);
}

- (OrgJodaTimeLocalDateTime_Property *)millisOfDay {
  return new_OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay]);
}

- (NSString *)description {
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatISODateTimeFormat_dateTime())) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern
                withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) withLocaleWithJavaUtilLocale:locale])) printWithOrgJodaTimeReadablePartial:self];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x9, 3, 4, -1, -1, 5, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x9, 3, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 12, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 13, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 14, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 15, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 16, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 17, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 18, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 19, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x4, 21, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 27, 26, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "J", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 32, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, 33, 34, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x2, 35, 36, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x0, 37, 11, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 38, 39, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 40, 41, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 42, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 43, 44, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 45, 46, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 49, 50, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 51, 52, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 51, 53, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 54, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 55, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 56, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 57, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 58, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 59, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 60, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 61, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 62, 52, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 62, 53, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 63, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 64, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 65, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 66, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 67, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 68, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 69, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 70, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime_Property;", 0x1, 71, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 72, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 73, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 74, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 75, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 76, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 77, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 78, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 79, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 80, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 81, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 82, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 83, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 84, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 85, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 86, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 87, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 88, -1, -1, -1, 89, -1 },
    { NULL, "LNSString;", 0x1, 88, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 88, 90, 91, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(now);
  methods[1].selector = @selector(nowWithOrgJodaTimeDateTimeZone:);
  methods[2].selector = @selector(nowWithOrgJodaTimeChronology:);
  methods[3].selector = @selector(parseWithNSString:);
  methods[4].selector = @selector(parseWithNSString:withOrgJodaTimeFormatDateTimeFormatter:);
  methods[5].selector = @selector(fromCalendarFieldsWithJavaUtilCalendar:);
  methods[6].selector = @selector(fromDateFieldsWithJavaUtilDate:);
  methods[7].selector = @selector(init);
  methods[8].selector = @selector(initWithOrgJodaTimeDateTimeZone:);
  methods[9].selector = @selector(initWithOrgJodaTimeChronology:);
  methods[10].selector = @selector(initWithLong:);
  methods[11].selector = @selector(initWithLong:withOrgJodaTimeDateTimeZone:);
  methods[12].selector = @selector(initWithLong:withOrgJodaTimeChronology:);
  methods[13].selector = @selector(initWithId:);
  methods[14].selector = @selector(initWithId:withOrgJodaTimeDateTimeZone:);
  methods[15].selector = @selector(initWithId:withOrgJodaTimeChronology:);
  methods[16].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:);
  methods[17].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withInt:);
  methods[18].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:);
  methods[19].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withOrgJodaTimeChronology:);
  methods[20].selector = @selector(readResolve);
  methods[21].selector = @selector(size);
  methods[22].selector = @selector(getFieldWithInt:withOrgJodaTimeChronology:);
  methods[23].selector = @selector(getValueWithInt:);
  methods[24].selector = @selector(getWithOrgJodaTimeDateTimeFieldType:);
  methods[25].selector = @selector(isSupportedWithOrgJodaTimeDateTimeFieldType:);
  methods[26].selector = @selector(isSupportedWithOrgJodaTimeDurationFieldType:);
  methods[27].selector = @selector(getLocalMillis);
  methods[28].selector = @selector(getChronology);
  methods[29].selector = @selector(isEqual:);
  methods[30].selector = @selector(compareToWithId:);
  methods[31].selector = @selector(toDateTime);
  methods[32].selector = @selector(toDateTimeWithOrgJodaTimeDateTimeZone:);
  methods[33].selector = @selector(toLocalDate);
  methods[34].selector = @selector(toLocalTime);
  methods[35].selector = @selector(toDate);
  methods[36].selector = @selector(toDateWithJavaUtilTimeZone:);
  methods[37].selector = @selector(correctDstTransitionWithJavaUtilDate:withJavaUtilTimeZone:);
  methods[38].selector = @selector(withLocalMillisWithLong:);
  methods[39].selector = @selector(withDateWithInt:withInt:withInt:);
  methods[40].selector = @selector(withTimeWithInt:withInt:withInt:withInt:);
  methods[41].selector = @selector(withFieldsWithOrgJodaTimeReadablePartial:);
  methods[42].selector = @selector(withFieldWithOrgJodaTimeDateTimeFieldType:withInt:);
  methods[43].selector = @selector(withFieldAddedWithOrgJodaTimeDurationFieldType:withInt:);
  methods[44].selector = @selector(withDurationAddedWithOrgJodaTimeReadableDuration:withInt:);
  methods[45].selector = @selector(withPeriodAddedWithOrgJodaTimeReadablePeriod:withInt:);
  methods[46].selector = @selector(plusWithOrgJodaTimeReadableDuration:);
  methods[47].selector = @selector(plusWithOrgJodaTimeReadablePeriod:);
  methods[48].selector = @selector(plusYearsWithInt:);
  methods[49].selector = @selector(plusMonthsWithInt:);
  methods[50].selector = @selector(plusWeeksWithInt:);
  methods[51].selector = @selector(plusDaysWithInt:);
  methods[52].selector = @selector(plusHoursWithInt:);
  methods[53].selector = @selector(plusMinutesWithInt:);
  methods[54].selector = @selector(plusSecondsWithInt:);
  methods[55].selector = @selector(plusMillisWithInt:);
  methods[56].selector = @selector(minusWithOrgJodaTimeReadableDuration:);
  methods[57].selector = @selector(minusWithOrgJodaTimeReadablePeriod:);
  methods[58].selector = @selector(minusYearsWithInt:);
  methods[59].selector = @selector(minusMonthsWithInt:);
  methods[60].selector = @selector(minusWeeksWithInt:);
  methods[61].selector = @selector(minusDaysWithInt:);
  methods[62].selector = @selector(minusHoursWithInt:);
  methods[63].selector = @selector(minusMinutesWithInt:);
  methods[64].selector = @selector(minusSecondsWithInt:);
  methods[65].selector = @selector(minusMillisWithInt:);
  methods[66].selector = @selector(propertyWithOrgJodaTimeDateTimeFieldType:);
  methods[67].selector = @selector(getEra);
  methods[68].selector = @selector(getCenturyOfEra);
  methods[69].selector = @selector(getYearOfEra);
  methods[70].selector = @selector(getYearOfCentury);
  methods[71].selector = @selector(getYear);
  methods[72].selector = @selector(getWeekyear);
  methods[73].selector = @selector(getMonthOfYear);
  methods[74].selector = @selector(getWeekOfWeekyear);
  methods[75].selector = @selector(getDayOfYear);
  methods[76].selector = @selector(getDayOfMonth);
  methods[77].selector = @selector(getDayOfWeek);
  methods[78].selector = @selector(getHourOfDay);
  methods[79].selector = @selector(getMinuteOfHour);
  methods[80].selector = @selector(getSecondOfMinute);
  methods[81].selector = @selector(getMillisOfSecond);
  methods[82].selector = @selector(getMillisOfDay);
  methods[83].selector = @selector(withEraWithInt:);
  methods[84].selector = @selector(withCenturyOfEraWithInt:);
  methods[85].selector = @selector(withYearOfEraWithInt:);
  methods[86].selector = @selector(withYearOfCenturyWithInt:);
  methods[87].selector = @selector(withYearWithInt:);
  methods[88].selector = @selector(withWeekyearWithInt:);
  methods[89].selector = @selector(withMonthOfYearWithInt:);
  methods[90].selector = @selector(withWeekOfWeekyearWithInt:);
  methods[91].selector = @selector(withDayOfYearWithInt:);
  methods[92].selector = @selector(withDayOfMonthWithInt:);
  methods[93].selector = @selector(withDayOfWeekWithInt:);
  methods[94].selector = @selector(withHourOfDayWithInt:);
  methods[95].selector = @selector(withMinuteOfHourWithInt:);
  methods[96].selector = @selector(withSecondOfMinuteWithInt:);
  methods[97].selector = @selector(withMillisOfSecondWithInt:);
  methods[98].selector = @selector(withMillisOfDayWithInt:);
  methods[99].selector = @selector(era);
  methods[100].selector = @selector(centuryOfEra);
  methods[101].selector = @selector(yearOfCentury);
  methods[102].selector = @selector(yearOfEra);
  methods[103].selector = @selector(year);
  methods[104].selector = @selector(weekyear);
  methods[105].selector = @selector(monthOfYear);
  methods[106].selector = @selector(weekOfWeekyear);
  methods[107].selector = @selector(dayOfYear);
  methods[108].selector = @selector(dayOfMonth);
  methods[109].selector = @selector(dayOfWeek);
  methods[110].selector = @selector(hourOfDay);
  methods[111].selector = @selector(minuteOfHour);
  methods[112].selector = @selector(secondOfMinute);
  methods[113].selector = @selector(millisOfSecond);
  methods[114].selector = @selector(millisOfDay);
  methods[115].selector = @selector(description);
  methods[116].selector = @selector(toStringWithNSString:);
  methods[117].selector = @selector(toStringWithNSString:withJavaUtilLocale:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeLocalDateTime_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "YEAR", "I", .constantValue.asInt = OrgJodaTimeLocalDateTime_YEAR, 0x1a, -1, -1, -1, -1 },
    { "MONTH_OF_YEAR", "I", .constantValue.asInt = OrgJodaTimeLocalDateTime_MONTH_OF_YEAR, 0x1a, -1, -1, -1, -1 },
    { "DAY_OF_MONTH", "I", .constantValue.asInt = OrgJodaTimeLocalDateTime_DAY_OF_MONTH, 0x1a, -1, -1, -1, -1 },
    { "MILLIS_OF_DAY", "I", .constantValue.asInt = OrgJodaTimeLocalDateTime_MILLIS_OF_DAY, 0x1a, -1, -1, -1, -1 },
    { "iLocalMillis_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iChronology_", "LOrgJodaTimeChronology;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "now", "LOrgJodaTimeDateTimeZone;", "LOrgJodaTimeChronology;", "parse", "LNSString;", (void *)&OrgJodaTimeLocalDateTime__Annotations$0, "LNSString;LOrgJodaTimeFormatDateTimeFormatter;", "fromCalendarFields", "LJavaUtilCalendar;", "fromDateFields", "LJavaUtilDate;", "J", "JLOrgJodaTimeDateTimeZone;", "JLOrgJodaTimeChronology;", "LNSObject;", "LNSObject;LOrgJodaTimeDateTimeZone;", "LNSObject;LOrgJodaTimeChronology;", "IIIII", "IIIIII", "IIIIIII", "IIIIIIILOrgJodaTimeChronology;", "getField", "ILOrgJodaTimeChronology;", "getValue", "I", "get", "LOrgJodaTimeDateTimeFieldType;", "isSupported", "LOrgJodaTimeDurationFieldType;", "equals", "compareTo", "LOrgJodaTimeReadablePartial;", "toDateTime", "toDate", "LJavaUtilTimeZone;", "correctDstTransition", "LJavaUtilDate;LJavaUtilTimeZone;", "withLocalMillis", "withDate", "III", "withTime", "IIII", "withFields", "withField", "LOrgJodaTimeDateTimeFieldType;I", "withFieldAdded", "LOrgJodaTimeDurationFieldType;I", "withDurationAdded", "LOrgJodaTimeReadableDuration;I", "withPeriodAdded", "LOrgJodaTimeReadablePeriod;I", "plus", "LOrgJodaTimeReadableDuration;", "LOrgJodaTimeReadablePeriod;", "plusYears", "plusMonths", "plusWeeks", "plusDays", "plusHours", "plusMinutes", "plusSeconds", "plusMillis", "minus", "minusYears", "minusMonths", "minusWeeks", "minusDays", "minusHours", "minusMinutes", "minusSeconds", "minusMillis", "property", "withEra", "withCenturyOfEra", "withYearOfEra", "withYearOfCentury", "withYear", "withWeekyear", "withMonthOfYear", "withWeekOfWeekyear", "withDayOfYear", "withDayOfMonth", "withDayOfWeek", "withHourOfDay", "withMinuteOfHour", "withSecondOfMinute", "withMillisOfSecond", "withMillisOfDay", "toString", (void *)&OrgJodaTimeLocalDateTime__Annotations$1, "LNSString;LJavaUtilLocale;", "LJavaLangIllegalArgumentException;", "LOrgJodaTimeLocalDateTime_Property;" };
  static const J2ObjcClassInfo _OrgJodaTimeLocalDateTime = { "LocalDateTime", "org.joda.time", ptrTable, methods, fields, 7, 0x11, 118, 7, -1, 92, -1, -1, -1 };
  return &_OrgJodaTimeLocalDateTime;
}

@end

OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_now() {
  OrgJodaTimeLocalDateTime_initialize();
  return new_OrgJodaTimeLocalDateTime_init();
}

OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_nowWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalDateTime_initialize();
  if (zone == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Zone must not be null");
  }
  return new_OrgJodaTimeLocalDateTime_initWithOrgJodaTimeDateTimeZone_(zone);
}

OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_nowWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  OrgJodaTimeLocalDateTime_initialize();
  if (chronology == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Chronology must not be null");
  }
  return new_OrgJodaTimeLocalDateTime_initWithOrgJodaTimeChronology_(chronology);
}

OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_parseWithNSString_(NSString *str) {
  OrgJodaTimeLocalDateTime_initialize();
  return OrgJodaTimeLocalDateTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, OrgJodaTimeFormatISODateTimeFormat_localDateOptionalTimeParser());
}

OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(NSString *str, OrgJodaTimeFormatDateTimeFormatter *formatter) {
  OrgJodaTimeLocalDateTime_initialize();
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(formatter)) parseLocalDateTimeWithNSString:str];
}

OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_fromCalendarFieldsWithJavaUtilCalendar_(JavaUtilCalendar *calendar) {
  OrgJodaTimeLocalDateTime_initialize();
  if (calendar == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The calendar must not be null");
  }
  jint era = [calendar getWithInt:JavaUtilCalendar_ERA];
  jint yearOfEra = [calendar getWithInt:JavaUtilCalendar_YEAR];
  return new_OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_((era == JavaUtilGregorianCalendar_AD ? yearOfEra : 1 - yearOfEra), [calendar getWithInt:JavaUtilCalendar_MONTH] + 1, [calendar getWithInt:JavaUtilCalendar_DAY_OF_MONTH], [calendar getWithInt:JavaUtilCalendar_HOUR_OF_DAY], [calendar getWithInt:JavaUtilCalendar_MINUTE], [calendar getWithInt:JavaUtilCalendar_SECOND], [calendar getWithInt:JavaUtilCalendar_MILLISECOND]);
}

OrgJodaTimeLocalDateTime *OrgJodaTimeLocalDateTime_fromDateFieldsWithJavaUtilDate_(JavaUtilDate *date) {
  OrgJodaTimeLocalDateTime_initialize();
  if (date == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  if ([date getTime] < 0) {
    JavaUtilGregorianCalendar *cal = new_JavaUtilGregorianCalendar_init();
    [cal setTimeWithJavaUtilDate:date];
    return OrgJodaTimeLocalDateTime_fromCalendarFieldsWithJavaUtilCalendar_(cal);
  }
  return new_OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_([date getYear] + 1900, [date getMonth] + 1, [date getDate], [date getHours], [date getMinutes], [date getSeconds], (((jint) ([date getTime] % 1000)) + 1000) % 1000);
}

void OrgJodaTimeLocalDateTime_init(OrgJodaTimeLocalDateTime *self) {
  OrgJodaTimeLocalDateTime_initWithLong_withOrgJodaTimeChronology_(self, OrgJodaTimeDateTimeUtils_currentTimeMillis(), OrgJodaTimeChronoISOChronology_getInstance());
}

OrgJodaTimeLocalDateTime *new_OrgJodaTimeLocalDateTime_init() {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDateTime, init)
}

OrgJodaTimeLocalDateTime *create_OrgJodaTimeLocalDateTime_init() {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDateTime, init)
}

void OrgJodaTimeLocalDateTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalDateTime *self, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalDateTime_initWithLong_withOrgJodaTimeChronology_(self, OrgJodaTimeDateTimeUtils_currentTimeMillis(), OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone));
}

OrgJodaTimeLocalDateTime *new_OrgJodaTimeLocalDateTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDateTime, initWithOrgJodaTimeDateTimeZone_, zone)
}

OrgJodaTimeLocalDateTime *create_OrgJodaTimeLocalDateTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDateTime, initWithOrgJodaTimeDateTimeZone_, zone)
}

void OrgJodaTimeLocalDateTime_initWithOrgJodaTimeChronology_(OrgJodaTimeLocalDateTime *self, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeLocalDateTime_initWithLong_withOrgJodaTimeChronology_(self, OrgJodaTimeDateTimeUtils_currentTimeMillis(), chronology);
}

OrgJodaTimeLocalDateTime *new_OrgJodaTimeLocalDateTime_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDateTime, initWithOrgJodaTimeChronology_, chronology)
}

OrgJodaTimeLocalDateTime *create_OrgJodaTimeLocalDateTime_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDateTime, initWithOrgJodaTimeChronology_, chronology)
}

void OrgJodaTimeLocalDateTime_initWithLong_(OrgJodaTimeLocalDateTime *self, jlong instant) {
  OrgJodaTimeLocalDateTime_initWithLong_withOrgJodaTimeChronology_(self, instant, OrgJodaTimeChronoISOChronology_getInstance());
}

OrgJodaTimeLocalDateTime *new_OrgJodaTimeLocalDateTime_initWithLong_(jlong instant) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDateTime, initWithLong_, instant)
}

OrgJodaTimeLocalDateTime *create_OrgJodaTimeLocalDateTime_initWithLong_(jlong instant) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDateTime, initWithLong_, instant)
}

void OrgJodaTimeLocalDateTime_initWithLong_withOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalDateTime *self, jlong instant, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalDateTime_initWithLong_withOrgJodaTimeChronology_(self, instant, OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone));
}

OrgJodaTimeLocalDateTime *new_OrgJodaTimeLocalDateTime_initWithLong_withOrgJodaTimeDateTimeZone_(jlong instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDateTime, initWithLong_withOrgJodaTimeDateTimeZone_, instant, zone)
}

OrgJodaTimeLocalDateTime *create_OrgJodaTimeLocalDateTime_initWithLong_withOrgJodaTimeDateTimeZone_(jlong instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDateTime, initWithLong_withOrgJodaTimeDateTimeZone_, instant, zone)
}

void OrgJodaTimeLocalDateTime_initWithLong_withOrgJodaTimeChronology_(OrgJodaTimeLocalDateTime *self, jlong instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseLocal_init(self);
  chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
  jlong localMillis = [((OrgJodaTimeDateTimeZone *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chronology)) getZone])) getMillisKeepLocalWithOrgJodaTimeDateTimeZone:JreLoadStatic(OrgJodaTimeDateTimeZone, UTC) withLong:instant];
  self->iLocalMillis_ = localMillis;
  self->iChronology_ = [chronology withUTC];
}

OrgJodaTimeLocalDateTime *new_OrgJodaTimeLocalDateTime_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDateTime, initWithLong_withOrgJodaTimeChronology_, instant, chronology)
}

OrgJodaTimeLocalDateTime *create_OrgJodaTimeLocalDateTime_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDateTime, initWithLong_withOrgJodaTimeChronology_, instant, chronology)
}

void OrgJodaTimeLocalDateTime_initWithId_(OrgJodaTimeLocalDateTime *self, id instant) {
  OrgJodaTimeLocalDateTime_initWithId_withOrgJodaTimeChronology_(self, instant, nil);
}

OrgJodaTimeLocalDateTime *new_OrgJodaTimeLocalDateTime_initWithId_(id instant) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDateTime, initWithId_, instant)
}

OrgJodaTimeLocalDateTime *create_OrgJodaTimeLocalDateTime_initWithId_(id instant) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDateTime, initWithId_, instant)
}

void OrgJodaTimeLocalDateTime_initWithId_withOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalDateTime *self, id instant, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeBaseBaseLocal_init(self);
  id<OrgJodaTimeConvertPartialConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getPartialConverterWithId:instant];
  OrgJodaTimeChronology *chronology = [((id<OrgJodaTimeConvertPartialConverter>) nil_chk(converter)) getChronologyWithId:instant withOrgJodaTimeDateTimeZone:zone];
  chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
  self->iChronology_ = [((OrgJodaTimeChronology *) nil_chk(chronology)) withUTC];
  IOSIntArray *values = [converter getPartialValuesWithOrgJodaTimeReadablePartial:self withId:instant withOrgJodaTimeChronology:chronology withOrgJodaTimeFormatDateTimeFormatter:OrgJodaTimeFormatISODateTimeFormat_localDateOptionalTimeParser()];
  self->iLocalMillis_ = [((OrgJodaTimeChronology *) nil_chk(self->iChronology_)) getDateTimeMillisWithInt:IOSIntArray_Get(nil_chk(values), 0) withInt:IOSIntArray_Get(values, 1) withInt:IOSIntArray_Get(values, 2) withInt:IOSIntArray_Get(values, 3)];
}

OrgJodaTimeLocalDateTime *new_OrgJodaTimeLocalDateTime_initWithId_withOrgJodaTimeDateTimeZone_(id instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDateTime, initWithId_withOrgJodaTimeDateTimeZone_, instant, zone)
}

OrgJodaTimeLocalDateTime *create_OrgJodaTimeLocalDateTime_initWithId_withOrgJodaTimeDateTimeZone_(id instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDateTime, initWithId_withOrgJodaTimeDateTimeZone_, instant, zone)
}

void OrgJodaTimeLocalDateTime_initWithId_withOrgJodaTimeChronology_(OrgJodaTimeLocalDateTime *self, id instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseLocal_init(self);
  id<OrgJodaTimeConvertPartialConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getPartialConverterWithId:instant];
  chronology = [((id<OrgJodaTimeConvertPartialConverter>) nil_chk(converter)) getChronologyWithId:instant withOrgJodaTimeChronology:chronology];
  chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
  self->iChronology_ = [((OrgJodaTimeChronology *) nil_chk(chronology)) withUTC];
  IOSIntArray *values = [converter getPartialValuesWithOrgJodaTimeReadablePartial:self withId:instant withOrgJodaTimeChronology:chronology withOrgJodaTimeFormatDateTimeFormatter:OrgJodaTimeFormatISODateTimeFormat_localDateOptionalTimeParser()];
  self->iLocalMillis_ = [((OrgJodaTimeChronology *) nil_chk(self->iChronology_)) getDateTimeMillisWithInt:IOSIntArray_Get(nil_chk(values), 0) withInt:IOSIntArray_Get(values, 1) withInt:IOSIntArray_Get(values, 2) withInt:IOSIntArray_Get(values, 3)];
}

OrgJodaTimeLocalDateTime *new_OrgJodaTimeLocalDateTime_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDateTime, initWithId_withOrgJodaTimeChronology_, instant, chronology)
}

OrgJodaTimeLocalDateTime *create_OrgJodaTimeLocalDateTime_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDateTime, initWithId_withOrgJodaTimeChronology_, instant, chronology)
}

void OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_(OrgJodaTimeLocalDateTime *self, jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour) {
  OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, 0, 0, OrgJodaTimeChronoISOChronology_getInstanceUTC());
}

OrgJodaTimeLocalDateTime *new_OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDateTime, initWithInt_withInt_withInt_withInt_withInt_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour)
}

OrgJodaTimeLocalDateTime *create_OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDateTime, initWithInt_withInt_withInt_withInt_withInt_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour)
}

void OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_(OrgJodaTimeLocalDateTime *self, jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute) {
  OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, 0, OrgJodaTimeChronoISOChronology_getInstanceUTC());
}

OrgJodaTimeLocalDateTime *new_OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute)
}

OrgJodaTimeLocalDateTime *create_OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute)
}

void OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(OrgJodaTimeLocalDateTime *self, jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) {
  OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, OrgJodaTimeChronoISOChronology_getInstanceUTC());
}

OrgJodaTimeLocalDateTime *new_OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond)
}

OrgJodaTimeLocalDateTime *create_OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond)
}

void OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeLocalDateTime *self, jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseLocal_init(self);
  chronology = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology))) withUTC];
  jlong instant = [((OrgJodaTimeChronology *) nil_chk(chronology)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  self->iChronology_ = chronology;
  self->iLocalMillis_ = instant;
}

OrgJodaTimeLocalDateTime *new_OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology)
}

OrgJodaTimeLocalDateTime *create_OrgJodaTimeLocalDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology)
}

JavaUtilDate *OrgJodaTimeLocalDateTime_correctDstTransitionWithJavaUtilDate_withJavaUtilTimeZone_(OrgJodaTimeLocalDateTime *self, JavaUtilDate *date, JavaUtilTimeZone *timeZone) {
  JavaUtilCalendar *calendar = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_(timeZone);
  [((JavaUtilCalendar *) nil_chk(calendar)) setTimeWithJavaUtilDate:date];
  OrgJodaTimeLocalDateTime *check = OrgJodaTimeLocalDateTime_fromCalendarFieldsWithJavaUtilCalendar_(calendar);
  if ([((OrgJodaTimeLocalDateTime *) nil_chk(check)) isBeforeWithOrgJodaTimeReadablePartial:self]) {
    while ([((OrgJodaTimeLocalDateTime *) nil_chk(check)) isBeforeWithOrgJodaTimeReadablePartial:self]) {
      [calendar setTimeInMillisWithLong:[calendar getTimeInMillis] + 60000];
      check = OrgJodaTimeLocalDateTime_fromCalendarFieldsWithJavaUtilCalendar_(calendar);
    }
    while ([((OrgJodaTimeLocalDateTime *) nil_chk(check)) isBeforeWithOrgJodaTimeReadablePartial:self] == false) {
      [calendar setTimeInMillisWithLong:[calendar getTimeInMillis] - 1000];
      check = OrgJodaTimeLocalDateTime_fromCalendarFieldsWithJavaUtilCalendar_(calendar);
    }
    [calendar setTimeInMillisWithLong:[calendar getTimeInMillis] + 1000];
  }
  else if ([check isEqual:self]) {
    JavaUtilCalendar *earlier = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_(timeZone);
    [((JavaUtilCalendar *) nil_chk(earlier)) setTimeInMillisWithLong:[calendar getTimeInMillis] - [((JavaUtilTimeZone *) nil_chk(timeZone)) getDSTSavings]];
    check = OrgJodaTimeLocalDateTime_fromCalendarFieldsWithJavaUtilCalendar_(earlier);
    if ([((OrgJodaTimeLocalDateTime *) nil_chk(check)) isEqual:self]) {
      calendar = earlier;
    }
  }
  return [calendar getTime];
}

IOSObjectArray *OrgJodaTimeLocalDateTime__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_OrgJodaConvertFromString() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgJodaTimeLocalDateTime__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_OrgJodaConvertToString() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeLocalDateTime)

@implementation OrgJodaTimeLocalDateTime_Property

- (instancetype)initWithOrgJodaTimeLocalDateTime:(OrgJodaTimeLocalDateTime *)instant
                    withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(self, instant, field);
  return self;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos {
  [((JavaIoObjectOutputStream *) nil_chk(oos)) writeObjectWithId:iInstant_];
  [oos writeObjectWithId:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getType]];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos {
  iInstant_ = (OrgJodaTimeLocalDateTime *) cast_chk([((JavaIoObjectInputStream *) nil_chk(oos)) readObject], [OrgJodaTimeLocalDateTime class]);
  OrgJodaTimeDateTimeFieldType *type = (OrgJodaTimeDateTimeFieldType *) cast_chk([oos readObject], [OrgJodaTimeDateTimeFieldType class]);
  iField_ = [((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) getChronology]];
}

- (OrgJodaTimeDateTimeField *)getField {
  return iField_;
}

- (jlong)getMillis {
  return [((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) getLocalMillis];
}

- (OrgJodaTimeChronology *)getChronology {
  return [((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) getChronology];
}

- (OrgJodaTimeLocalDateTime *)getLocalDateTime {
  return iInstant_;
}

- (OrgJodaTimeLocalDateTime *)addToCopyWithInt:(jint)value {
  return [((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:[iInstant_ getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalDateTime *)addToCopyWithLong:(jlong)value {
  return [((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:[iInstant_ getLocalMillis] withLong:value]];
}

- (OrgJodaTimeLocalDateTime *)addWrapFieldToCopyWithInt:(jint)value {
  return [((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWrapFieldWithLong:[iInstant_ getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalDateTime *)setCopyWithInt:(jint)value {
  return [((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:[iInstant_ getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalDateTime *)setCopyWithNSString:(NSString *)text
                               withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:[iInstant_ getLocalMillis] withNSString:text withJavaUtilLocale:locale]];
}

- (OrgJodaTimeLocalDateTime *)setCopyWithNSString:(NSString *)text {
  return [self setCopyWithNSString:text withJavaUtilLocale:nil];
}

- (OrgJodaTimeLocalDateTime *)withMaximumValue {
  return [self setCopyWithInt:[self getMaximumValue]];
}

- (OrgJodaTimeLocalDateTime *)withMinimumValue {
  return [self setCopyWithInt:[self getMinimumValue]];
}

- (OrgJodaTimeLocalDateTime *)roundFloorCopy {
  return [((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundFloorWithLong:[iInstant_ getLocalMillis]]];
}

- (OrgJodaTimeLocalDateTime *)roundCeilingCopy {
  return [((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundCeilingWithLong:[iInstant_ getLocalMillis]]];
}

- (OrgJodaTimeLocalDateTime *)roundHalfFloorCopy {
  return [((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfFloorWithLong:[iInstant_ getLocalMillis]]];
}

- (OrgJodaTimeLocalDateTime *)roundHalfCeilingCopy {
  return [((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfCeilingWithLong:[iInstant_ getLocalMillis]]];
}

- (OrgJodaTimeLocalDateTime *)roundHalfEvenCopy {
  return [((OrgJodaTimeLocalDateTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfEvenWithLong:[iInstant_ getLocalMillis]]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, 6, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 7, 9, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 11, 13, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeLocalDateTime:withOrgJodaTimeDateTimeField:);
  methods[1].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[2].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[3].selector = @selector(getField);
  methods[4].selector = @selector(getMillis);
  methods[5].selector = @selector(getChronology);
  methods[6].selector = @selector(getLocalDateTime);
  methods[7].selector = @selector(addToCopyWithInt:);
  methods[8].selector = @selector(addToCopyWithLong:);
  methods[9].selector = @selector(addWrapFieldToCopyWithInt:);
  methods[10].selector = @selector(setCopyWithInt:);
  methods[11].selector = @selector(setCopyWithNSString:withJavaUtilLocale:);
  methods[12].selector = @selector(setCopyWithNSString:);
  methods[13].selector = @selector(withMaximumValue);
  methods[14].selector = @selector(withMinimumValue);
  methods[15].selector = @selector(roundFloorCopy);
  methods[16].selector = @selector(roundCeilingCopy);
  methods[17].selector = @selector(roundHalfFloorCopy);
  methods[18].selector = @selector(roundHalfCeilingCopy);
  methods[19].selector = @selector(roundHalfEvenCopy);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeLocalDateTime_Property_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iInstant_", "LOrgJodaTimeLocalDateTime;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iField_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeLocalDateTime;LOrgJodaTimeDateTimeField;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "addToCopy", "I", "J", "addWrapFieldToCopy", "setCopy", "LNSString;LJavaUtilLocale;", "LNSString;", "LOrgJodaTimeLocalDateTime;" };
  static const J2ObjcClassInfo _OrgJodaTimeLocalDateTime_Property = { "Property", "org.joda.time", ptrTable, methods, fields, 7, 0x19, 20, 3, 14, -1, -1, -1, -1 };
  return &_OrgJodaTimeLocalDateTime_Property;
}

@end

void OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalDateTime_Property *self, OrgJodaTimeLocalDateTime *instant, OrgJodaTimeDateTimeField *field) {
  OrgJodaTimeFieldAbstractReadableInstantFieldProperty_init(self);
  self->iInstant_ = instant;
  self->iField_ = field;
}

OrgJodaTimeLocalDateTime_Property *new_OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalDateTime *instant, OrgJodaTimeDateTimeField *field) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDateTime_Property, initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_, instant, field)
}

OrgJodaTimeLocalDateTime_Property *create_OrgJodaTimeLocalDateTime_Property_initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalDateTime *instant, OrgJodaTimeDateTimeField *field) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDateTime_Property, initWithOrgJodaTimeLocalDateTime_withOrgJodaTimeDateTimeField_, instant, field)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeLocalDateTime_Property)
