//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/IllegalFieldValueException.java
//

#include "DateTimeFieldType.h"
#include "DurationFieldType.h"
#include "IOSClass.h"
#include "IllegalFieldValueException.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"

static id (*OrgJodaTimeIllegalFieldValueException_super$_getMessage)(id, SEL);

@interface OrgJodaTimeIllegalFieldValueException () {
 @public
  OrgJodaTimeDateTimeFieldType *iDateTimeFieldType_;
  OrgJodaTimeDurationFieldType *iDurationFieldType_;
  NSString *iFieldName_;
  NSNumber *iNumberValue_;
  NSString *iStringValue_;
  NSNumber *iLowerBound_;
  NSNumber *iUpperBound_;
  NSString *iMessage_;
}

+ (NSString *)createMessageWithNSString:(NSString *)fieldName
                           withNSNumber:(NSNumber *)value
                           withNSNumber:(NSNumber *)lowerBound
                           withNSNumber:(NSNumber *)upperBound
                           withNSString:(NSString *)explain;

+ (NSString *)createMessageWithNSString:(NSString *)fieldName
                           withNSString:(NSString *)value;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeIllegalFieldValueException, iDateTimeFieldType_, OrgJodaTimeDateTimeFieldType *)
J2OBJC_FIELD_SETTER(OrgJodaTimeIllegalFieldValueException, iDurationFieldType_, OrgJodaTimeDurationFieldType *)
J2OBJC_FIELD_SETTER(OrgJodaTimeIllegalFieldValueException, iFieldName_, NSString *)
J2OBJC_FIELD_SETTER(OrgJodaTimeIllegalFieldValueException, iNumberValue_, NSNumber *)
J2OBJC_FIELD_SETTER(OrgJodaTimeIllegalFieldValueException, iStringValue_, NSString *)
J2OBJC_FIELD_SETTER(OrgJodaTimeIllegalFieldValueException, iLowerBound_, NSNumber *)
J2OBJC_FIELD_SETTER(OrgJodaTimeIllegalFieldValueException, iUpperBound_, NSNumber *)
J2OBJC_FIELD_SETTER(OrgJodaTimeIllegalFieldValueException, iMessage_, NSString *)

inline jlong OrgJodaTimeIllegalFieldValueException_get_serialVersionUID();
#define OrgJodaTimeIllegalFieldValueException_serialVersionUID 6305711765985447737LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeIllegalFieldValueException, serialVersionUID, jlong)

__attribute__((unused)) static NSString *OrgJodaTimeIllegalFieldValueException_createMessageWithNSString_withNSNumber_withNSNumber_withNSNumber_withNSString_(NSString *fieldName, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound, NSString *explain);

__attribute__((unused)) static NSString *OrgJodaTimeIllegalFieldValueException_createMessageWithNSString_withNSString_(NSString *fieldName, NSString *value);

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeIllegalFieldValueException)

@implementation OrgJodaTimeIllegalFieldValueException

+ (NSString *)createMessageWithNSString:(NSString *)fieldName
                           withNSNumber:(NSNumber *)value
                           withNSNumber:(NSNumber *)lowerBound
                           withNSNumber:(NSNumber *)upperBound
                           withNSString:(NSString *)explain {
  return OrgJodaTimeIllegalFieldValueException_createMessageWithNSString_withNSNumber_withNSNumber_withNSNumber_withNSString_(fieldName, value, lowerBound, upperBound, explain);
}

+ (NSString *)createMessageWithNSString:(NSString *)fieldName
                           withNSString:(NSString *)value {
  return OrgJodaTimeIllegalFieldValueException_createMessageWithNSString_withNSString_(fieldName, value);
}

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                        withNSNumber:(NSNumber *)value
                                        withNSNumber:(NSNumber *)lowerBound
                                        withNSNumber:(NSNumber *)upperBound {
  OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSNumber_withNSNumber_(self, fieldType, value, lowerBound, upperBound);
  return self;
}

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                        withNSNumber:(NSNumber *)value
                                        withNSString:(NSString *)explain {
  OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSString_(self, fieldType, value, explain);
  return self;
}

- (instancetype)initWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                        withNSNumber:(NSNumber *)value
                                        withNSNumber:(NSNumber *)lowerBound
                                        withNSNumber:(NSNumber *)upperBound {
  OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDurationFieldType_withNSNumber_withNSNumber_withNSNumber_(self, fieldType, value, lowerBound, upperBound);
  return self;
}

- (instancetype)initWithNSString:(NSString *)fieldName
                    withNSNumber:(NSNumber *)value
                    withNSNumber:(NSNumber *)lowerBound
                    withNSNumber:(NSNumber *)upperBound {
  OrgJodaTimeIllegalFieldValueException_initWithNSString_withNSNumber_withNSNumber_withNSNumber_(self, fieldName, value, lowerBound, upperBound);
  return self;
}

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                        withNSString:(NSString *)value {
  OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSString_(self, fieldType, value);
  return self;
}

- (instancetype)initWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                        withNSString:(NSString *)value {
  OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDurationFieldType_withNSString_(self, fieldType, value);
  return self;
}

- (instancetype)initWithNSString:(NSString *)fieldName
                    withNSString:(NSString *)value {
  OrgJodaTimeIllegalFieldValueException_initWithNSString_withNSString_(self, fieldName, value);
  return self;
}

- (OrgJodaTimeDateTimeFieldType *)getDateTimeFieldType {
  return iDateTimeFieldType_;
}

- (OrgJodaTimeDurationFieldType *)getDurationFieldType {
  return iDurationFieldType_;
}

- (NSString *)getFieldName {
  return iFieldName_;
}

- (NSNumber *)getIllegalNumberValue {
  return iNumberValue_;
}

- (NSString *)getIllegalStringValue {
  return iStringValue_;
}

- (NSString *)getIllegalValueAsString {
  NSString *value = iStringValue_;
  if (value == nil) {
    value = NSString_valueOf_(iNumberValue_);
  }
  return value;
}

- (NSNumber *)getLowerBound {
  return iLowerBound_;
}

- (NSNumber *)getUpperBound {
  return iUpperBound_;
}

- (NSString *)getMessage {
  return iMessage_;
}

- (void)prependMessageWithNSString:(NSString *)message {
  if (iMessage_ == nil) {
    iMessage_ = message;
  }
  else if (message != nil) {
    iMessage_ = JreStrcat("$$$", message, @": ", iMessage_);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeFieldType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationFieldType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createMessageWithNSString:withNSNumber:withNSNumber:withNSNumber:withNSString:);
  methods[1].selector = @selector(createMessageWithNSString:withNSString:);
  methods[2].selector = @selector(initWithOrgJodaTimeDateTimeFieldType:withNSNumber:withNSNumber:withNSNumber:);
  methods[3].selector = @selector(initWithOrgJodaTimeDateTimeFieldType:withNSNumber:withNSString:);
  methods[4].selector = @selector(initWithOrgJodaTimeDurationFieldType:withNSNumber:withNSNumber:withNSNumber:);
  methods[5].selector = @selector(initWithNSString:withNSNumber:withNSNumber:withNSNumber:);
  methods[6].selector = @selector(initWithOrgJodaTimeDateTimeFieldType:withNSString:);
  methods[7].selector = @selector(initWithOrgJodaTimeDurationFieldType:withNSString:);
  methods[8].selector = @selector(initWithNSString:withNSString:);
  methods[9].selector = @selector(getDateTimeFieldType);
  methods[10].selector = @selector(getDurationFieldType);
  methods[11].selector = @selector(getFieldName);
  methods[12].selector = @selector(getIllegalNumberValue);
  methods[13].selector = @selector(getIllegalStringValue);
  methods[14].selector = @selector(getIllegalValueAsString);
  methods[15].selector = @selector(getLowerBound);
  methods[16].selector = @selector(getUpperBound);
  methods[17].selector = @selector(getMessage);
  methods[18].selector = @selector(prependMessageWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeIllegalFieldValueException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iDateTimeFieldType_", "LOrgJodaTimeDateTimeFieldType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iDurationFieldType_", "LOrgJodaTimeDurationFieldType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iFieldName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iNumberValue_", "LNSNumber;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iStringValue_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iLowerBound_", "LNSNumber;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iUpperBound_", "LNSNumber;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iMessage_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "createMessage", "LNSString;LNSNumber;LNSNumber;LNSNumber;LNSString;", "LNSString;LNSString;", "LOrgJodaTimeDateTimeFieldType;LNSNumber;LNSNumber;LNSNumber;", "LOrgJodaTimeDateTimeFieldType;LNSNumber;LNSString;", "LOrgJodaTimeDurationFieldType;LNSNumber;LNSNumber;LNSNumber;", "LNSString;LNSNumber;LNSNumber;LNSNumber;", "LOrgJodaTimeDateTimeFieldType;LNSString;", "LOrgJodaTimeDurationFieldType;LNSString;", "prependMessage", "LNSString;" };
  static const J2ObjcClassInfo _OrgJodaTimeIllegalFieldValueException = { "IllegalFieldValueException", "org.joda.time", ptrTable, methods, fields, 7, 0x1, 19, 9, -1, -1, -1, -1, -1 };
  return &_OrgJodaTimeIllegalFieldValueException;
}

+ (void)initialize {
  if (self == [OrgJodaTimeIllegalFieldValueException class]) {
    OrgJodaTimeIllegalFieldValueException_super$_getMessage = (id (*)(id, SEL))[JavaLangIllegalArgumentException instanceMethodForSelector:@selector(getMessage)];
    J2OBJC_SET_INITIALIZED(OrgJodaTimeIllegalFieldValueException)
  }
}

@end

NSString *OrgJodaTimeIllegalFieldValueException_createMessageWithNSString_withNSNumber_withNSNumber_withNSNumber_withNSString_(NSString *fieldName, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound, NSString *explain) {
  OrgJodaTimeIllegalFieldValueException_initialize();
  JavaLangStringBuilder *buf = [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_init() appendWithNSString:@"Value "])) appendWithId:value])) appendWithNSString:@" for "])) appendWithNSString:fieldName])) appendWithChar:' '];
  if (lowerBound == nil) {
    if (upperBound == nil) {
      (void) [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"is not supported"];
    }
    else {
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"must not be larger than "])) appendWithId:upperBound];
    }
  }
  else if (upperBound == nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"must not be smaller than "])) appendWithId:lowerBound];
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@"must be in the range ["])) appendWithId:lowerBound])) appendWithChar:','])) appendWithId:upperBound])) appendWithChar:']'];
  }
  if (explain != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@": "])) appendWithNSString:explain];
  }
  return [buf description];
}

NSString *OrgJodaTimeIllegalFieldValueException_createMessageWithNSString_withNSString_(NSString *fieldName, NSString *value) {
  OrgJodaTimeIllegalFieldValueException_initialize();
  JavaLangStringBuffer *buf = [new_JavaLangStringBuffer_init() appendWithNSString:@"Value "];
  if (value == nil) {
    (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithNSString:@"null"];
  }
  else {
    (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithChar:'"'];
    (void) [buf appendWithNSString:value];
    (void) [buf appendWithChar:'"'];
  }
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" for "])) appendWithNSString:fieldName])) appendWithChar:' '])) appendWithNSString:@"is not supported"];
  return [buf description];
}

void OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSNumber_withNSNumber_(OrgJodaTimeIllegalFieldValueException *self, OrgJodaTimeDateTimeFieldType *fieldType, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound) {
  JavaLangIllegalArgumentException_initWithNSString_(self, OrgJodaTimeIllegalFieldValueException_createMessageWithNSString_withNSNumber_withNSNumber_withNSNumber_withNSString_([((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getName], value, lowerBound, upperBound, nil));
  self->iDateTimeFieldType_ = fieldType;
  self->iDurationFieldType_ = nil;
  self->iFieldName_ = [fieldType getName];
  self->iNumberValue_ = value;
  self->iStringValue_ = nil;
  self->iLowerBound_ = lowerBound;
  self->iUpperBound_ = upperBound;
  self->iMessage_ = OrgJodaTimeIllegalFieldValueException_super$_getMessage(self, @selector(getMessage));
}

OrgJodaTimeIllegalFieldValueException *new_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSNumber_withNSNumber_(OrgJodaTimeDateTimeFieldType *fieldType, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound) {
  J2OBJC_NEW_IMPL(OrgJodaTimeIllegalFieldValueException, initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSNumber_withNSNumber_, fieldType, value, lowerBound, upperBound)
}

OrgJodaTimeIllegalFieldValueException *create_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSNumber_withNSNumber_(OrgJodaTimeDateTimeFieldType *fieldType, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeIllegalFieldValueException, initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSNumber_withNSNumber_, fieldType, value, lowerBound, upperBound)
}

void OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSString_(OrgJodaTimeIllegalFieldValueException *self, OrgJodaTimeDateTimeFieldType *fieldType, NSNumber *value, NSString *explain) {
  JavaLangIllegalArgumentException_initWithNSString_(self, OrgJodaTimeIllegalFieldValueException_createMessageWithNSString_withNSNumber_withNSNumber_withNSNumber_withNSString_([((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getName], value, nil, nil, explain));
  self->iDateTimeFieldType_ = fieldType;
  self->iDurationFieldType_ = nil;
  self->iFieldName_ = [fieldType getName];
  self->iNumberValue_ = value;
  self->iStringValue_ = nil;
  self->iLowerBound_ = nil;
  self->iUpperBound_ = nil;
  self->iMessage_ = OrgJodaTimeIllegalFieldValueException_super$_getMessage(self, @selector(getMessage));
}

OrgJodaTimeIllegalFieldValueException *new_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSString_(OrgJodaTimeDateTimeFieldType *fieldType, NSNumber *value, NSString *explain) {
  J2OBJC_NEW_IMPL(OrgJodaTimeIllegalFieldValueException, initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSString_, fieldType, value, explain)
}

OrgJodaTimeIllegalFieldValueException *create_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSString_(OrgJodaTimeDateTimeFieldType *fieldType, NSNumber *value, NSString *explain) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeIllegalFieldValueException, initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSString_, fieldType, value, explain)
}

void OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDurationFieldType_withNSNumber_withNSNumber_withNSNumber_(OrgJodaTimeIllegalFieldValueException *self, OrgJodaTimeDurationFieldType *fieldType, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound) {
  JavaLangIllegalArgumentException_initWithNSString_(self, OrgJodaTimeIllegalFieldValueException_createMessageWithNSString_withNSNumber_withNSNumber_withNSNumber_withNSString_([((OrgJodaTimeDurationFieldType *) nil_chk(fieldType)) getName], value, lowerBound, upperBound, nil));
  self->iDateTimeFieldType_ = nil;
  self->iDurationFieldType_ = fieldType;
  self->iFieldName_ = [fieldType getName];
  self->iNumberValue_ = value;
  self->iStringValue_ = nil;
  self->iLowerBound_ = lowerBound;
  self->iUpperBound_ = upperBound;
  self->iMessage_ = OrgJodaTimeIllegalFieldValueException_super$_getMessage(self, @selector(getMessage));
}

OrgJodaTimeIllegalFieldValueException *new_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDurationFieldType_withNSNumber_withNSNumber_withNSNumber_(OrgJodaTimeDurationFieldType *fieldType, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound) {
  J2OBJC_NEW_IMPL(OrgJodaTimeIllegalFieldValueException, initWithOrgJodaTimeDurationFieldType_withNSNumber_withNSNumber_withNSNumber_, fieldType, value, lowerBound, upperBound)
}

OrgJodaTimeIllegalFieldValueException *create_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDurationFieldType_withNSNumber_withNSNumber_withNSNumber_(OrgJodaTimeDurationFieldType *fieldType, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeIllegalFieldValueException, initWithOrgJodaTimeDurationFieldType_withNSNumber_withNSNumber_withNSNumber_, fieldType, value, lowerBound, upperBound)
}

void OrgJodaTimeIllegalFieldValueException_initWithNSString_withNSNumber_withNSNumber_withNSNumber_(OrgJodaTimeIllegalFieldValueException *self, NSString *fieldName, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound) {
  JavaLangIllegalArgumentException_initWithNSString_(self, OrgJodaTimeIllegalFieldValueException_createMessageWithNSString_withNSNumber_withNSNumber_withNSNumber_withNSString_(fieldName, value, lowerBound, upperBound, nil));
  self->iDateTimeFieldType_ = nil;
  self->iDurationFieldType_ = nil;
  self->iFieldName_ = fieldName;
  self->iNumberValue_ = value;
  self->iStringValue_ = nil;
  self->iLowerBound_ = lowerBound;
  self->iUpperBound_ = upperBound;
  self->iMessage_ = OrgJodaTimeIllegalFieldValueException_super$_getMessage(self, @selector(getMessage));
}

OrgJodaTimeIllegalFieldValueException *new_OrgJodaTimeIllegalFieldValueException_initWithNSString_withNSNumber_withNSNumber_withNSNumber_(NSString *fieldName, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound) {
  J2OBJC_NEW_IMPL(OrgJodaTimeIllegalFieldValueException, initWithNSString_withNSNumber_withNSNumber_withNSNumber_, fieldName, value, lowerBound, upperBound)
}

OrgJodaTimeIllegalFieldValueException *create_OrgJodaTimeIllegalFieldValueException_initWithNSString_withNSNumber_withNSNumber_withNSNumber_(NSString *fieldName, NSNumber *value, NSNumber *lowerBound, NSNumber *upperBound) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeIllegalFieldValueException, initWithNSString_withNSNumber_withNSNumber_withNSNumber_, fieldName, value, lowerBound, upperBound)
}

void OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSString_(OrgJodaTimeIllegalFieldValueException *self, OrgJodaTimeDateTimeFieldType *fieldType, NSString *value) {
  JavaLangIllegalArgumentException_initWithNSString_(self, OrgJodaTimeIllegalFieldValueException_createMessageWithNSString_withNSString_([((OrgJodaTimeDateTimeFieldType *) nil_chk(fieldType)) getName], value));
  self->iDateTimeFieldType_ = fieldType;
  self->iDurationFieldType_ = nil;
  self->iFieldName_ = [fieldType getName];
  self->iStringValue_ = value;
  self->iNumberValue_ = nil;
  self->iLowerBound_ = nil;
  self->iUpperBound_ = nil;
  self->iMessage_ = OrgJodaTimeIllegalFieldValueException_super$_getMessage(self, @selector(getMessage));
}

OrgJodaTimeIllegalFieldValueException *new_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSString_(OrgJodaTimeDateTimeFieldType *fieldType, NSString *value) {
  J2OBJC_NEW_IMPL(OrgJodaTimeIllegalFieldValueException, initWithOrgJodaTimeDateTimeFieldType_withNSString_, fieldType, value)
}

OrgJodaTimeIllegalFieldValueException *create_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSString_(OrgJodaTimeDateTimeFieldType *fieldType, NSString *value) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeIllegalFieldValueException, initWithOrgJodaTimeDateTimeFieldType_withNSString_, fieldType, value)
}

void OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDurationFieldType_withNSString_(OrgJodaTimeIllegalFieldValueException *self, OrgJodaTimeDurationFieldType *fieldType, NSString *value) {
  JavaLangIllegalArgumentException_initWithNSString_(self, OrgJodaTimeIllegalFieldValueException_createMessageWithNSString_withNSString_([((OrgJodaTimeDurationFieldType *) nil_chk(fieldType)) getName], value));
  self->iDateTimeFieldType_ = nil;
  self->iDurationFieldType_ = fieldType;
  self->iFieldName_ = [fieldType getName];
  self->iStringValue_ = value;
  self->iNumberValue_ = nil;
  self->iLowerBound_ = nil;
  self->iUpperBound_ = nil;
  self->iMessage_ = OrgJodaTimeIllegalFieldValueException_super$_getMessage(self, @selector(getMessage));
}

OrgJodaTimeIllegalFieldValueException *new_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDurationFieldType_withNSString_(OrgJodaTimeDurationFieldType *fieldType, NSString *value) {
  J2OBJC_NEW_IMPL(OrgJodaTimeIllegalFieldValueException, initWithOrgJodaTimeDurationFieldType_withNSString_, fieldType, value)
}

OrgJodaTimeIllegalFieldValueException *create_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDurationFieldType_withNSString_(OrgJodaTimeDurationFieldType *fieldType, NSString *value) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeIllegalFieldValueException, initWithOrgJodaTimeDurationFieldType_withNSString_, fieldType, value)
}

void OrgJodaTimeIllegalFieldValueException_initWithNSString_withNSString_(OrgJodaTimeIllegalFieldValueException *self, NSString *fieldName, NSString *value) {
  JavaLangIllegalArgumentException_initWithNSString_(self, OrgJodaTimeIllegalFieldValueException_createMessageWithNSString_withNSString_(fieldName, value));
  self->iDateTimeFieldType_ = nil;
  self->iDurationFieldType_ = nil;
  self->iFieldName_ = fieldName;
  self->iStringValue_ = value;
  self->iNumberValue_ = nil;
  self->iLowerBound_ = nil;
  self->iUpperBound_ = nil;
  self->iMessage_ = OrgJodaTimeIllegalFieldValueException_super$_getMessage(self, @selector(getMessage));
}

OrgJodaTimeIllegalFieldValueException *new_OrgJodaTimeIllegalFieldValueException_initWithNSString_withNSString_(NSString *fieldName, NSString *value) {
  J2OBJC_NEW_IMPL(OrgJodaTimeIllegalFieldValueException, initWithNSString_withNSString_, fieldName, value)
}

OrgJodaTimeIllegalFieldValueException *create_OrgJodaTimeIllegalFieldValueException_initWithNSString_withNSString_(NSString *fieldName, NSString *value) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeIllegalFieldValueException, initWithNSString_withNSString_, fieldName, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeIllegalFieldValueException)
