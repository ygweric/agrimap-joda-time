//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/format/DateTimeFormat.java
//

#include "Chronology.h"
#include "DateTime.h"
#include "DateTimeFormat.h"
#include "DateTimeFormatter.h"
#include "DateTimeFormatterBuilder.h"
#include "DateTimeParserBucket.h"
#include "DateTimeZone.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "InternalParser.h"
#include "InternalPrinter.h"
#include "J2ObjC_source.h"
#include "ReadablePartial.h"
#include "java/lang/Appendable.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/text/DateFormat.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Locale.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/atomic/AtomicReferenceArray.h"

@interface OrgJodaTimeFormatDateTimeFormat ()

+ (void)parsePatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder:(OrgJodaTimeFormatDateTimeFormatterBuilder *)builder
                                                       withNSString:(NSString *)pattern;

+ (NSString *)parseTokenWithNSString:(NSString *)pattern
                        withIntArray:(IOSIntArray *)indexRef;

+ (jboolean)isNumericTokenWithNSString:(NSString *)token;

+ (OrgJodaTimeFormatDateTimeFormatter *)createFormatterForPatternWithNSString:(NSString *)pattern;

+ (OrgJodaTimeFormatDateTimeFormatter *)createFormatterForStyleWithNSString:(NSString *)style;

+ (OrgJodaTimeFormatDateTimeFormatter *)createFormatterForStyleIndexWithInt:(jint)dateStyle
                                                                    withInt:(jint)timeStyle;

+ (OrgJodaTimeFormatDateTimeFormatter *)createDateTimeFormatterWithInt:(jint)dateStyle
                                                               withInt:(jint)timeStyle;

+ (jint)selectStyleWithChar:(jchar)ch;

@end

inline jint OrgJodaTimeFormatDateTimeFormat_get_PATTERN_CACHE_SIZE();
#define OrgJodaTimeFormatDateTimeFormat_PATTERN_CACHE_SIZE 500
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeFormatDateTimeFormat, PATTERN_CACHE_SIZE, jint)

inline JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeFormatDateTimeFormat_get_cPatternCache();
static JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeFormatDateTimeFormat_cPatternCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeFormatDateTimeFormat, cPatternCache, JavaUtilConcurrentConcurrentHashMap *)

inline JavaUtilConcurrentAtomicAtomicReferenceArray *OrgJodaTimeFormatDateTimeFormat_get_cStyleCache();
static JavaUtilConcurrentAtomicAtomicReferenceArray *OrgJodaTimeFormatDateTimeFormat_cStyleCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeFormatDateTimeFormat, cStyleCache, JavaUtilConcurrentAtomicAtomicReferenceArray *)

__attribute__((unused)) static void OrgJodaTimeFormatDateTimeFormat_parsePatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder_withNSString_(OrgJodaTimeFormatDateTimeFormatterBuilder *builder, NSString *pattern);

__attribute__((unused)) static NSString *OrgJodaTimeFormatDateTimeFormat_parseTokenWithNSString_withIntArray_(NSString *pattern, IOSIntArray *indexRef);

__attribute__((unused)) static jboolean OrgJodaTimeFormatDateTimeFormat_isNumericTokenWithNSString_(NSString *token);

__attribute__((unused)) static OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_createFormatterForPatternWithNSString_(NSString *pattern);

__attribute__((unused)) static OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleWithNSString_(NSString *style);

__attribute__((unused)) static OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(jint dateStyle, jint timeStyle);

__attribute__((unused)) static OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_createDateTimeFormatterWithInt_withInt_(jint dateStyle, jint timeStyle);

__attribute__((unused)) static jint OrgJodaTimeFormatDateTimeFormat_selectStyleWithChar_(jchar ch);

@interface OrgJodaTimeFormatDateTimeFormat_StyleFormatter () {
 @public
  jint iDateStyle_;
  jint iTimeStyle_;
  jint iType_;
}

- (OrgJodaTimeFormatDateTimeFormatter *)getFormatterWithJavaUtilLocale:(JavaUtilLocale *)locale;

@end

inline JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeFormatDateTimeFormat_StyleFormatter_get_cCache();
static JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeFormatDateTimeFormat_StyleFormatter_cCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeFormatDateTimeFormat_StyleFormatter, cCache, JavaUtilConcurrentConcurrentHashMap *)

__attribute__((unused)) static OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_StyleFormatter_getFormatterWithJavaUtilLocale_(OrgJodaTimeFormatDateTimeFormat_StyleFormatter *self, JavaUtilLocale *locale);

@interface OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey () {
 @public
  jint combinedTypeAndStyle_;
  JavaUtilLocale *locale_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey, locale_, JavaUtilLocale *)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeFormatDateTimeFormat)

@implementation OrgJodaTimeFormatDateTimeFormat

+ (OrgJodaTimeFormatDateTimeFormatter *)forPatternWithNSString:(NSString *)pattern {
  return OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern);
}

+ (OrgJodaTimeFormatDateTimeFormatter *)forStyleWithNSString:(NSString *)style {
  return OrgJodaTimeFormatDateTimeFormat_forStyleWithNSString_(style);
}

+ (NSString *)patternForStyleWithNSString:(NSString *)style
                       withJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgJodaTimeFormatDateTimeFormat_patternForStyleWithNSString_withJavaUtilLocale_(style, locale);
}

+ (OrgJodaTimeFormatDateTimeFormatter *)shortDate {
  return OrgJodaTimeFormatDateTimeFormat_shortDate();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)shortTime {
  return OrgJodaTimeFormatDateTimeFormat_shortTime();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)shortDateTime {
  return OrgJodaTimeFormatDateTimeFormat_shortDateTime();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)mediumDate {
  return OrgJodaTimeFormatDateTimeFormat_mediumDate();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)mediumTime {
  return OrgJodaTimeFormatDateTimeFormat_mediumTime();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)mediumDateTime {
  return OrgJodaTimeFormatDateTimeFormat_mediumDateTime();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)longDate {
  return OrgJodaTimeFormatDateTimeFormat_longDate();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)longTime {
  return OrgJodaTimeFormatDateTimeFormat_longTime();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)longDateTime {
  return OrgJodaTimeFormatDateTimeFormat_longDateTime();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)fullDate {
  return OrgJodaTimeFormatDateTimeFormat_fullDate();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)fullTime {
  return OrgJodaTimeFormatDateTimeFormat_fullTime();
}

+ (OrgJodaTimeFormatDateTimeFormatter *)fullDateTime {
  return OrgJodaTimeFormatDateTimeFormat_fullDateTime();
}

+ (void)appendPatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder:(OrgJodaTimeFormatDateTimeFormatterBuilder *)builder
                                                        withNSString:(NSString *)pattern {
  OrgJodaTimeFormatDateTimeFormat_appendPatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder_withNSString_(builder, pattern);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeFormatDateTimeFormat_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)parsePatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder:(OrgJodaTimeFormatDateTimeFormatterBuilder *)builder
                                                       withNSString:(NSString *)pattern {
  OrgJodaTimeFormatDateTimeFormat_parsePatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder_withNSString_(builder, pattern);
}

+ (NSString *)parseTokenWithNSString:(NSString *)pattern
                        withIntArray:(IOSIntArray *)indexRef {
  return OrgJodaTimeFormatDateTimeFormat_parseTokenWithNSString_withIntArray_(pattern, indexRef);
}

+ (jboolean)isNumericTokenWithNSString:(NSString *)token {
  return OrgJodaTimeFormatDateTimeFormat_isNumericTokenWithNSString_(token);
}

+ (OrgJodaTimeFormatDateTimeFormatter *)createFormatterForPatternWithNSString:(NSString *)pattern {
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForPatternWithNSString_(pattern);
}

+ (OrgJodaTimeFormatDateTimeFormatter *)createFormatterForStyleWithNSString:(NSString *)style {
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleWithNSString_(style);
}

+ (OrgJodaTimeFormatDateTimeFormatter *)createFormatterForStyleIndexWithInt:(jint)dateStyle
                                                                    withInt:(jint)timeStyle {
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(dateStyle, timeStyle);
}

+ (OrgJodaTimeFormatDateTimeFormatter *)createDateTimeFormatterWithInt:(jint)dateStyle
                                                               withInt:(jint)timeStyle {
  return OrgJodaTimeFormatDateTimeFormat_createDateTimeFormatterWithInt_withInt_(dateStyle, timeStyle);
}

+ (jint)selectStyleWithChar:(jchar)ch {
  return OrgJodaTimeFormatDateTimeFormat_selectStyleWithChar_(ch);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 5, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 7, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 10, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0xa, 11, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0xa, 12, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0xa, 13, 14, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0xa, 15, 14, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(forPatternWithNSString:);
  methods[1].selector = @selector(forStyleWithNSString:);
  methods[2].selector = @selector(patternForStyleWithNSString:withJavaUtilLocale:);
  methods[3].selector = @selector(shortDate);
  methods[4].selector = @selector(shortTime);
  methods[5].selector = @selector(shortDateTime);
  methods[6].selector = @selector(mediumDate);
  methods[7].selector = @selector(mediumTime);
  methods[8].selector = @selector(mediumDateTime);
  methods[9].selector = @selector(longDate);
  methods[10].selector = @selector(longTime);
  methods[11].selector = @selector(longDateTime);
  methods[12].selector = @selector(fullDate);
  methods[13].selector = @selector(fullTime);
  methods[14].selector = @selector(fullDateTime);
  methods[15].selector = @selector(appendPatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder:withNSString:);
  methods[16].selector = @selector(init);
  methods[17].selector = @selector(parsePatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder:withNSString:);
  methods[18].selector = @selector(parseTokenWithNSString:withIntArray:);
  methods[19].selector = @selector(isNumericTokenWithNSString:);
  methods[20].selector = @selector(createFormatterForPatternWithNSString:);
  methods[21].selector = @selector(createFormatterForStyleWithNSString:);
  methods[22].selector = @selector(createFormatterForStyleIndexWithInt:withInt:);
  methods[23].selector = @selector(createDateTimeFormatterWithInt:withInt:);
  methods[24].selector = @selector(selectStyleWithChar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FULL", "I", .constantValue.asInt = OrgJodaTimeFormatDateTimeFormat_FULL, 0x18, -1, -1, -1, -1 },
    { "LONG", "I", .constantValue.asInt = OrgJodaTimeFormatDateTimeFormat_LONG, 0x18, -1, -1, -1, -1 },
    { "MEDIUM", "I", .constantValue.asInt = OrgJodaTimeFormatDateTimeFormat_MEDIUM, 0x18, -1, -1, -1, -1 },
    { "SHORT", "I", .constantValue.asInt = OrgJodaTimeFormatDateTimeFormat_SHORT, 0x18, -1, -1, -1, -1 },
    { "NONE", "I", .constantValue.asInt = OrgJodaTimeFormatDateTimeFormat_NONE, 0x18, -1, -1, -1, -1 },
    { "DATE", "I", .constantValue.asInt = OrgJodaTimeFormatDateTimeFormat_DATE, 0x18, -1, -1, -1, -1 },
    { "TIME", "I", .constantValue.asInt = OrgJodaTimeFormatDateTimeFormat_TIME, 0x18, -1, -1, -1, -1 },
    { "DATETIME", "I", .constantValue.asInt = OrgJodaTimeFormatDateTimeFormat_DATETIME, 0x18, -1, -1, -1, -1 },
    { "PATTERN_CACHE_SIZE", "I", .constantValue.asInt = OrgJodaTimeFormatDateTimeFormat_PATTERN_CACHE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "cPatternCache", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x1a, -1, 18, 19, -1 },
    { "cStyleCache", "LJavaUtilConcurrentAtomicAtomicReferenceArray;", .constantValue.asLong = 0, 0x1a, -1, 20, 21, -1 },
  };
  static const void *ptrTable[] = { "forPattern", "LNSString;", "forStyle", "patternForStyle", "LNSString;LJavaUtilLocale;", "appendPatternTo", "LOrgJodaTimeFormatDateTimeFormatterBuilder;LNSString;", "parsePatternTo", "parseToken", "LNSString;[I", "isNumericToken", "createFormatterForPattern", "createFormatterForStyle", "createFormatterForStyleIndex", "II", "createDateTimeFormatter", "selectStyle", "C", &OrgJodaTimeFormatDateTimeFormat_cPatternCache, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Lorg/joda/time/format/DateTimeFormatter;>;", &OrgJodaTimeFormatDateTimeFormat_cStyleCache, "Ljava/util/concurrent/atomic/AtomicReferenceArray<Lorg/joda/time/format/DateTimeFormatter;>;", "LOrgJodaTimeFormatDateTimeFormat_StyleFormatter;LOrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey;" };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormat = { "DateTimeFormat", "org.joda.time.format", ptrTable, methods, fields, 7, 0x1, 25, 11, -1, 22, -1, -1, -1 };
  return &_OrgJodaTimeFormatDateTimeFormat;
}

+ (void)initialize {
  if (self == [OrgJodaTimeFormatDateTimeFormat class]) {
    OrgJodaTimeFormatDateTimeFormat_cPatternCache = new_JavaUtilConcurrentConcurrentHashMap_init();
    OrgJodaTimeFormatDateTimeFormat_cStyleCache = new_JavaUtilConcurrentAtomicAtomicReferenceArray_initWithInt_(25);
    J2OBJC_SET_INITIALIZED(OrgJodaTimeFormatDateTimeFormat)
  }
}

@end

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(NSString *pattern) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForPatternWithNSString_(pattern);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_forStyleWithNSString_(NSString *style) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleWithNSString_(style);
}

NSString *OrgJodaTimeFormatDateTimeFormat_patternForStyleWithNSString_withJavaUtilLocale_(NSString *style, JavaUtilLocale *locale) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  OrgJodaTimeFormatDateTimeFormatter *formatter = OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleWithNSString_(style);
  if (locale == nil) {
    locale = JavaUtilLocale_getDefault();
  }
  return [((OrgJodaTimeFormatDateTimeFormat_StyleFormatter *) nil_chk(((OrgJodaTimeFormatDateTimeFormat_StyleFormatter *) cast_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(formatter)) getPrinter0], [OrgJodaTimeFormatDateTimeFormat_StyleFormatter class])))) getPatternWithJavaUtilLocale:locale];
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_shortDate() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_SHORT, OrgJodaTimeFormatDateTimeFormat_NONE);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_shortTime() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_NONE, OrgJodaTimeFormatDateTimeFormat_SHORT);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_shortDateTime() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_SHORT, OrgJodaTimeFormatDateTimeFormat_SHORT);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_mediumDate() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_MEDIUM, OrgJodaTimeFormatDateTimeFormat_NONE);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_mediumTime() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_NONE, OrgJodaTimeFormatDateTimeFormat_MEDIUM);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_mediumDateTime() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_MEDIUM, OrgJodaTimeFormatDateTimeFormat_MEDIUM);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_longDate() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_LONG, OrgJodaTimeFormatDateTimeFormat_NONE);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_longTime() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_NONE, OrgJodaTimeFormatDateTimeFormat_LONG);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_longDateTime() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_LONG, OrgJodaTimeFormatDateTimeFormat_LONG);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_fullDate() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_FULL, OrgJodaTimeFormatDateTimeFormat_NONE);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_fullTime() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_NONE, OrgJodaTimeFormatDateTimeFormat_FULL);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_fullDateTime() {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(OrgJodaTimeFormatDateTimeFormat_FULL, OrgJodaTimeFormatDateTimeFormat_FULL);
}

void OrgJodaTimeFormatDateTimeFormat_appendPatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder_withNSString_(OrgJodaTimeFormatDateTimeFormatterBuilder *builder, NSString *pattern) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  OrgJodaTimeFormatDateTimeFormat_parsePatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder_withNSString_(builder, pattern);
}

void OrgJodaTimeFormatDateTimeFormat_init(OrgJodaTimeFormatDateTimeFormat *self) {
  NSObject_init(self);
}

OrgJodaTimeFormatDateTimeFormat *new_OrgJodaTimeFormatDateTimeFormat_init() {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormat, init)
}

OrgJodaTimeFormatDateTimeFormat *create_OrgJodaTimeFormatDateTimeFormat_init() {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFormatDateTimeFormat, init)
}

void OrgJodaTimeFormatDateTimeFormat_parsePatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder_withNSString_(OrgJodaTimeFormatDateTimeFormatterBuilder *builder, NSString *pattern) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  jint length = ((jint) [((NSString *) nil_chk(pattern)) length]);
  IOSIntArray *indexRef = [IOSIntArray newArrayWithLength:1];
  for (jint i = 0; i < length; i++) {
    *IOSIntArray_GetRef(indexRef, 0) = i;
    NSString *token = OrgJodaTimeFormatDateTimeFormat_parseTokenWithNSString_withIntArray_(pattern, indexRef);
    i = IOSIntArray_Get(indexRef, 0);
    jint tokenLen = ((jint) [((NSString *) nil_chk(token)) length]);
    if (tokenLen == 0) {
      break;
    }
    jchar c = [token charAtWithInt:0];
    {
      NSString *sub;
      switch (c) {
        case 'G':
        (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendEraText];
        break;
        case 'C':
        (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendCenturyOfEraWithInt:tokenLen withInt:tokenLen];
        break;
        case 'x':
        case 'y':
        case 'Y':
        if (tokenLen == 2) {
          jboolean lenientParse = true;
          if (i + 1 < length) {
            (*IOSIntArray_GetRef(indexRef, 0))++;
            if (OrgJodaTimeFormatDateTimeFormat_isNumericTokenWithNSString_(OrgJodaTimeFormatDateTimeFormat_parseTokenWithNSString_withIntArray_(pattern, indexRef))) {
              lenientParse = false;
            }
            (*IOSIntArray_GetRef(indexRef, 0))--;
          }
          switch (c) {
            case 'x':
            (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendTwoDigitWeekyearWithInt:[new_OrgJodaTimeDateTime_init() getWeekyear] - 30 withBoolean:lenientParse];
            break;
            case 'y':
            case 'Y':
            default:
            (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendTwoDigitYearWithInt:[new_OrgJodaTimeDateTime_init() getYear] - 30 withBoolean:lenientParse];
            break;
          }
        }
        else {
          jint maxDigits = 9;
          if (i + 1 < length) {
            (*IOSIntArray_GetRef(indexRef, 0))++;
            if (OrgJodaTimeFormatDateTimeFormat_isNumericTokenWithNSString_(OrgJodaTimeFormatDateTimeFormat_parseTokenWithNSString_withIntArray_(pattern, indexRef))) {
              maxDigits = tokenLen;
            }
            (*IOSIntArray_GetRef(indexRef, 0))--;
          }
          switch (c) {
            case 'x':
            (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendWeekyearWithInt:tokenLen withInt:maxDigits];
            break;
            case 'y':
            (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendYearWithInt:tokenLen withInt:maxDigits];
            break;
            case 'Y':
            (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendYearOfEraWithInt:tokenLen withInt:maxDigits];
            break;
          }
        }
        break;
        case 'M':
        if (tokenLen >= 3) {
          if (tokenLen >= 4) {
            (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendMonthOfYearText];
          }
          else {
            (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendMonthOfYearShortText];
          }
        }
        else {
          (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendMonthOfYearWithInt:tokenLen];
        }
        break;
        case 'd':
        (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendDayOfMonthWithInt:tokenLen];
        break;
        case 'a':
        (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendHalfdayOfDayText];
        break;
        case 'h':
        (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendClockhourOfHalfdayWithInt:tokenLen];
        break;
        case 'H':
        (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendHourOfDayWithInt:tokenLen];
        break;
        case 'k':
        (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendClockhourOfDayWithInt:tokenLen];
        break;
        case 'K':
        (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendHourOfHalfdayWithInt:tokenLen];
        break;
        case 'm':
        (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendMinuteOfHourWithInt:tokenLen];
        break;
        case 's':
        (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendSecondOfMinuteWithInt:tokenLen];
        break;
        case 'S':
        (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendFractionOfSecondWithInt:tokenLen withInt:tokenLen];
        break;
        case 'e':
        (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendDayOfWeekWithInt:tokenLen];
        break;
        case 'E':
        if (tokenLen >= 4) {
          (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendDayOfWeekText];
        }
        else {
          (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendDayOfWeekShortText];
        }
        break;
        case 'D':
        (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendDayOfYearWithInt:tokenLen];
        break;
        case 'w':
        (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendWeekOfWeekyearWithInt:tokenLen];
        break;
        case 'z':
        if (tokenLen >= 4) {
          (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendTimeZoneName];
        }
        else {
          (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendTimeZoneShortNameWithJavaUtilMap:nil];
        }
        break;
        case 'Z':
        if (tokenLen == 1) {
          (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendTimeZoneOffsetWithNSString:nil withNSString:@"Z" withBoolean:false withInt:2 withInt:2];
        }
        else if (tokenLen == 2) {
          (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendTimeZoneOffsetWithNSString:nil withNSString:@"Z" withBoolean:true withInt:2 withInt:2];
        }
        else {
          (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendTimeZoneId];
        }
        break;
        case '\'':
        sub = [token substring:1];
        if (((jint) [((NSString *) nil_chk(sub)) length]) == 1) {
          (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendLiteralWithChar:[sub charAtWithInt:0]];
        }
        else {
          (void) [((OrgJodaTimeFormatDateTimeFormatterBuilder *) nil_chk(builder)) appendLiteralWithNSString:[NSString stringWithString:sub]];
        }
        break;
        default:
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Illegal pattern component: ", token));
      }
    }
  }
}

NSString *OrgJodaTimeFormatDateTimeFormat_parseTokenWithNSString_withIntArray_(NSString *pattern, IOSIntArray *indexRef) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_init();
  jint i = IOSIntArray_Get(nil_chk(indexRef), 0);
  jint length = ((jint) [((NSString *) nil_chk(pattern)) length]);
  jchar c = [pattern charAtWithInt:i];
  if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {
    (void) [buf appendWithChar:c];
    while (i + 1 < length) {
      jchar peek = [pattern charAtWithInt:i + 1];
      if (peek == c) {
        (void) [buf appendWithChar:c];
        i++;
      }
      else {
        break;
      }
    }
  }
  else {
    (void) [buf appendWithChar:'\''];
    jboolean inLiteral = false;
    for (; i < length; i++) {
      c = [pattern charAtWithInt:i];
      if (c == '\'') {
        if (i + 1 < length && [pattern charAtWithInt:i + 1] == '\'') {
          i++;
          (void) [buf appendWithChar:c];
        }
        else {
          inLiteral = !inLiteral;
        }
      }
      else if (!inLiteral && ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))) {
        i--;
        break;
      }
      else {
        (void) [buf appendWithChar:c];
      }
    }
  }
  *IOSIntArray_GetRef(indexRef, 0) = i;
  return [buf description];
}

jboolean OrgJodaTimeFormatDateTimeFormat_isNumericTokenWithNSString_(NSString *token) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  jint tokenLen = ((jint) [((NSString *) nil_chk(token)) length]);
  if (tokenLen > 0) {
    jchar c = [token charAtWithInt:0];
    switch (c) {
      case 'c':
      case 'C':
      case 'x':
      case 'y':
      case 'Y':
      case 'd':
      case 'h':
      case 'H':
      case 'm':
      case 's':
      case 'S':
      case 'e':
      case 'D':
      case 'F':
      case 'w':
      case 'W':
      case 'k':
      case 'K':
      return true;
      case 'M':
      if (tokenLen <= 2) {
        return true;
      }
    }
  }
  return false;
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_createFormatterForPatternWithNSString_(NSString *pattern) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  if (pattern == nil || ((jint) [pattern length]) == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid pattern specification");
  }
  OrgJodaTimeFormatDateTimeFormatter *formatter = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(OrgJodaTimeFormatDateTimeFormat_cPatternCache)) getWithId:pattern];
  if (formatter == nil) {
    OrgJodaTimeFormatDateTimeFormatterBuilder *builder = new_OrgJodaTimeFormatDateTimeFormatterBuilder_init();
    OrgJodaTimeFormatDateTimeFormat_parsePatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder_withNSString_(builder, pattern);
    formatter = [builder toFormatter];
    if ([OrgJodaTimeFormatDateTimeFormat_cPatternCache size] < OrgJodaTimeFormatDateTimeFormat_PATTERN_CACHE_SIZE) {
      OrgJodaTimeFormatDateTimeFormatter *oldFormatter = [OrgJodaTimeFormatDateTimeFormat_cPatternCache putIfAbsentWithId:pattern withId:formatter];
      if (oldFormatter != nil) {
        formatter = oldFormatter;
      }
    }
  }
  return formatter;
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleWithNSString_(NSString *style) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  if (style == nil || ((jint) [style length]) != 2) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid style specification: ", style));
  }
  jint dateStyle = OrgJodaTimeFormatDateTimeFormat_selectStyleWithChar_([style charAtWithInt:0]);
  jint timeStyle = OrgJodaTimeFormatDateTimeFormat_selectStyleWithChar_([style charAtWithInt:1]);
  if (dateStyle == OrgJodaTimeFormatDateTimeFormat_NONE && timeStyle == OrgJodaTimeFormatDateTimeFormat_NONE) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Style '--' is invalid");
  }
  return OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(dateStyle, timeStyle);
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_createFormatterForStyleIndexWithInt_withInt_(jint dateStyle, jint timeStyle) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  jint index = ((JreLShift32(dateStyle, 2)) + dateStyle) + timeStyle;
  if (index >= [((JavaUtilConcurrentAtomicAtomicReferenceArray *) nil_chk(OrgJodaTimeFormatDateTimeFormat_cStyleCache)) length]) {
    return OrgJodaTimeFormatDateTimeFormat_createDateTimeFormatterWithInt_withInt_(dateStyle, timeStyle);
  }
  OrgJodaTimeFormatDateTimeFormatter *f = [OrgJodaTimeFormatDateTimeFormat_cStyleCache getWithInt:index];
  if (f == nil) {
    f = OrgJodaTimeFormatDateTimeFormat_createDateTimeFormatterWithInt_withInt_(dateStyle, timeStyle);
    if ([OrgJodaTimeFormatDateTimeFormat_cStyleCache compareAndSetWithInt:index withId:nil withId:f] == false) {
      f = [OrgJodaTimeFormatDateTimeFormat_cStyleCache getWithInt:index];
    }
  }
  return f;
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_createDateTimeFormatterWithInt_withInt_(jint dateStyle, jint timeStyle) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  jint type = OrgJodaTimeFormatDateTimeFormat_DATETIME;
  if (dateStyle == OrgJodaTimeFormatDateTimeFormat_NONE) {
    type = OrgJodaTimeFormatDateTimeFormat_TIME;
  }
  else if (timeStyle == OrgJodaTimeFormatDateTimeFormat_NONE) {
    type = OrgJodaTimeFormatDateTimeFormat_DATE;
  }
  OrgJodaTimeFormatDateTimeFormat_StyleFormatter *llf = new_OrgJodaTimeFormatDateTimeFormat_StyleFormatter_initWithInt_withInt_withInt_(dateStyle, timeStyle, type);
  return new_OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(llf, llf);
}

jint OrgJodaTimeFormatDateTimeFormat_selectStyleWithChar_(jchar ch) {
  OrgJodaTimeFormatDateTimeFormat_initialize();
  switch (ch) {
    case 'S':
    return OrgJodaTimeFormatDateTimeFormat_SHORT;
    case 'M':
    return OrgJodaTimeFormatDateTimeFormat_MEDIUM;
    case 'L':
    return OrgJodaTimeFormatDateTimeFormat_LONG;
    case 'F':
    return OrgJodaTimeFormatDateTimeFormat_FULL;
    case '-':
    return OrgJodaTimeFormatDateTimeFormat_NONE;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$C", @"Invalid style character: ", ch));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormat)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeFormatDateTimeFormat_StyleFormatter)

@implementation OrgJodaTimeFormatDateTimeFormat_StyleFormatter

- (instancetype)initWithInt:(jint)dateStyle
                    withInt:(jint)timeStyle
                    withInt:(jint)type {
  OrgJodaTimeFormatDateTimeFormat_StyleFormatter_initWithInt_withInt_withInt_(self, dateStyle, timeStyle, type);
  return self;
}

- (jint)estimatePrintedLength {
  return 40;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appenadble
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(jint)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  id<OrgJodaTimeFormatInternalPrinter> p = [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_StyleFormatter_getFormatterWithJavaUtilLocale_(self, locale))) getPrinter0];
  [((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(p)) printToWithJavaLangAppendable:appenadble withLong:instant withOrgJodaTimeChronology:chrono withInt:displayOffset withOrgJodaTimeDateTimeZone:displayZone withJavaUtilLocale:locale];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  id<OrgJodaTimeFormatInternalPrinter> p = [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_StyleFormatter_getFormatterWithJavaUtilLocale_(self, locale))) getPrinter0];
  [((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(p)) printToWithJavaLangAppendable:appendable withOrgJodaTimeReadablePartial:partial withJavaUtilLocale:locale];
}

- (jint)estimateParsedLength {
  return 40;
}

- (jint)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                   withInt:(jint)position {
  id<OrgJodaTimeFormatInternalParser> p = [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_StyleFormatter_getFormatterWithJavaUtilLocale_(self, [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) getLocale]))) getParser0];
  return [((id<OrgJodaTimeFormatInternalParser>) nil_chk(p)) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:position];
}

- (OrgJodaTimeFormatDateTimeFormatter *)getFormatterWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgJodaTimeFormatDateTimeFormat_StyleFormatter_getFormatterWithJavaUtilLocale_(self, locale);
}

- (NSString *)getPatternWithJavaUtilLocale:(JavaUtilLocale *)locale {
  JavaTextDateFormat *f = nil;
  switch (iType_) {
    case OrgJodaTimeFormatDateTimeFormat_DATE:
    f = JavaTextDateFormat_getDateInstanceWithInt_withJavaUtilLocale_(iDateStyle_, locale);
    break;
    case OrgJodaTimeFormatDateTimeFormat_TIME:
    f = JavaTextDateFormat_getTimeInstanceWithInt_withJavaUtilLocale_(iTimeStyle_, locale);
    break;
    case OrgJodaTimeFormatDateTimeFormat_DATETIME:
    f = JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_withJavaUtilLocale_(iDateStyle_, iTimeStyle_, locale);
    break;
  }
  if ([f isKindOfClass:[JavaTextSimpleDateFormat class]] == false) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"No datetime pattern for locale: ", locale));
  }
  return [((JavaTextSimpleDateFormat *) nil_chk(((JavaTextSimpleDateFormat *) cast_chk(f, [JavaTextSimpleDateFormat class])))) toPattern];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 9, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:withInt:);
  methods[1].selector = @selector(estimatePrintedLength);
  methods[2].selector = @selector(printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:);
  methods[3].selector = @selector(printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:);
  methods[4].selector = @selector(estimateParsedLength);
  methods[5].selector = @selector(parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:);
  methods[6].selector = @selector(getFormatterWithJavaUtilLocale:);
  methods[7].selector = @selector(getPatternWithJavaUtilLocale:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cCache", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x1a, -1, 10, 11, -1 },
    { "iDateStyle_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iTimeStyle_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iType_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "III", "printTo", "LJavaLangAppendable;JLOrgJodaTimeChronology;ILOrgJodaTimeDateTimeZone;LJavaUtilLocale;", "LJavaIoIOException;", "LJavaLangAppendable;LOrgJodaTimeReadablePartial;LJavaUtilLocale;", "parseInto", "LOrgJodaTimeFormatDateTimeParserBucket;LJavaLangCharSequence;I", "getFormatter", "LJavaUtilLocale;", "getPattern", &OrgJodaTimeFormatDateTimeFormat_StyleFormatter_cCache, "Ljava/util/concurrent/ConcurrentHashMap<Lorg/joda/time/format/DateTimeFormat$StyleFormatterCacheKey;Lorg/joda/time/format/DateTimeFormatter;>;", "LOrgJodaTimeFormatDateTimeFormat;" };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormat_StyleFormatter = { "StyleFormatter", "org.joda.time.format", ptrTable, methods, fields, 7, 0x8, 8, 4, 12, -1, -1, -1, -1 };
  return &_OrgJodaTimeFormatDateTimeFormat_StyleFormatter;
}

+ (void)initialize {
  if (self == [OrgJodaTimeFormatDateTimeFormat_StyleFormatter class]) {
    OrgJodaTimeFormatDateTimeFormat_StyleFormatter_cCache = new_JavaUtilConcurrentConcurrentHashMap_init();
    J2OBJC_SET_INITIALIZED(OrgJodaTimeFormatDateTimeFormat_StyleFormatter)
  }
}

@end

void OrgJodaTimeFormatDateTimeFormat_StyleFormatter_initWithInt_withInt_withInt_(OrgJodaTimeFormatDateTimeFormat_StyleFormatter *self, jint dateStyle, jint timeStyle, jint type) {
  NSObject_init(self);
  self->iDateStyle_ = dateStyle;
  self->iTimeStyle_ = timeStyle;
  self->iType_ = type;
}

OrgJodaTimeFormatDateTimeFormat_StyleFormatter *new_OrgJodaTimeFormatDateTimeFormat_StyleFormatter_initWithInt_withInt_withInt_(jint dateStyle, jint timeStyle, jint type) {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormat_StyleFormatter, initWithInt_withInt_withInt_, dateStyle, timeStyle, type)
}

OrgJodaTimeFormatDateTimeFormat_StyleFormatter *create_OrgJodaTimeFormatDateTimeFormat_StyleFormatter_initWithInt_withInt_withInt_(jint dateStyle, jint timeStyle, jint type) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFormatDateTimeFormat_StyleFormatter, initWithInt_withInt_withInt_, dateStyle, timeStyle, type)
}

OrgJodaTimeFormatDateTimeFormatter *OrgJodaTimeFormatDateTimeFormat_StyleFormatter_getFormatterWithJavaUtilLocale_(OrgJodaTimeFormatDateTimeFormat_StyleFormatter *self, JavaUtilLocale *locale) {
  locale = (locale == nil ? JavaUtilLocale_getDefault() : locale);
  OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey *key = new_OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey_initWithInt_withInt_withInt_withJavaUtilLocale_(self->iType_, self->iDateStyle_, self->iTimeStyle_, locale);
  OrgJodaTimeFormatDateTimeFormatter *f = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(OrgJodaTimeFormatDateTimeFormat_StyleFormatter_cCache)) getWithId:key];
  if (f == nil) {
    f = OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_([self getPatternWithJavaUtilLocale:locale]);
    OrgJodaTimeFormatDateTimeFormatter *oldFormatter = [OrgJodaTimeFormatDateTimeFormat_StyleFormatter_cCache putIfAbsentWithId:key withId:f];
    if (oldFormatter != nil) {
      f = oldFormatter;
    }
  }
  return f;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormat_StyleFormatter)

@implementation OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey

- (instancetype)initWithInt:(jint)iType
                    withInt:(jint)iDateStyle
                    withInt:(jint)iTimeStyle
         withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey_initWithInt_withInt_withInt_withJavaUtilLocale_(self, iType, iDateStyle, iTimeStyle, locale);
  return self;
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + combinedTypeAndStyle_;
  result = prime * result + ((locale_ == nil) ? 0 : ((jint) [((JavaUtilLocale *) nil_chk(locale_)) hash]));
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (obj == nil) {
    return false;
  }
  if (!([obj isKindOfClass:[OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey class]])) {
    return false;
  }
  OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey *other = (OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey *) cast_chk(obj, [OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey class]);
  if (combinedTypeAndStyle_ != other->combinedTypeAndStyle_) {
    return false;
  }
  if (locale_ == nil) {
    if (other->locale_ != nil) {
      return false;
    }
  }
  else if (![locale_ isEqual:other->locale_]) {
    return false;
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:withInt:withJavaUtilLocale:);
  methods[1].selector = @selector(hash);
  methods[2].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "combinedTypeAndStyle_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "locale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIILJavaUtilLocale;", "hashCode", "equals", "LNSObject;", "LOrgJodaTimeFormatDateTimeFormat;" };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey = { "StyleFormatterCacheKey", "org.joda.time.format", ptrTable, methods, fields, 7, 0x8, 3, 2, 4, -1, -1, -1, -1 };
  return &_OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey;
}

@end

void OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey_initWithInt_withInt_withInt_withJavaUtilLocale_(OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey *self, jint iType, jint iDateStyle, jint iTimeStyle, JavaUtilLocale *locale) {
  NSObject_init(self);
  self->locale_ = locale;
  self->combinedTypeAndStyle_ = iType + (JreLShift32(iDateStyle, 4)) + (JreLShift32(iTimeStyle, 8));
}

OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey *new_OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey_initWithInt_withInt_withInt_withJavaUtilLocale_(jint iType, jint iDateStyle, jint iTimeStyle, JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey, initWithInt_withInt_withInt_withJavaUtilLocale_, iType, iDateStyle, iTimeStyle, locale)
}

OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey *create_OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey_initWithInt_withInt_withInt_withJavaUtilLocale_(jint iType, jint iDateStyle, jint iTimeStyle, JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey, initWithInt_withInt_withInt_withJavaUtilLocale_, iType, iDateStyle, iTimeStyle, locale)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormat_StyleFormatterCacheKey)
