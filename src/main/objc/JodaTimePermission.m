//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/JodaTimePermission.java
//

#include "J2ObjC_source.h"
#include "JodaTimePermission.h"
#include "java/security/BasicPermission.h"

inline jlong OrgJodaTimeJodaTimePermission_get_serialVersionUID();
#define OrgJodaTimeJodaTimePermission_serialVersionUID 1408944367355875472LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeJodaTimePermission, serialVersionUID, jlong)

@implementation OrgJodaTimeJodaTimePermission

- (instancetype)initWithNSString:(NSString *)name {
  OrgJodaTimeJodaTimePermission_initWithNSString_(self, name);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeJodaTimePermission_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;" };
  static const J2ObjcClassInfo _OrgJodaTimeJodaTimePermission = { "JodaTimePermission", "org.joda.time", ptrTable, methods, fields, 7, 0x1, 1, 1, -1, -1, -1, -1, -1 };
  return &_OrgJodaTimeJodaTimePermission;
}

@end

void OrgJodaTimeJodaTimePermission_initWithNSString_(OrgJodaTimeJodaTimePermission *self, NSString *name) {
  JavaSecurityBasicPermission_initWithNSString_(self, name);
}

OrgJodaTimeJodaTimePermission *new_OrgJodaTimeJodaTimePermission_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(OrgJodaTimeJodaTimePermission, initWithNSString_, name)
}

OrgJodaTimeJodaTimePermission *create_OrgJodaTimeJodaTimePermission_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeJodaTimePermission, initWithNSString_, name)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeJodaTimePermission)
