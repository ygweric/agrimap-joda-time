//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/TimeOfDay.java
//

#include "AbstractPartialFieldProperty.h"
#include "BasePartial.h"
#include "Chronology.h"
#include "DateTime.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormatter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "ISOChronology.h"
#include "ISODateTimeFormat.h"
#include "J2ObjC_source.h"
#include "LocalTime.h"
#include "ReadablePartial.h"
#include "ReadablePeriod.h"
#include "TimeOfDay.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"

inline jlong OrgJodaTimeTimeOfDay_get_serialVersionUID();
#define OrgJodaTimeTimeOfDay_serialVersionUID 3633353405803318660LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeTimeOfDay, serialVersionUID, jlong)

inline IOSObjectArray *OrgJodaTimeTimeOfDay_get_FIELD_TYPES();
static IOSObjectArray *OrgJodaTimeTimeOfDay_FIELD_TYPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeTimeOfDay, FIELD_TYPES, IOSObjectArray *)

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeTimeOfDay__Annotations$0();

@interface OrgJodaTimeTimeOfDay_Property () {
 @public
  OrgJodaTimeTimeOfDay *iTimeOfDay_;
  jint iFieldIndex_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeTimeOfDay_Property, iTimeOfDay_, OrgJodaTimeTimeOfDay *)

inline jlong OrgJodaTimeTimeOfDay_Property_get_serialVersionUID();
#define OrgJodaTimeTimeOfDay_Property_serialVersionUID 5598459141741063833LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeTimeOfDay_Property, serialVersionUID, jlong)

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeTimeOfDay_Property__Annotations$0();

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeTimeOfDay)

OrgJodaTimeTimeOfDay *OrgJodaTimeTimeOfDay_MIDNIGHT;

@implementation OrgJodaTimeTimeOfDay

+ (OrgJodaTimeTimeOfDay *)fromCalendarFieldsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  return OrgJodaTimeTimeOfDay_fromCalendarFieldsWithJavaUtilCalendar_(calendar);
}

+ (OrgJodaTimeTimeOfDay *)fromDateFieldsWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgJodaTimeTimeOfDay_fromDateFieldsWithJavaUtilDate_(date);
}

+ (OrgJodaTimeTimeOfDay *)fromMillisOfDayWithLong:(jlong)millisOfDay {
  return OrgJodaTimeTimeOfDay_fromMillisOfDayWithLong_(millisOfDay);
}

+ (OrgJodaTimeTimeOfDay *)fromMillisOfDayWithLong:(jlong)millisOfDay
                        withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return OrgJodaTimeTimeOfDay_fromMillisOfDayWithLong_withOrgJodaTimeChronology_(millisOfDay, chrono);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeTimeOfDay_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeTimeOfDay_initWithOrgJodaTimeDateTimeZone_(self, zone);
  return self;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeTimeOfDay_initWithOrgJodaTimeChronology_(self, chronology);
  return self;
}

- (instancetype)initWithLong:(jlong)instant {
  OrgJodaTimeTimeOfDay_initWithLong_(self, instant);
  return self;
}

- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeTimeOfDay_initWithLong_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

- (instancetype)initWithId:(id)instant {
  OrgJodaTimeTimeOfDay_initWithId_(self, instant);
  return self;
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeTimeOfDay_initWithId_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour {
  OrgJodaTimeTimeOfDay_initWithInt_withInt_(self, hourOfDay, minuteOfHour);
  return self;
}

- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeTimeOfDay_initWithInt_withInt_withOrgJodaTimeChronology_(self, hourOfDay, minuteOfHour, chronology);
  return self;
}

- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute {
  OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_(self, hourOfDay, minuteOfHour, secondOfMinute);
  return self;
}

- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(self, hourOfDay, minuteOfHour, secondOfMinute, chronology);
  return self;
}

- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond {
  OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_(self, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
  return self;
}

- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology);
  return self;
}

- (instancetype)initWithOrgJodaTimeTimeOfDay:(OrgJodaTimeTimeOfDay *)partial
                                withIntArray:(IOSIntArray *)values {
  OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withIntArray_(self, partial, values);
  return self;
}

- (instancetype)initWithOrgJodaTimeTimeOfDay:(OrgJodaTimeTimeOfDay *)partial
                   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withOrgJodaTimeChronology_(self, partial, chrono);
  return self;
}

- (jint)size {
  return 4;
}

- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  switch (index) {
    case OrgJodaTimeTimeOfDay_HOUR_OF_DAY:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) hourOfDay];
    case OrgJodaTimeTimeOfDay_MINUTE_OF_HOUR:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) minuteOfHour];
    case OrgJodaTimeTimeOfDay_SECOND_OF_MINUTE:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) secondOfMinute];
    case OrgJodaTimeTimeOfDay_MILLIS_OF_SECOND:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) millisOfSecond];
    default:
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I", @"Invalid index: ", index));
  }
}

- (OrgJodaTimeDateTimeFieldType *)getFieldTypeWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(OrgJodaTimeTimeOfDay_FIELD_TYPES), index);
}

- (IOSObjectArray *)getFieldTypes {
  return [((IOSObjectArray *) nil_chk(OrgJodaTimeTimeOfDay_FIELD_TYPES)) clone];
}

- (OrgJodaTimeTimeOfDay *)withChronologyRetainFieldsWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)newChronology {
  newChronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(newChronology);
  newChronology = [((OrgJodaTimeChronology *) nil_chk(newChronology)) withUTC];
  if (newChronology == [self getChronology]) {
    return self;
  }
  else {
    OrgJodaTimeTimeOfDay *newTimeOfDay = new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withOrgJodaTimeChronology_(self, newChronology);
    [((OrgJodaTimeChronology *) nil_chk(newChronology)) validateWithOrgJodaTimeReadablePartial:newTimeOfDay withIntArray:[self getValues]];
    return newTimeOfDay;
  }
}

- (OrgJodaTimeTimeOfDay *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                            withInt:(jint)value {
  jint index = [self indexOfSupportedWithOrgJodaTimeDateTimeFieldType:fieldType];
  if (value == [self getValueWithInt:index]) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) setWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:value];
  return new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withIntArray_(self, newValues);
}

- (OrgJodaTimeTimeOfDay *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                 withInt:(jint)amount {
  jint index = [self indexOfSupportedWithOrgJodaTimeDurationFieldType:fieldType];
  if (amount == 0) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) addWrapPartialWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:amount];
  return new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withIntArray_(self, newValues);
}

- (OrgJodaTimeTimeOfDay *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                               withInt:(jint)scalar {
  if (period == nil || scalar == 0) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  for (jint i = 0; i < [period size]; i++) {
    OrgJodaTimeDurationFieldType *fieldType = [period getFieldTypeWithInt:i];
    jint index = [self indexOfWithOrgJodaTimeDurationFieldType:fieldType];
    if (index >= 0) {
      newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) addWrapPartialWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:OrgJodaTimeFieldFieldUtils_safeMultiplyWithInt_withInt_([period getValueWithInt:i], scalar)];
    }
  }
  return new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withIntArray_(self, newValues);
}

- (OrgJodaTimeTimeOfDay *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:1];
}

- (OrgJodaTimeTimeOfDay *)plusHoursWithInt:(jint)hours {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_hours() withInt:hours];
}

- (OrgJodaTimeTimeOfDay *)plusMinutesWithInt:(jint)minutes {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_minutes() withInt:minutes];
}

- (OrgJodaTimeTimeOfDay *)plusSecondsWithInt:(jint)seconds {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_seconds() withInt:seconds];
}

- (OrgJodaTimeTimeOfDay *)plusMillisWithInt:(jint)millis {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_millis() withInt:millis];
}

- (OrgJodaTimeTimeOfDay *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:-1];
}

- (OrgJodaTimeTimeOfDay *)minusHoursWithInt:(jint)hours {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_hours() withInt:OrgJodaTimeFieldFieldUtils_safeNegateWithInt_(hours)];
}

- (OrgJodaTimeTimeOfDay *)minusMinutesWithInt:(jint)minutes {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_minutes() withInt:OrgJodaTimeFieldFieldUtils_safeNegateWithInt_(minutes)];
}

- (OrgJodaTimeTimeOfDay *)minusSecondsWithInt:(jint)seconds {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_seconds() withInt:OrgJodaTimeFieldFieldUtils_safeNegateWithInt_(seconds)];
}

- (OrgJodaTimeTimeOfDay *)minusMillisWithInt:(jint)millis {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_millis() withInt:OrgJodaTimeFieldFieldUtils_safeNegateWithInt_(millis)];
}

- (OrgJodaTimeTimeOfDay_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  return new_OrgJodaTimeTimeOfDay_Property_initWithOrgJodaTimeTimeOfDay_withInt_(self, [self indexOfSupportedWithOrgJodaTimeDateTimeFieldType:type]);
}

- (OrgJodaTimeLocalTime *)toLocalTime {
  return new_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_([self getHourOfDay], [self getMinuteOfHour], [self getSecondOfMinute], [self getMillisOfSecond], [self getChronology]);
}

- (OrgJodaTimeDateTime *)toDateTimeToday {
  return [self toDateTimeTodayWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeTodayWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  jlong instantMillis = OrgJodaTimeDateTimeUtils_currentTimeMillis();
  jlong resolved = [((OrgJodaTimeChronology *) nil_chk(chrono)) setWithOrgJodaTimeReadablePartial:self withLong:instantMillis];
  return new_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(resolved, chrono);
}

- (jint)getHourOfDay {
  return [self getValueWithInt:OrgJodaTimeTimeOfDay_HOUR_OF_DAY];
}

- (jint)getMinuteOfHour {
  return [self getValueWithInt:OrgJodaTimeTimeOfDay_MINUTE_OF_HOUR];
}

- (jint)getSecondOfMinute {
  return [self getValueWithInt:OrgJodaTimeTimeOfDay_SECOND_OF_MINUTE];
}

- (jint)getMillisOfSecond {
  return [self getValueWithInt:OrgJodaTimeTimeOfDay_MILLIS_OF_SECOND];
}

- (OrgJodaTimeTimeOfDay *)withHourOfDayWithInt:(jint)hour {
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay])) setWithOrgJodaTimeReadablePartial:self withInt:OrgJodaTimeTimeOfDay_HOUR_OF_DAY withIntArray:newValues withInt:hour];
  return new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withIntArray_(self, newValues);
}

- (OrgJodaTimeTimeOfDay *)withMinuteOfHourWithInt:(jint)minute {
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour])) setWithOrgJodaTimeReadablePartial:self withInt:OrgJodaTimeTimeOfDay_MINUTE_OF_HOUR withIntArray:newValues withInt:minute];
  return new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withIntArray_(self, newValues);
}

- (OrgJodaTimeTimeOfDay *)withSecondOfMinuteWithInt:(jint)second {
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute])) setWithOrgJodaTimeReadablePartial:self withInt:OrgJodaTimeTimeOfDay_SECOND_OF_MINUTE withIntArray:newValues withInt:second];
  return new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withIntArray_(self, newValues);
}

- (OrgJodaTimeTimeOfDay *)withMillisOfSecondWithInt:(jint)millis {
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond])) setWithOrgJodaTimeReadablePartial:self withInt:OrgJodaTimeTimeOfDay_MILLIS_OF_SECOND withIntArray:newValues withInt:millis];
  return new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withIntArray_(self, newValues);
}

- (OrgJodaTimeTimeOfDay_Property *)hourOfDay {
  return new_OrgJodaTimeTimeOfDay_Property_initWithOrgJodaTimeTimeOfDay_withInt_(self, OrgJodaTimeTimeOfDay_HOUR_OF_DAY);
}

- (OrgJodaTimeTimeOfDay_Property *)minuteOfHour {
  return new_OrgJodaTimeTimeOfDay_Property_initWithOrgJodaTimeTimeOfDay_withInt_(self, OrgJodaTimeTimeOfDay_MINUTE_OF_HOUR);
}

- (OrgJodaTimeTimeOfDay_Property *)secondOfMinute {
  return new_OrgJodaTimeTimeOfDay_Property_initWithOrgJodaTimeTimeOfDay_withInt_(self, OrgJodaTimeTimeOfDay_SECOND_OF_MINUTE);
}

- (OrgJodaTimeTimeOfDay_Property *)millisOfSecond {
  return new_OrgJodaTimeTimeOfDay_Property_initWithOrgJodaTimeTimeOfDay_withInt_(self, OrgJodaTimeTimeOfDay_MILLIS_OF_SECOND);
}

- (NSString *)description {
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatISODateTimeFormat_tTime())) printWithOrgJodaTimeReadablePartial:self];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x9, 4, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 9, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 10, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 12, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 13, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 14, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 15, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 16, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 17, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x4, 19, 20, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeFieldType;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "[LOrgJodaTimeDateTimeFieldType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 23, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 32, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 33, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 34, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 35, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 36, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 37, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 38, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 39, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 40, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay_Property;", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 43, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 44, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 45, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 46, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 47, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 48, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(fromCalendarFieldsWithJavaUtilCalendar:);
  methods[1].selector = @selector(fromDateFieldsWithJavaUtilDate:);
  methods[2].selector = @selector(fromMillisOfDayWithLong:);
  methods[3].selector = @selector(fromMillisOfDayWithLong:withOrgJodaTimeChronology:);
  methods[4].selector = @selector(init);
  methods[5].selector = @selector(initWithOrgJodaTimeDateTimeZone:);
  methods[6].selector = @selector(initWithOrgJodaTimeChronology:);
  methods[7].selector = @selector(initWithLong:);
  methods[8].selector = @selector(initWithLong:withOrgJodaTimeChronology:);
  methods[9].selector = @selector(initWithId:);
  methods[10].selector = @selector(initWithId:withOrgJodaTimeChronology:);
  methods[11].selector = @selector(initWithInt:withInt:);
  methods[12].selector = @selector(initWithInt:withInt:withOrgJodaTimeChronology:);
  methods[13].selector = @selector(initWithInt:withInt:withInt:);
  methods[14].selector = @selector(initWithInt:withInt:withInt:withOrgJodaTimeChronology:);
  methods[15].selector = @selector(initWithInt:withInt:withInt:withInt:);
  methods[16].selector = @selector(initWithInt:withInt:withInt:withInt:withOrgJodaTimeChronology:);
  methods[17].selector = @selector(initWithOrgJodaTimeTimeOfDay:withIntArray:);
  methods[18].selector = @selector(initWithOrgJodaTimeTimeOfDay:withOrgJodaTimeChronology:);
  methods[19].selector = @selector(size);
  methods[20].selector = @selector(getFieldWithInt:withOrgJodaTimeChronology:);
  methods[21].selector = @selector(getFieldTypeWithInt:);
  methods[22].selector = @selector(getFieldTypes);
  methods[23].selector = @selector(withChronologyRetainFieldsWithOrgJodaTimeChronology:);
  methods[24].selector = @selector(withFieldWithOrgJodaTimeDateTimeFieldType:withInt:);
  methods[25].selector = @selector(withFieldAddedWithOrgJodaTimeDurationFieldType:withInt:);
  methods[26].selector = @selector(withPeriodAddedWithOrgJodaTimeReadablePeriod:withInt:);
  methods[27].selector = @selector(plusWithOrgJodaTimeReadablePeriod:);
  methods[28].selector = @selector(plusHoursWithInt:);
  methods[29].selector = @selector(plusMinutesWithInt:);
  methods[30].selector = @selector(plusSecondsWithInt:);
  methods[31].selector = @selector(plusMillisWithInt:);
  methods[32].selector = @selector(minusWithOrgJodaTimeReadablePeriod:);
  methods[33].selector = @selector(minusHoursWithInt:);
  methods[34].selector = @selector(minusMinutesWithInt:);
  methods[35].selector = @selector(minusSecondsWithInt:);
  methods[36].selector = @selector(minusMillisWithInt:);
  methods[37].selector = @selector(propertyWithOrgJodaTimeDateTimeFieldType:);
  methods[38].selector = @selector(toLocalTime);
  methods[39].selector = @selector(toDateTimeToday);
  methods[40].selector = @selector(toDateTimeTodayWithOrgJodaTimeDateTimeZone:);
  methods[41].selector = @selector(getHourOfDay);
  methods[42].selector = @selector(getMinuteOfHour);
  methods[43].selector = @selector(getSecondOfMinute);
  methods[44].selector = @selector(getMillisOfSecond);
  methods[45].selector = @selector(withHourOfDayWithInt:);
  methods[46].selector = @selector(withMinuteOfHourWithInt:);
  methods[47].selector = @selector(withSecondOfMinuteWithInt:);
  methods[48].selector = @selector(withMillisOfSecondWithInt:);
  methods[49].selector = @selector(hourOfDay);
  methods[50].selector = @selector(minuteOfHour);
  methods[51].selector = @selector(secondOfMinute);
  methods[52].selector = @selector(millisOfSecond);
  methods[53].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeTimeOfDay_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "FIELD_TYPES", "[LOrgJodaTimeDateTimeFieldType;", .constantValue.asLong = 0, 0x1a, -1, 49, -1, -1 },
    { "MIDNIGHT", "LOrgJodaTimeTimeOfDay;", .constantValue.asLong = 0, 0x19, -1, 50, -1, -1 },
    { "HOUR_OF_DAY", "I", .constantValue.asInt = OrgJodaTimeTimeOfDay_HOUR_OF_DAY, 0x19, -1, -1, -1, -1 },
    { "MINUTE_OF_HOUR", "I", .constantValue.asInt = OrgJodaTimeTimeOfDay_MINUTE_OF_HOUR, 0x19, -1, -1, -1, -1 },
    { "SECOND_OF_MINUTE", "I", .constantValue.asInt = OrgJodaTimeTimeOfDay_SECOND_OF_MINUTE, 0x19, -1, -1, -1, -1 },
    { "MILLIS_OF_SECOND", "I", .constantValue.asInt = OrgJodaTimeTimeOfDay_MILLIS_OF_SECOND, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "fromCalendarFields", "LJavaUtilCalendar;", "fromDateFields", "LJavaUtilDate;", "fromMillisOfDay", "J", "JLOrgJodaTimeChronology;", "LOrgJodaTimeDateTimeZone;", "LOrgJodaTimeChronology;", "LNSObject;", "LNSObject;LOrgJodaTimeChronology;", "II", "IILOrgJodaTimeChronology;", "III", "IIILOrgJodaTimeChronology;", "IIII", "IIIILOrgJodaTimeChronology;", "LOrgJodaTimeTimeOfDay;[I", "LOrgJodaTimeTimeOfDay;LOrgJodaTimeChronology;", "getField", "ILOrgJodaTimeChronology;", "getFieldType", "I", "withChronologyRetainFields", "withField", "LOrgJodaTimeDateTimeFieldType;I", "withFieldAdded", "LOrgJodaTimeDurationFieldType;I", "withPeriodAdded", "LOrgJodaTimeReadablePeriod;I", "plus", "LOrgJodaTimeReadablePeriod;", "plusHours", "plusMinutes", "plusSeconds", "plusMillis", "minus", "minusHours", "minusMinutes", "minusSeconds", "minusMillis", "property", "LOrgJodaTimeDateTimeFieldType;", "toDateTimeToday", "withHourOfDay", "withMinuteOfHour", "withSecondOfMinute", "withMillisOfSecond", "toString", &OrgJodaTimeTimeOfDay_FIELD_TYPES, &OrgJodaTimeTimeOfDay_MIDNIGHT, "LOrgJodaTimeTimeOfDay_Property;", (void *)&OrgJodaTimeTimeOfDay__Annotations$0 };
  static const J2ObjcClassInfo _OrgJodaTimeTimeOfDay = { "TimeOfDay", "org.joda.time", ptrTable, methods, fields, 7, 0x11, 54, 7, -1, 51, -1, -1, 52 };
  return &_OrgJodaTimeTimeOfDay;
}

+ (void)initialize {
  if (self == [OrgJodaTimeTimeOfDay class]) {
    OrgJodaTimeTimeOfDay_FIELD_TYPES = [IOSObjectArray newArrayWithObjects:(id[]){ OrgJodaTimeDateTimeFieldType_hourOfDay(), OrgJodaTimeDateTimeFieldType_minuteOfHour(), OrgJodaTimeDateTimeFieldType_secondOfMinute(), OrgJodaTimeDateTimeFieldType_millisOfSecond() } count:4 type:OrgJodaTimeDateTimeFieldType_class_()];
    OrgJodaTimeTimeOfDay_MIDNIGHT = new_OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_(0, 0, 0, 0);
    J2OBJC_SET_INITIALIZED(OrgJodaTimeTimeOfDay)
  }
}

@end

OrgJodaTimeTimeOfDay *OrgJodaTimeTimeOfDay_fromCalendarFieldsWithJavaUtilCalendar_(JavaUtilCalendar *calendar) {
  OrgJodaTimeTimeOfDay_initialize();
  if (calendar == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The calendar must not be null");
  }
  return new_OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_([calendar getWithInt:JavaUtilCalendar_HOUR_OF_DAY], [calendar getWithInt:JavaUtilCalendar_MINUTE], [calendar getWithInt:JavaUtilCalendar_SECOND], [calendar getWithInt:JavaUtilCalendar_MILLISECOND]);
}

OrgJodaTimeTimeOfDay *OrgJodaTimeTimeOfDay_fromDateFieldsWithJavaUtilDate_(JavaUtilDate *date) {
  OrgJodaTimeTimeOfDay_initialize();
  if (date == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  return new_OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_([date getHours], [date getMinutes], [date getSeconds], (((jint) ([date getTime] % 1000)) + 1000) % 1000);
}

OrgJodaTimeTimeOfDay *OrgJodaTimeTimeOfDay_fromMillisOfDayWithLong_(jlong millisOfDay) {
  OrgJodaTimeTimeOfDay_initialize();
  return OrgJodaTimeTimeOfDay_fromMillisOfDayWithLong_withOrgJodaTimeChronology_(millisOfDay, nil);
}

OrgJodaTimeTimeOfDay *OrgJodaTimeTimeOfDay_fromMillisOfDayWithLong_withOrgJodaTimeChronology_(jlong millisOfDay, OrgJodaTimeChronology *chrono) {
  OrgJodaTimeTimeOfDay_initialize();
  chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono);
  chrono = [((OrgJodaTimeChronology *) nil_chk(chrono)) withUTC];
  return new_OrgJodaTimeTimeOfDay_initWithLong_withOrgJodaTimeChronology_(millisOfDay, chrono);
}

void OrgJodaTimeTimeOfDay_init(OrgJodaTimeTimeOfDay *self) {
  OrgJodaTimeBaseBasePartial_init(self);
}

OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_init() {
  J2OBJC_NEW_IMPL(OrgJodaTimeTimeOfDay, init)
}

OrgJodaTimeTimeOfDay *create_OrgJodaTimeTimeOfDay_init() {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTimeOfDay, init)
}

void OrgJodaTimeTimeOfDay_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeTimeOfDay *self, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeBaseBasePartial_initWithOrgJodaTimeChronology_(self, OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone));
}

OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTimeOfDay, initWithOrgJodaTimeDateTimeZone_, zone)
}

OrgJodaTimeTimeOfDay *create_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTimeOfDay, initWithOrgJodaTimeDateTimeZone_, zone)
}

void OrgJodaTimeTimeOfDay_initWithOrgJodaTimeChronology_(OrgJodaTimeTimeOfDay *self, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBasePartial_initWithOrgJodaTimeChronology_(self, chronology);
}

OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTimeOfDay, initWithOrgJodaTimeChronology_, chronology)
}

OrgJodaTimeTimeOfDay *create_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTimeOfDay, initWithOrgJodaTimeChronology_, chronology)
}

void OrgJodaTimeTimeOfDay_initWithLong_(OrgJodaTimeTimeOfDay *self, jlong instant) {
  OrgJodaTimeBaseBasePartial_initWithLong_(self, instant);
}

OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithLong_(jlong instant) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTimeOfDay, initWithLong_, instant)
}

OrgJodaTimeTimeOfDay *create_OrgJodaTimeTimeOfDay_initWithLong_(jlong instant) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTimeOfDay, initWithLong_, instant)
}

void OrgJodaTimeTimeOfDay_initWithLong_withOrgJodaTimeChronology_(OrgJodaTimeTimeOfDay *self, jlong instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBasePartial_initWithLong_withOrgJodaTimeChronology_(self, instant, chronology);
}

OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTimeOfDay, initWithLong_withOrgJodaTimeChronology_, instant, chronology)
}

OrgJodaTimeTimeOfDay *create_OrgJodaTimeTimeOfDay_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTimeOfDay, initWithLong_withOrgJodaTimeChronology_, instant, chronology)
}

void OrgJodaTimeTimeOfDay_initWithId_(OrgJodaTimeTimeOfDay *self, id instant) {
  OrgJodaTimeBaseBasePartial_initWithId_withOrgJodaTimeChronology_withOrgJodaTimeFormatDateTimeFormatter_(self, instant, nil, OrgJodaTimeFormatISODateTimeFormat_timeParser());
}

OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithId_(id instant) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTimeOfDay, initWithId_, instant)
}

OrgJodaTimeTimeOfDay *create_OrgJodaTimeTimeOfDay_initWithId_(id instant) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTimeOfDay, initWithId_, instant)
}

void OrgJodaTimeTimeOfDay_initWithId_withOrgJodaTimeChronology_(OrgJodaTimeTimeOfDay *self, id instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBasePartial_initWithId_withOrgJodaTimeChronology_withOrgJodaTimeFormatDateTimeFormatter_(self, instant, OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology), OrgJodaTimeFormatISODateTimeFormat_timeParser());
}

OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTimeOfDay, initWithId_withOrgJodaTimeChronology_, instant, chronology)
}

OrgJodaTimeTimeOfDay *create_OrgJodaTimeTimeOfDay_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTimeOfDay, initWithId_withOrgJodaTimeChronology_, instant, chronology)
}

void OrgJodaTimeTimeOfDay_initWithInt_withInt_(OrgJodaTimeTimeOfDay *self, jint hourOfDay, jint minuteOfHour) {
  OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, hourOfDay, minuteOfHour, 0, 0, nil);
}

OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithInt_withInt_(jint hourOfDay, jint minuteOfHour) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTimeOfDay, initWithInt_withInt_, hourOfDay, minuteOfHour)
}

OrgJodaTimeTimeOfDay *create_OrgJodaTimeTimeOfDay_initWithInt_withInt_(jint hourOfDay, jint minuteOfHour) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTimeOfDay, initWithInt_withInt_, hourOfDay, minuteOfHour)
}

void OrgJodaTimeTimeOfDay_initWithInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeTimeOfDay *self, jint hourOfDay, jint minuteOfHour, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, hourOfDay, minuteOfHour, 0, 0, chronology);
}

OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithInt_withInt_withOrgJodaTimeChronology_(jint hourOfDay, jint minuteOfHour, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTimeOfDay, initWithInt_withInt_withOrgJodaTimeChronology_, hourOfDay, minuteOfHour, chronology)
}

OrgJodaTimeTimeOfDay *create_OrgJodaTimeTimeOfDay_initWithInt_withInt_withOrgJodaTimeChronology_(jint hourOfDay, jint minuteOfHour, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTimeOfDay, initWithInt_withInt_withOrgJodaTimeChronology_, hourOfDay, minuteOfHour, chronology)
}

void OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_(OrgJodaTimeTimeOfDay *self, jint hourOfDay, jint minuteOfHour, jint secondOfMinute) {
  OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, hourOfDay, minuteOfHour, secondOfMinute, 0, nil);
}

OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTimeOfDay, initWithInt_withInt_withInt_, hourOfDay, minuteOfHour, secondOfMinute)
}

OrgJodaTimeTimeOfDay *create_OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTimeOfDay, initWithInt_withInt_withInt_, hourOfDay, minuteOfHour, secondOfMinute)
}

void OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeTimeOfDay *self, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, hourOfDay, minuteOfHour, secondOfMinute, 0, chronology);
}

OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTimeOfDay, initWithInt_withInt_withInt_withOrgJodaTimeChronology_, hourOfDay, minuteOfHour, secondOfMinute, chronology)
}

OrgJodaTimeTimeOfDay *create_OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTimeOfDay, initWithInt_withInt_withInt_withOrgJodaTimeChronology_, hourOfDay, minuteOfHour, secondOfMinute, chronology)
}

void OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_(OrgJodaTimeTimeOfDay *self, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) {
  OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, nil);
}

OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTimeOfDay, initWithInt_withInt_withInt_withInt_, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond)
}

OrgJodaTimeTimeOfDay *create_OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTimeOfDay, initWithInt_withInt_withInt_withInt_, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond)
}

void OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeTimeOfDay *self, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBasePartial_initWithIntArray_withOrgJodaTimeChronology_(self, [IOSIntArray newArrayWithInts:(jint[]){ hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond } count:4], chronology);
}

OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTimeOfDay, initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology)
}

OrgJodaTimeTimeOfDay *create_OrgJodaTimeTimeOfDay_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTimeOfDay, initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology)
}

void OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withIntArray_(OrgJodaTimeTimeOfDay *self, OrgJodaTimeTimeOfDay *partial, IOSIntArray *values) {
  OrgJodaTimeBaseBasePartial_initWithOrgJodaTimeBaseBasePartial_withIntArray_(self, partial, values);
}

OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withIntArray_(OrgJodaTimeTimeOfDay *partial, IOSIntArray *values) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTimeOfDay, initWithOrgJodaTimeTimeOfDay_withIntArray_, partial, values)
}

OrgJodaTimeTimeOfDay *create_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withIntArray_(OrgJodaTimeTimeOfDay *partial, IOSIntArray *values) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTimeOfDay, initWithOrgJodaTimeTimeOfDay_withIntArray_, partial, values)
}

void OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withOrgJodaTimeChronology_(OrgJodaTimeTimeOfDay *self, OrgJodaTimeTimeOfDay *partial, OrgJodaTimeChronology *chrono) {
  OrgJodaTimeBaseBasePartial_initWithOrgJodaTimeBaseBasePartial_withOrgJodaTimeChronology_(self, partial, chrono);
}

OrgJodaTimeTimeOfDay *new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withOrgJodaTimeChronology_(OrgJodaTimeTimeOfDay *partial, OrgJodaTimeChronology *chrono) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTimeOfDay, initWithOrgJodaTimeTimeOfDay_withOrgJodaTimeChronology_, partial, chrono)
}

OrgJodaTimeTimeOfDay *create_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withOrgJodaTimeChronology_(OrgJodaTimeTimeOfDay *partial, OrgJodaTimeChronology *chrono) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTimeOfDay, initWithOrgJodaTimeTimeOfDay_withOrgJodaTimeChronology_, partial, chrono)
}

IOSObjectArray *OrgJodaTimeTimeOfDay__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTimeOfDay)

@implementation OrgJodaTimeTimeOfDay_Property

- (instancetype)initWithOrgJodaTimeTimeOfDay:(OrgJodaTimeTimeOfDay *)partial
                                     withInt:(jint)fieldIndex {
  OrgJodaTimeTimeOfDay_Property_initWithOrgJodaTimeTimeOfDay_withInt_(self, partial, fieldIndex);
  return self;
}

- (OrgJodaTimeDateTimeField *)getField {
  return [((OrgJodaTimeTimeOfDay *) nil_chk(iTimeOfDay_)) getFieldWithInt:iFieldIndex_];
}

- (id<OrgJodaTimeReadablePartial>)getReadablePartial {
  return iTimeOfDay_;
}

- (OrgJodaTimeTimeOfDay *)getTimeOfDay {
  return iTimeOfDay_;
}

- (jint)get {
  return [((OrgJodaTimeTimeOfDay *) nil_chk(iTimeOfDay_)) getValueWithInt:iFieldIndex_];
}

- (OrgJodaTimeTimeOfDay *)addToCopyWithInt:(jint)valueToAdd {
  IOSIntArray *newValues = [((OrgJodaTimeTimeOfDay *) nil_chk(iTimeOfDay_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWrapPartialWithOrgJodaTimeReadablePartial:iTimeOfDay_ withInt:iFieldIndex_ withIntArray:newValues withInt:valueToAdd];
  return new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withIntArray_(iTimeOfDay_, newValues);
}

- (OrgJodaTimeTimeOfDay *)addNoWrapToCopyWithInt:(jint)valueToAdd {
  IOSIntArray *newValues = [((OrgJodaTimeTimeOfDay *) nil_chk(iTimeOfDay_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWithOrgJodaTimeReadablePartial:iTimeOfDay_ withInt:iFieldIndex_ withIntArray:newValues withInt:valueToAdd];
  return new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withIntArray_(iTimeOfDay_, newValues);
}

- (OrgJodaTimeTimeOfDay *)addWrapFieldToCopyWithInt:(jint)valueToAdd {
  IOSIntArray *newValues = [((OrgJodaTimeTimeOfDay *) nil_chk(iTimeOfDay_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWrapFieldWithOrgJodaTimeReadablePartial:iTimeOfDay_ withInt:iFieldIndex_ withIntArray:newValues withInt:valueToAdd];
  return new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withIntArray_(iTimeOfDay_, newValues);
}

- (OrgJodaTimeTimeOfDay *)setCopyWithInt:(jint)value {
  IOSIntArray *newValues = [((OrgJodaTimeTimeOfDay *) nil_chk(iTimeOfDay_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithOrgJodaTimeReadablePartial:iTimeOfDay_ withInt:iFieldIndex_ withIntArray:newValues withInt:value];
  return new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withIntArray_(iTimeOfDay_, newValues);
}

- (OrgJodaTimeTimeOfDay *)setCopyWithNSString:(NSString *)text
                           withJavaUtilLocale:(JavaUtilLocale *)locale {
  IOSIntArray *newValues = [((OrgJodaTimeTimeOfDay *) nil_chk(iTimeOfDay_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithOrgJodaTimeReadablePartial:iTimeOfDay_ withInt:iFieldIndex_ withIntArray:newValues withNSString:text withJavaUtilLocale:locale];
  return new_OrgJodaTimeTimeOfDay_initWithOrgJodaTimeTimeOfDay_withIntArray_(iTimeOfDay_, newValues);
}

- (OrgJodaTimeTimeOfDay *)setCopyWithNSString:(NSString *)text {
  return [self setCopyWithNSString:text withJavaUtilLocale:nil];
}

- (OrgJodaTimeTimeOfDay *)withMaximumValue {
  return [self setCopyWithInt:[self getMaximumValue]];
}

- (OrgJodaTimeTimeOfDay *)withMinimumValue {
  return [self setCopyWithInt:[self getMinimumValue]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeReadablePartial;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeTimeOfDay:withInt:);
  methods[1].selector = @selector(getField);
  methods[2].selector = @selector(getReadablePartial);
  methods[3].selector = @selector(getTimeOfDay);
  methods[4].selector = @selector(get);
  methods[5].selector = @selector(addToCopyWithInt:);
  methods[6].selector = @selector(addNoWrapToCopyWithInt:);
  methods[7].selector = @selector(addWrapFieldToCopyWithInt:);
  methods[8].selector = @selector(setCopyWithInt:);
  methods[9].selector = @selector(setCopyWithNSString:withJavaUtilLocale:);
  methods[10].selector = @selector(setCopyWithNSString:);
  methods[11].selector = @selector(withMaximumValue);
  methods[12].selector = @selector(withMinimumValue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeTimeOfDay_Property_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iTimeOfDay_", "LOrgJodaTimeTimeOfDay;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iFieldIndex_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeTimeOfDay;I", "addToCopy", "I", "addNoWrapToCopy", "addWrapFieldToCopy", "setCopy", "LNSString;LJavaUtilLocale;", "LNSString;", "LOrgJodaTimeTimeOfDay;", (void *)&OrgJodaTimeTimeOfDay_Property__Annotations$0 };
  static const J2ObjcClassInfo _OrgJodaTimeTimeOfDay_Property = { "Property", "org.joda.time", ptrTable, methods, fields, 7, 0x9, 13, 3, 8, -1, -1, -1, 9 };
  return &_OrgJodaTimeTimeOfDay_Property;
}

@end

void OrgJodaTimeTimeOfDay_Property_initWithOrgJodaTimeTimeOfDay_withInt_(OrgJodaTimeTimeOfDay_Property *self, OrgJodaTimeTimeOfDay *partial, jint fieldIndex) {
  OrgJodaTimeFieldAbstractPartialFieldProperty_init(self);
  self->iTimeOfDay_ = partial;
  self->iFieldIndex_ = fieldIndex;
}

OrgJodaTimeTimeOfDay_Property *new_OrgJodaTimeTimeOfDay_Property_initWithOrgJodaTimeTimeOfDay_withInt_(OrgJodaTimeTimeOfDay *partial, jint fieldIndex) {
  J2OBJC_NEW_IMPL(OrgJodaTimeTimeOfDay_Property, initWithOrgJodaTimeTimeOfDay_withInt_, partial, fieldIndex)
}

OrgJodaTimeTimeOfDay_Property *create_OrgJodaTimeTimeOfDay_Property_initWithOrgJodaTimeTimeOfDay_withInt_(OrgJodaTimeTimeOfDay *partial, jint fieldIndex) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeTimeOfDay_Property, initWithOrgJodaTimeTimeOfDay_withInt_, partial, fieldIndex)
}

IOSObjectArray *OrgJodaTimeTimeOfDay_Property__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeTimeOfDay_Property)
