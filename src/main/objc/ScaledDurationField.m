//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/field/ScaledDurationField.java
//

#include "DecoratedDurationField.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "J2ObjC_source.h"
#include "ScaledDurationField.h"
#include "java/lang/IllegalArgumentException.h"

@interface OrgJodaTimeFieldScaledDurationField () {
 @public
  jint iScalar_;
}

@end

inline jlong OrgJodaTimeFieldScaledDurationField_get_serialVersionUID();
#define OrgJodaTimeFieldScaledDurationField_serialVersionUID -3205227092378684157LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeFieldScaledDurationField, serialVersionUID, jlong)

@implementation OrgJodaTimeFieldScaledDurationField

- (instancetype)initWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field
                withOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type
                                         withInt:(jint)scalar {
  OrgJodaTimeFieldScaledDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDurationFieldType_withInt_(self, field, type, scalar);
  return self;
}

- (jint)getValueWithLong:(jlong)duration {
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getValueWithLong:duration] / iScalar_;
}

- (jlong)getValueAsLongWithLong:(jlong)duration {
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getValueAsLongWithLong:duration] / iScalar_;
}

- (jint)getValueWithLong:(jlong)duration
                withLong:(jlong)instant {
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getValueWithLong:duration withLong:instant] / iScalar_;
}

- (jlong)getValueAsLongWithLong:(jlong)duration
                       withLong:(jlong)instant {
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getValueAsLongWithLong:duration withLong:instant] / iScalar_;
}

- (jlong)getMillisWithInt:(jint)value {
  jlong scaled = ((jlong) value) * ((jlong) iScalar_);
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getMillisWithLong:scaled];
}

- (jlong)getMillisWithLong:(jlong)value {
  jlong scaled = OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withInt_(value, iScalar_);
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getMillisWithLong:scaled];
}

- (jlong)getMillisWithInt:(jint)value
                 withLong:(jlong)instant {
  jlong scaled = ((jlong) value) * ((jlong) iScalar_);
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getMillisWithLong:scaled withLong:instant];
}

- (jlong)getMillisWithLong:(jlong)value
                  withLong:(jlong)instant {
  jlong scaled = OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withInt_(value, iScalar_);
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getMillisWithLong:scaled withLong:instant];
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value {
  jlong scaled = ((jlong) value) * ((jlong) iScalar_);
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) addWithLong:instant withLong:scaled];
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value {
  jlong scaled = OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withInt_(value, iScalar_);
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) addWithLong:instant withLong:scaled];
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant] / iScalar_;
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant] / iScalar_;
}

- (jlong)getUnitMillis {
  return [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) getUnitMillis] * iScalar_;
}

- (jint)getScalar {
  return iScalar_;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  else if ([obj isKindOfClass:[OrgJodaTimeFieldScaledDurationField class]]) {
    OrgJodaTimeFieldScaledDurationField *other = (OrgJodaTimeFieldScaledDurationField *) cast_chk(obj, [OrgJodaTimeFieldScaledDurationField class]);
    return ([((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) isEqual:[((OrgJodaTimeFieldScaledDurationField *) nil_chk(other)) getWrappedField]]) && ([self getType] == [other getType]) && (iScalar_ == other->iScalar_);
  }
  return false;
}

- (NSUInteger)hash {
  jlong scalar = iScalar_;
  jint hash_ = (jint) (scalar ^ (JreURShift64(scalar, 32)));
  hash_ += ((jint) [((OrgJodaTimeDurationFieldType *) nil_chk([self getType])) hash]);
  hash_ += ((jint) [((OrgJodaTimeDurationField *) nil_chk([self getWrappedField])) hash]);
  return hash_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeDurationField:withOrgJodaTimeDurationFieldType:withInt:);
  methods[1].selector = @selector(getValueWithLong:);
  methods[2].selector = @selector(getValueAsLongWithLong:);
  methods[3].selector = @selector(getValueWithLong:withLong:);
  methods[4].selector = @selector(getValueAsLongWithLong:withLong:);
  methods[5].selector = @selector(getMillisWithInt:);
  methods[6].selector = @selector(getMillisWithLong:);
  methods[7].selector = @selector(getMillisWithInt:withLong:);
  methods[8].selector = @selector(getMillisWithLong:withLong:);
  methods[9].selector = @selector(addWithLong:withInt:);
  methods[10].selector = @selector(addWithLong:withLong:);
  methods[11].selector = @selector(getDifferenceWithLong:withLong:);
  methods[12].selector = @selector(getDifferenceAsLongWithLong:withLong:);
  methods[13].selector = @selector(getUnitMillis);
  methods[14].selector = @selector(getScalar);
  methods[15].selector = @selector(isEqual:);
  methods[16].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeFieldScaledDurationField_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iScalar_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeDurationField;LOrgJodaTimeDurationFieldType;I", "getValue", "J", "getValueAsLong", "JJ", "getMillis", "I", "IJ", "add", "JI", "getDifference", "getDifferenceAsLong", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgJodaTimeFieldScaledDurationField = { "ScaledDurationField", "org.joda.time.field", ptrTable, methods, fields, 7, 0x1, 17, 2, -1, -1, -1, -1, -1 };
  return &_OrgJodaTimeFieldScaledDurationField;
}

@end

void OrgJodaTimeFieldScaledDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDurationFieldType_withInt_(OrgJodaTimeFieldScaledDurationField *self, OrgJodaTimeDurationField *field, OrgJodaTimeDurationFieldType *type, jint scalar) {
  OrgJodaTimeFieldDecoratedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDurationFieldType_(self, field, type);
  if (scalar == 0 || scalar == 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The scalar must not be 0 or 1");
  }
  self->iScalar_ = scalar;
}

OrgJodaTimeFieldScaledDurationField *new_OrgJodaTimeFieldScaledDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDurationFieldType_withInt_(OrgJodaTimeDurationField *field, OrgJodaTimeDurationFieldType *type, jint scalar) {
  J2OBJC_NEW_IMPL(OrgJodaTimeFieldScaledDurationField, initWithOrgJodaTimeDurationField_withOrgJodaTimeDurationFieldType_withInt_, field, type, scalar)
}

OrgJodaTimeFieldScaledDurationField *create_OrgJodaTimeFieldScaledDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDurationFieldType_withInt_(OrgJodaTimeDurationField *field, OrgJodaTimeDurationFieldType *type, jint scalar) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFieldScaledDurationField, initWithOrgJodaTimeDurationField_withOrgJodaTimeDurationFieldType_withInt_, field, type, scalar)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFieldScaledDurationField)
