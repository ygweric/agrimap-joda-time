//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/chrono/CopticChronology.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CopticChronology")
#ifdef RESTRICT_CopticChronology
#define INCLUDE_ALL_CopticChronology 0
#else
#define INCLUDE_ALL_CopticChronology 1
#endif
#undef RESTRICT_CopticChronology

#if !defined (OrgJodaTimeChronoCopticChronology_) && (INCLUDE_ALL_CopticChronology || defined(INCLUDE_OrgJodaTimeChronoCopticChronology))
#define OrgJodaTimeChronoCopticChronology_

#define RESTRICT_BasicFixedMonthChronology 1
#define INCLUDE_OrgJodaTimeChronoBasicFixedMonthChronology 1
#include "BasicFixedMonthChronology.h"

@class OrgJodaTimeChronoAssembledChronology_Fields;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeZone;

@interface OrgJodaTimeChronoCopticChronology : OrgJodaTimeChronoBasicFixedMonthChronology

#pragma mark Public

+ (OrgJodaTimeChronoCopticChronology *)getInstance;

+ (OrgJodaTimeChronoCopticChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

+ (OrgJodaTimeChronoCopticChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                                                      withInt:(jint)minDaysInFirstWeek;

+ (OrgJodaTimeChronoCopticChronology *)getInstanceUTC;

- (OrgJodaTimeChronology *)withUTC;

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

#pragma mark Protected

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields;

#pragma mark Package-Private

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
                                      withInt:(jint)minDaysInFirstWeek;

- (jlong)calculateFirstDayOfYearMillisWithInt:(jint)year;

- (jlong)getApproxMillisAtEpochDividedByTwo;

- (jint)getMaxYear;

- (jint)getMinYear;

- (jboolean)isLeapDayWithLong:(jlong)instant;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeChronoCopticChronology)

inline jint OrgJodaTimeChronoCopticChronology_get_AM();
#define OrgJodaTimeChronoCopticChronology_AM 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoCopticChronology, AM, jint)

FOUNDATION_EXPORT OrgJodaTimeChronoCopticChronology *OrgJodaTimeChronoCopticChronology_getInstanceUTC();

FOUNDATION_EXPORT OrgJodaTimeChronoCopticChronology *OrgJodaTimeChronoCopticChronology_getInstance();

FOUNDATION_EXPORT OrgJodaTimeChronoCopticChronology *OrgJodaTimeChronoCopticChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeChronoCopticChronology *OrgJodaTimeChronoCopticChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(OrgJodaTimeDateTimeZone *zone, jint minDaysInFirstWeek);

FOUNDATION_EXPORT void OrgJodaTimeChronoCopticChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronoCopticChronology *self, OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek);

FOUNDATION_EXPORT OrgJodaTimeChronoCopticChronology *new_OrgJodaTimeChronoCopticChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeChronoCopticChronology *create_OrgJodaTimeChronoCopticChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoCopticChronology)

#endif

#pragma pop_macro("INCLUDE_ALL_CopticChronology")
