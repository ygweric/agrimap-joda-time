//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/MutableDateTime.java
//

#include "AbstractReadableInstantFieldProperty.h"
#include "BaseDateTime.h"
#include "Chronology.h"
#include "DateTime.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormatter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "FromString.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "ISOChronology.h"
#include "ISODateTimeFormat.h"
#include "J2ObjC_source.h"
#include "MutableDateTime.h"
#include "ReadableDateTime.h"
#include "ReadableDuration.h"
#include "ReadableInstant.h"
#include "ReadablePeriod.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InternalError.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Locale.h"

@interface OrgJodaTimeMutableDateTime () {
 @public
  OrgJodaTimeDateTimeField *iRoundingField_;
  jint iRoundingMode_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeMutableDateTime, iRoundingField_, OrgJodaTimeDateTimeField *)

inline jlong OrgJodaTimeMutableDateTime_get_serialVersionUID();
#define OrgJodaTimeMutableDateTime_serialVersionUID 2852608688135209575LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeMutableDateTime, serialVersionUID, jlong)

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeMutableDateTime__Annotations$0();

@interface OrgJodaTimeMutableDateTime_Property () {
 @public
  OrgJodaTimeMutableDateTime *iInstant_;
  OrgJodaTimeDateTimeField *iField_;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeMutableDateTime_Property, iInstant_, OrgJodaTimeMutableDateTime *)
J2OBJC_FIELD_SETTER(OrgJodaTimeMutableDateTime_Property, iField_, OrgJodaTimeDateTimeField *)

inline jlong OrgJodaTimeMutableDateTime_Property_get_serialVersionUID();
#define OrgJodaTimeMutableDateTime_Property_serialVersionUID -4481126543819298617LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeMutableDateTime_Property, serialVersionUID, jlong)

@implementation OrgJodaTimeMutableDateTime

+ (OrgJodaTimeMutableDateTime *)now {
  return OrgJodaTimeMutableDateTime_now();
}

+ (OrgJodaTimeMutableDateTime *)nowWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeMutableDateTime_nowWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeMutableDateTime *)nowWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return OrgJodaTimeMutableDateTime_nowWithOrgJodaTimeChronology_(chronology);
}

+ (OrgJodaTimeMutableDateTime *)parseWithNSString:(NSString *)str {
  return OrgJodaTimeMutableDateTime_parseWithNSString_(str);
}

+ (OrgJodaTimeMutableDateTime *)parseWithNSString:(NSString *)str
           withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter {
  return OrgJodaTimeMutableDateTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, formatter);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeMutableDateTime_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeMutableDateTime_initWithOrgJodaTimeDateTimeZone_(self, zone);
  return self;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeMutableDateTime_initWithOrgJodaTimeChronology_(self, chronology);
  return self;
}

- (instancetype)initWithLong:(jlong)instant {
  OrgJodaTimeMutableDateTime_initWithLong_(self, instant);
  return self;
}

- (instancetype)initWithLong:(jlong)instant
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeMutableDateTime_initWithLong_withOrgJodaTimeDateTimeZone_(self, instant, zone);
  return self;
}

- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeMutableDateTime_initWithLong_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

- (instancetype)initWithId:(id)instant {
  OrgJodaTimeMutableDateTime_initWithId_(self, instant);
  return self;
}

- (instancetype)initWithId:(id)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeMutableDateTime_initWithId_withOrgJodaTimeDateTimeZone_(self, instant, zone);
  return self;
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeMutableDateTime_initWithId_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond {
  OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, zone);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology);
  return self;
}

- (OrgJodaTimeDateTimeField *)getRoundingField {
  return iRoundingField_;
}

- (jint)getRoundingMode {
  return iRoundingMode_;
}

- (void)setRoundingWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  [self setRoundingWithOrgJodaTimeDateTimeField:field withInt:OrgJodaTimeMutableDateTime_ROUND_FLOOR];
}

- (void)setRoundingWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                        withInt:(jint)mode {
  if (field != nil && (mode < OrgJodaTimeMutableDateTime_ROUND_NONE || mode > OrgJodaTimeMutableDateTime_ROUND_HALF_EVEN)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Illegal rounding mode: ", mode));
  }
  iRoundingField_ = (mode == OrgJodaTimeMutableDateTime_ROUND_NONE ? nil : field);
  iRoundingMode_ = (field == nil ? OrgJodaTimeMutableDateTime_ROUND_NONE : mode);
  [self setMillisWithLong:[self getMillis]];
}

- (void)setMillisWithLong:(jlong)instant {
  switch (iRoundingMode_) {
    case OrgJodaTimeMutableDateTime_ROUND_NONE:
    break;
    case OrgJodaTimeMutableDateTime_ROUND_FLOOR:
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iRoundingField_)) roundFloorWithLong:instant];
    break;
    case OrgJodaTimeMutableDateTime_ROUND_CEILING:
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iRoundingField_)) roundCeilingWithLong:instant];
    break;
    case OrgJodaTimeMutableDateTime_ROUND_HALF_FLOOR:
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iRoundingField_)) roundHalfFloorWithLong:instant];
    break;
    case OrgJodaTimeMutableDateTime_ROUND_HALF_CEILING:
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iRoundingField_)) roundHalfCeilingWithLong:instant];
    break;
    case OrgJodaTimeMutableDateTime_ROUND_HALF_EVEN:
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iRoundingField_)) roundHalfEvenWithLong:instant];
    break;
  }
  [super setMillisWithLong:instant];
}

- (void)setMillisWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  jlong instantMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(instant);
  [self setMillisWithLong:instantMillis];
}

- (void)addWithLong:(jlong)duration {
  [self setMillisWithLong:OrgJodaTimeFieldFieldUtils_safeAddWithLong_withLong_([self getMillis], duration)];
}

- (void)addWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration {
  [self addWithOrgJodaTimeReadableDuration:duration withInt:1];
}

- (void)addWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration
                                   withInt:(jint)scalar {
  if (duration != nil) {
    [self addWithLong:OrgJodaTimeFieldFieldUtils_safeMultiplyWithLong_withInt_([duration getMillis], scalar)];
  }
}

- (void)addWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  [self addWithOrgJodaTimeReadablePeriod:period withInt:1];
}

- (void)addWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                 withInt:(jint)scalar {
  if (period != nil) {
    [self setMillisWithLong:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) addWithOrgJodaTimeReadablePeriod:period withLong:[self getMillis] withInt:scalar]];
  }
}

- (void)setChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  [super setChronologyWithOrgJodaTimeChronology:chronology];
}

- (void)setZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)newZone {
  newZone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(newZone);
  OrgJodaTimeChronology *chrono = [self getChronology];
  if ([((OrgJodaTimeChronology *) nil_chk(chrono)) getZone] != newZone) {
    [self setChronologyWithOrgJodaTimeChronology:[chrono withZoneWithOrgJodaTimeDateTimeZone:newZone]];
  }
}

- (void)setZoneRetainFieldsWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)newZone {
  newZone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(newZone);
  OrgJodaTimeDateTimeZone *originalZone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_([self getZone]);
  if (newZone == originalZone) {
    return;
  }
  jlong millis = [((OrgJodaTimeDateTimeZone *) nil_chk(originalZone)) getMillisKeepLocalWithOrgJodaTimeDateTimeZone:newZone withLong:[self getMillis]];
  [self setChronologyWithOrgJodaTimeChronology:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:newZone]];
  [self setMillisWithLong:millis];
}

- (void)setWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                    withInt:(jint)value {
  if (type == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field must not be null");
  }
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([type getFieldWithOrgJodaTimeChronology:[self getChronology]])) setWithLong:[self getMillis] withInt:value]];
}

- (void)addWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type
                                    withInt:(jint)amount {
  if (type == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field must not be null");
  }
  if (amount != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([type getFieldWithOrgJodaTimeChronology:[self getChronology]])) addWithLong:[self getMillis] withInt:amount]];
  }
}

- (void)setYearWithInt:(jint)year {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) year])) setWithLong:[self getMillis] withInt:year]];
}

- (void)addYearsWithInt:(jint)years {
  if (years != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) years])) addWithLong:[self getMillis] withInt:years]];
  }
}

- (void)setWeekyearWithInt:(jint)weekyear {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear])) setWithLong:[self getMillis] withInt:weekyear]];
}

- (void)addWeekyearsWithInt:(jint)weekyears {
  if (weekyears != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyears])) addWithLong:[self getMillis] withInt:weekyears]];
  }
}

- (void)setMonthOfYearWithInt:(jint)monthOfYear {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) setWithLong:[self getMillis] withInt:monthOfYear]];
}

- (void)addMonthsWithInt:(jint)months {
  if (months != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) months])) addWithLong:[self getMillis] withInt:months]];
  }
}

- (void)setWeekOfWeekyearWithInt:(jint)weekOfWeekyear {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear])) setWithLong:[self getMillis] withInt:weekOfWeekyear]];
}

- (void)addWeeksWithInt:(jint)weeks {
  if (weeks != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weeks])) addWithLong:[self getMillis] withInt:weeks]];
  }
}

- (void)setDayOfYearWithInt:(jint)dayOfYear {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear])) setWithLong:[self getMillis] withInt:dayOfYear]];
}

- (void)setDayOfMonthWithInt:(jint)dayOfMonth {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) setWithLong:[self getMillis] withInt:dayOfMonth]];
}

- (void)setDayOfWeekWithInt:(jint)dayOfWeek {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek])) setWithLong:[self getMillis] withInt:dayOfWeek]];
}

- (void)addDaysWithInt:(jint)days {
  if (days != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) addWithLong:[self getMillis] withInt:days]];
  }
}

- (void)setHourOfDayWithInt:(jint)hourOfDay {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay])) setWithLong:[self getMillis] withInt:hourOfDay]];
}

- (void)addHoursWithInt:(jint)hours {
  if (hours != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hours])) addWithLong:[self getMillis] withInt:hours]];
  }
}

- (void)setMinuteOfDayWithInt:(jint)minuteOfDay {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfDay])) setWithLong:[self getMillis] withInt:minuteOfDay]];
}

- (void)setMinuteOfHourWithInt:(jint)minuteOfHour {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour])) setWithLong:[self getMillis] withInt:minuteOfHour]];
}

- (void)addMinutesWithInt:(jint)minutes {
  if (minutes != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minutes])) addWithLong:[self getMillis] withInt:minutes]];
  }
}

- (void)setSecondOfDayWithInt:(jint)secondOfDay {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfDay])) setWithLong:[self getMillis] withInt:secondOfDay]];
}

- (void)setSecondOfMinuteWithInt:(jint)secondOfMinute {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute])) setWithLong:[self getMillis] withInt:secondOfMinute]];
}

- (void)addSecondsWithInt:(jint)seconds {
  if (seconds != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) seconds])) addWithLong:[self getMillis] withInt:seconds]];
  }
}

- (void)setMillisOfDayWithInt:(jint)millisOfDay {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) setWithLong:[self getMillis] withInt:millisOfDay]];
}

- (void)setMillisOfSecondWithInt:(jint)millisOfSecond {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond])) setWithLong:[self getMillis] withInt:millisOfSecond]];
}

- (void)addMillisWithInt:(jint)millis {
  if (millis != 0) {
    [self setMillisWithLong:[((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millis])) addWithLong:[self getMillis] withInt:millis]];
  }
}

- (void)setDateWithLong:(jlong)instant {
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) setWithLong:instant withInt:[self getMillisOfDay]]];
}

- (void)setDateWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  jlong instantMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(instant);
  if ([OrgJodaTimeReadableDateTime_class_() isInstance:instant]) {
    id<OrgJodaTimeReadableDateTime> rdt = (id<OrgJodaTimeReadableDateTime>) cast_check(instant, OrgJodaTimeReadableDateTime_class_());
    OrgJodaTimeChronology *instantChrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_([((id<OrgJodaTimeReadableDateTime>) nil_chk(rdt)) getChronology]);
    OrgJodaTimeDateTimeZone *zone = [((OrgJodaTimeChronology *) nil_chk(instantChrono)) getZone];
    if (zone != nil) {
      instantMillis = [zone getMillisKeepLocalWithOrgJodaTimeDateTimeZone:[self getZone] withLong:instantMillis];
    }
  }
  [self setDateWithLong:instantMillis];
}

- (void)setDateWithInt:(jint)year
               withInt:(jint)monthOfYear
               withInt:(jint)dayOfMonth {
  OrgJodaTimeChronology *c = [self getChronology];
  jlong instantMidnight = [((OrgJodaTimeChronology *) nil_chk(c)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:0];
  [self setDateWithLong:instantMidnight];
}

- (void)setTimeWithLong:(jlong)millis {
  jint millisOfDay = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoISOChronology *) nil_chk(OrgJodaTimeChronoISOChronology_getInstanceUTC())) millisOfDay])) getWithLong:millis];
  [self setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) setWithLong:[self getMillis] withInt:millisOfDay]];
}

- (void)setTimeWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  jlong instantMillis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(instant);
  OrgJodaTimeChronology *instantChrono = OrgJodaTimeDateTimeUtils_getInstantChronologyWithOrgJodaTimeReadableInstant_(instant);
  OrgJodaTimeDateTimeZone *zone = [((OrgJodaTimeChronology *) nil_chk(instantChrono)) getZone];
  if (zone != nil) {
    instantMillis = [zone getMillisKeepLocalWithOrgJodaTimeDateTimeZone:JreLoadStatic(OrgJodaTimeDateTimeZone, UTC) withLong:instantMillis];
  }
  [self setTimeWithLong:instantMillis];
}

- (void)setTimeWithInt:(jint)hour
               withInt:(jint)minuteOfHour
               withInt:(jint)secondOfMinute
               withInt:(jint)millisOfSecond {
  jlong instant = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) getDateTimeMillisWithLong:[self getMillis] withInt:hour withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  [self setMillisWithLong:instant];
}

- (void)setDateTimeWithInt:(jint)year
                   withInt:(jint)monthOfYear
                   withInt:(jint)dayOfMonth
                   withInt:(jint)hourOfDay
                   withInt:(jint)minuteOfHour
                   withInt:(jint)secondOfMinute
                   withInt:(jint)millisOfSecond {
  jlong instant = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  [self setMillisWithLong:instant];
}

- (OrgJodaTimeMutableDateTime_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  if (type == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The DateTimeFieldType must not be null");
  }
  OrgJodaTimeDateTimeField *field = [type getFieldWithOrgJodaTimeChronology:[self getChronology]];
  if ([((OrgJodaTimeDateTimeField *) nil_chk(field)) isSupported] == false) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Field '", type, @"' is not supported"));
  }
  return new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, field);
}

- (OrgJodaTimeMutableDateTime_Property *)era {
  return new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) era]);
}

- (OrgJodaTimeMutableDateTime_Property *)centuryOfEra {
  return new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) centuryOfEra]);
}

- (OrgJodaTimeMutableDateTime_Property *)yearOfCentury {
  return new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfCentury]);
}

- (OrgJodaTimeMutableDateTime_Property *)yearOfEra {
  return new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfEra]);
}

- (OrgJodaTimeMutableDateTime_Property *)year {
  return new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) year]);
}

- (OrgJodaTimeMutableDateTime_Property *)weekyear {
  return new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear]);
}

- (OrgJodaTimeMutableDateTime_Property *)monthOfYear {
  return new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear]);
}

- (OrgJodaTimeMutableDateTime_Property *)weekOfWeekyear {
  return new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear]);
}

- (OrgJodaTimeMutableDateTime_Property *)dayOfYear {
  return new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear]);
}

- (OrgJodaTimeMutableDateTime_Property *)dayOfMonth {
  return new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth]);
}

- (OrgJodaTimeMutableDateTime_Property *)dayOfWeek {
  return new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek]);
}

- (OrgJodaTimeMutableDateTime_Property *)hourOfDay {
  return new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay]);
}

- (OrgJodaTimeMutableDateTime_Property *)minuteOfDay {
  return new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfDay]);
}

- (OrgJodaTimeMutableDateTime_Property *)minuteOfHour {
  return new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour]);
}

- (OrgJodaTimeMutableDateTime_Property *)secondOfDay {
  return new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfDay]);
}

- (OrgJodaTimeMutableDateTime_Property *)secondOfMinute {
  return new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute]);
}

- (OrgJodaTimeMutableDateTime_Property *)millisOfDay {
  return new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay]);
}

- (OrgJodaTimeMutableDateTime_Property *)millisOfSecond {
  return new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond]);
}

- (OrgJodaTimeMutableDateTime *)copy__ {
  return (OrgJodaTimeMutableDateTime *) cast_chk([self clone], [OrgJodaTimeMutableDateTime class]);
}

- (id)clone {
  @try {
    return [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *ex) {
    @throw new_JavaLangInternalError_initWithNSString_(@"Clone error");
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJodaTimeMutableDateTime;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime;", 0x9, 3, 4, -1, -1, 5, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime;", 0x9, 3, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 9, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 10, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 12, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 13, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 14, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 15, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 52, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 54, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 55, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 56, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 56, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 56, 57, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 58, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 58, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 58, 59, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 13, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime_Property;", 0x1, 61, 62, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime;", 0x1, 63, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(now);
  methods[1].selector = @selector(nowWithOrgJodaTimeDateTimeZone:);
  methods[2].selector = @selector(nowWithOrgJodaTimeChronology:);
  methods[3].selector = @selector(parseWithNSString:);
  methods[4].selector = @selector(parseWithNSString:withOrgJodaTimeFormatDateTimeFormatter:);
  methods[5].selector = @selector(init);
  methods[6].selector = @selector(initWithOrgJodaTimeDateTimeZone:);
  methods[7].selector = @selector(initWithOrgJodaTimeChronology:);
  methods[8].selector = @selector(initWithLong:);
  methods[9].selector = @selector(initWithLong:withOrgJodaTimeDateTimeZone:);
  methods[10].selector = @selector(initWithLong:withOrgJodaTimeChronology:);
  methods[11].selector = @selector(initWithId:);
  methods[12].selector = @selector(initWithId:withOrgJodaTimeDateTimeZone:);
  methods[13].selector = @selector(initWithId:withOrgJodaTimeChronology:);
  methods[14].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:);
  methods[15].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withOrgJodaTimeDateTimeZone:);
  methods[16].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withOrgJodaTimeChronology:);
  methods[17].selector = @selector(getRoundingField);
  methods[18].selector = @selector(getRoundingMode);
  methods[19].selector = @selector(setRoundingWithOrgJodaTimeDateTimeField:);
  methods[20].selector = @selector(setRoundingWithOrgJodaTimeDateTimeField:withInt:);
  methods[21].selector = @selector(setMillisWithLong:);
  methods[22].selector = @selector(setMillisWithOrgJodaTimeReadableInstant:);
  methods[23].selector = @selector(addWithLong:);
  methods[24].selector = @selector(addWithOrgJodaTimeReadableDuration:);
  methods[25].selector = @selector(addWithOrgJodaTimeReadableDuration:withInt:);
  methods[26].selector = @selector(addWithOrgJodaTimeReadablePeriod:);
  methods[27].selector = @selector(addWithOrgJodaTimeReadablePeriod:withInt:);
  methods[28].selector = @selector(setChronologyWithOrgJodaTimeChronology:);
  methods[29].selector = @selector(setZoneWithOrgJodaTimeDateTimeZone:);
  methods[30].selector = @selector(setZoneRetainFieldsWithOrgJodaTimeDateTimeZone:);
  methods[31].selector = @selector(setWithOrgJodaTimeDateTimeFieldType:withInt:);
  methods[32].selector = @selector(addWithOrgJodaTimeDurationFieldType:withInt:);
  methods[33].selector = @selector(setYearWithInt:);
  methods[34].selector = @selector(addYearsWithInt:);
  methods[35].selector = @selector(setWeekyearWithInt:);
  methods[36].selector = @selector(addWeekyearsWithInt:);
  methods[37].selector = @selector(setMonthOfYearWithInt:);
  methods[38].selector = @selector(addMonthsWithInt:);
  methods[39].selector = @selector(setWeekOfWeekyearWithInt:);
  methods[40].selector = @selector(addWeeksWithInt:);
  methods[41].selector = @selector(setDayOfYearWithInt:);
  methods[42].selector = @selector(setDayOfMonthWithInt:);
  methods[43].selector = @selector(setDayOfWeekWithInt:);
  methods[44].selector = @selector(addDaysWithInt:);
  methods[45].selector = @selector(setHourOfDayWithInt:);
  methods[46].selector = @selector(addHoursWithInt:);
  methods[47].selector = @selector(setMinuteOfDayWithInt:);
  methods[48].selector = @selector(setMinuteOfHourWithInt:);
  methods[49].selector = @selector(addMinutesWithInt:);
  methods[50].selector = @selector(setSecondOfDayWithInt:);
  methods[51].selector = @selector(setSecondOfMinuteWithInt:);
  methods[52].selector = @selector(addSecondsWithInt:);
  methods[53].selector = @selector(setMillisOfDayWithInt:);
  methods[54].selector = @selector(setMillisOfSecondWithInt:);
  methods[55].selector = @selector(addMillisWithInt:);
  methods[56].selector = @selector(setDateWithLong:);
  methods[57].selector = @selector(setDateWithOrgJodaTimeReadableInstant:);
  methods[58].selector = @selector(setDateWithInt:withInt:withInt:);
  methods[59].selector = @selector(setTimeWithLong:);
  methods[60].selector = @selector(setTimeWithOrgJodaTimeReadableInstant:);
  methods[61].selector = @selector(setTimeWithInt:withInt:withInt:withInt:);
  methods[62].selector = @selector(setDateTimeWithInt:withInt:withInt:withInt:withInt:withInt:withInt:);
  methods[63].selector = @selector(propertyWithOrgJodaTimeDateTimeFieldType:);
  methods[64].selector = @selector(era);
  methods[65].selector = @selector(centuryOfEra);
  methods[66].selector = @selector(yearOfCentury);
  methods[67].selector = @selector(yearOfEra);
  methods[68].selector = @selector(year);
  methods[69].selector = @selector(weekyear);
  methods[70].selector = @selector(monthOfYear);
  methods[71].selector = @selector(weekOfWeekyear);
  methods[72].selector = @selector(dayOfYear);
  methods[73].selector = @selector(dayOfMonth);
  methods[74].selector = @selector(dayOfWeek);
  methods[75].selector = @selector(hourOfDay);
  methods[76].selector = @selector(minuteOfDay);
  methods[77].selector = @selector(minuteOfHour);
  methods[78].selector = @selector(secondOfDay);
  methods[79].selector = @selector(secondOfMinute);
  methods[80].selector = @selector(millisOfDay);
  methods[81].selector = @selector(millisOfSecond);
  methods[82].selector = @selector(copy__);
  methods[83].selector = @selector(clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeMutableDateTime_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "ROUND_NONE", "I", .constantValue.asInt = OrgJodaTimeMutableDateTime_ROUND_NONE, 0x19, -1, -1, -1, -1 },
    { "ROUND_FLOOR", "I", .constantValue.asInt = OrgJodaTimeMutableDateTime_ROUND_FLOOR, 0x19, -1, -1, -1, -1 },
    { "ROUND_CEILING", "I", .constantValue.asInt = OrgJodaTimeMutableDateTime_ROUND_CEILING, 0x19, -1, -1, -1, -1 },
    { "ROUND_HALF_FLOOR", "I", .constantValue.asInt = OrgJodaTimeMutableDateTime_ROUND_HALF_FLOOR, 0x19, -1, -1, -1, -1 },
    { "ROUND_HALF_CEILING", "I", .constantValue.asInt = OrgJodaTimeMutableDateTime_ROUND_HALF_CEILING, 0x19, -1, -1, -1, -1 },
    { "ROUND_HALF_EVEN", "I", .constantValue.asInt = OrgJodaTimeMutableDateTime_ROUND_HALF_EVEN, 0x19, -1, -1, -1, -1 },
    { "iRoundingField_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iRoundingMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "now", "LOrgJodaTimeDateTimeZone;", "LOrgJodaTimeChronology;", "parse", "LNSString;", (void *)&OrgJodaTimeMutableDateTime__Annotations$0, "LNSString;LOrgJodaTimeFormatDateTimeFormatter;", "J", "JLOrgJodaTimeDateTimeZone;", "JLOrgJodaTimeChronology;", "LNSObject;", "LNSObject;LOrgJodaTimeDateTimeZone;", "LNSObject;LOrgJodaTimeChronology;", "IIIIIII", "IIIIIIILOrgJodaTimeDateTimeZone;", "IIIIIIILOrgJodaTimeChronology;", "setRounding", "LOrgJodaTimeDateTimeField;", "LOrgJodaTimeDateTimeField;I", "setMillis", "LOrgJodaTimeReadableInstant;", "add", "LOrgJodaTimeReadableDuration;", "LOrgJodaTimeReadableDuration;I", "LOrgJodaTimeReadablePeriod;", "LOrgJodaTimeReadablePeriod;I", "setChronology", "setZone", "setZoneRetainFields", "set", "LOrgJodaTimeDateTimeFieldType;I", "LOrgJodaTimeDurationFieldType;I", "setYear", "I", "addYears", "setWeekyear", "addWeekyears", "setMonthOfYear", "addMonths", "setWeekOfWeekyear", "addWeeks", "setDayOfYear", "setDayOfMonth", "setDayOfWeek", "addDays", "setHourOfDay", "addHours", "setMinuteOfDay", "setMinuteOfHour", "addMinutes", "setSecondOfDay", "setSecondOfMinute", "addSeconds", "setMillisOfDay", "setMillisOfSecond", "addMillis", "setDate", "III", "setTime", "IIII", "setDateTime", "property", "LOrgJodaTimeDateTimeFieldType;", "copy", "LOrgJodaTimeMutableDateTime_Property;" };
  static const J2ObjcClassInfo _OrgJodaTimeMutableDateTime = { "MutableDateTime", "org.joda.time", ptrTable, methods, fields, 7, 0x1, 84, 9, -1, 64, -1, -1, -1 };
  return &_OrgJodaTimeMutableDateTime;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

@end

OrgJodaTimeMutableDateTime *OrgJodaTimeMutableDateTime_now() {
  OrgJodaTimeMutableDateTime_initialize();
  return new_OrgJodaTimeMutableDateTime_init();
}

OrgJodaTimeMutableDateTime *OrgJodaTimeMutableDateTime_nowWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeMutableDateTime_initialize();
  if (zone == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Zone must not be null");
  }
  return new_OrgJodaTimeMutableDateTime_initWithOrgJodaTimeDateTimeZone_(zone);
}

OrgJodaTimeMutableDateTime *OrgJodaTimeMutableDateTime_nowWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  OrgJodaTimeMutableDateTime_initialize();
  if (chronology == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Chronology must not be null");
  }
  return new_OrgJodaTimeMutableDateTime_initWithOrgJodaTimeChronology_(chronology);
}

OrgJodaTimeMutableDateTime *OrgJodaTimeMutableDateTime_parseWithNSString_(NSString *str) {
  OrgJodaTimeMutableDateTime_initialize();
  return OrgJodaTimeMutableDateTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatISODateTimeFormat_dateTimeParser())) withOffsetParsed]);
}

OrgJodaTimeMutableDateTime *OrgJodaTimeMutableDateTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(NSString *str, OrgJodaTimeFormatDateTimeFormatter *formatter) {
  OrgJodaTimeMutableDateTime_initialize();
  return [((OrgJodaTimeDateTime *) nil_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(formatter)) parseDateTimeWithNSString:str])) toMutableDateTime];
}

void OrgJodaTimeMutableDateTime_init(OrgJodaTimeMutableDateTime *self) {
  OrgJodaTimeBaseBaseDateTime_init(self);
}

OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_init() {
  J2OBJC_NEW_IMPL(OrgJodaTimeMutableDateTime, init)
}

OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_init() {
  J2OBJC_CREATE_IMPL(OrgJodaTimeMutableDateTime, init)
}

void OrgJodaTimeMutableDateTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeMutableDateTime *self, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeBaseBaseDateTime_initWithOrgJodaTimeDateTimeZone_(self, zone);
}

OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeMutableDateTime, initWithOrgJodaTimeDateTimeZone_, zone)
}

OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeMutableDateTime, initWithOrgJodaTimeDateTimeZone_, zone)
}

void OrgJodaTimeMutableDateTime_initWithOrgJodaTimeChronology_(OrgJodaTimeMutableDateTime *self, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseDateTime_initWithOrgJodaTimeChronology_(self, chronology);
}

OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeMutableDateTime, initWithOrgJodaTimeChronology_, chronology)
}

OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeMutableDateTime, initWithOrgJodaTimeChronology_, chronology)
}

void OrgJodaTimeMutableDateTime_initWithLong_(OrgJodaTimeMutableDateTime *self, jlong instant) {
  OrgJodaTimeBaseBaseDateTime_initWithLong_(self, instant);
}

OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithLong_(jlong instant) {
  J2OBJC_NEW_IMPL(OrgJodaTimeMutableDateTime, initWithLong_, instant)
}

OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithLong_(jlong instant) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeMutableDateTime, initWithLong_, instant)
}

void OrgJodaTimeMutableDateTime_initWithLong_withOrgJodaTimeDateTimeZone_(OrgJodaTimeMutableDateTime *self, jlong instant, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeBaseBaseDateTime_initWithLong_withOrgJodaTimeDateTimeZone_(self, instant, zone);
}

OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithLong_withOrgJodaTimeDateTimeZone_(jlong instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeMutableDateTime, initWithLong_withOrgJodaTimeDateTimeZone_, instant, zone)
}

OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithLong_withOrgJodaTimeDateTimeZone_(jlong instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeMutableDateTime, initWithLong_withOrgJodaTimeDateTimeZone_, instant, zone)
}

void OrgJodaTimeMutableDateTime_initWithLong_withOrgJodaTimeChronology_(OrgJodaTimeMutableDateTime *self, jlong instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseDateTime_initWithLong_withOrgJodaTimeChronology_(self, instant, chronology);
}

OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeMutableDateTime, initWithLong_withOrgJodaTimeChronology_, instant, chronology)
}

OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeMutableDateTime, initWithLong_withOrgJodaTimeChronology_, instant, chronology)
}

void OrgJodaTimeMutableDateTime_initWithId_(OrgJodaTimeMutableDateTime *self, id instant) {
  OrgJodaTimeBaseBaseDateTime_initWithId_withOrgJodaTimeChronology_(self, instant, nil);
}

OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithId_(id instant) {
  J2OBJC_NEW_IMPL(OrgJodaTimeMutableDateTime, initWithId_, instant)
}

OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithId_(id instant) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeMutableDateTime, initWithId_, instant)
}

void OrgJodaTimeMutableDateTime_initWithId_withOrgJodaTimeDateTimeZone_(OrgJodaTimeMutableDateTime *self, id instant, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeBaseBaseDateTime_initWithId_withOrgJodaTimeDateTimeZone_(self, instant, zone);
}

OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithId_withOrgJodaTimeDateTimeZone_(id instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeMutableDateTime, initWithId_withOrgJodaTimeDateTimeZone_, instant, zone)
}

OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithId_withOrgJodaTimeDateTimeZone_(id instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeMutableDateTime, initWithId_withOrgJodaTimeDateTimeZone_, instant, zone)
}

void OrgJodaTimeMutableDateTime_initWithId_withOrgJodaTimeChronology_(OrgJodaTimeMutableDateTime *self, id instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseDateTime_initWithId_withOrgJodaTimeChronology_(self, instant, OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology));
}

OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeMutableDateTime, initWithId_withOrgJodaTimeChronology_, instant, chronology)
}

OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeMutableDateTime, initWithId_withOrgJodaTimeChronology_, instant, chronology)
}

void OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(OrgJodaTimeMutableDateTime *self, jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) {
  OrgJodaTimeBaseBaseDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
}

OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) {
  J2OBJC_NEW_IMPL(OrgJodaTimeMutableDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond)
}

OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeMutableDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond)
}

void OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(OrgJodaTimeMutableDateTime *self, jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeBaseBaseDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, zone);
}

OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeMutableDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, zone)
}

OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeMutableDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, zone)
}

void OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeMutableDateTime *self, jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology);
}

OrgJodaTimeMutableDateTime *new_OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeMutableDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology)
}

OrgJodaTimeMutableDateTime *create_OrgJodaTimeMutableDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeMutableDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology)
}

IOSObjectArray *OrgJodaTimeMutableDateTime__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_OrgJodaConvertFromString() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeMutableDateTime)

@implementation OrgJodaTimeMutableDateTime_Property

- (instancetype)initWithOrgJodaTimeMutableDateTime:(OrgJodaTimeMutableDateTime *)instant
                      withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(self, instant, field);
  return self;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos {
  [((JavaIoObjectOutputStream *) nil_chk(oos)) writeObjectWithId:iInstant_];
  [oos writeObjectWithId:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getType]];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos {
  iInstant_ = (OrgJodaTimeMutableDateTime *) cast_chk([((JavaIoObjectInputStream *) nil_chk(oos)) readObject], [OrgJodaTimeMutableDateTime class]);
  OrgJodaTimeDateTimeFieldType *type = (OrgJodaTimeDateTimeFieldType *) cast_chk([oos readObject], [OrgJodaTimeDateTimeFieldType class]);
  iField_ = [((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getChronology]];
}

- (OrgJodaTimeDateTimeField *)getField {
  return iField_;
}

- (jlong)getMillis {
  return [((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis];
}

- (OrgJodaTimeChronology *)getChronology {
  return [((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getChronology];
}

- (OrgJodaTimeMutableDateTime *)getMutableDateTime {
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)addWithInt:(jint)value {
  [((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis] withInt:value]];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)addWithLong:(jlong)value {
  [((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis] withLong:value]];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)addWrapFieldWithInt:(jint)value {
  [((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWrapFieldWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis] withInt:value]];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)setWithInt:(jint)value {
  [((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis] withInt:value]];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)setWithNSString:(NSString *)text
                             withJavaUtilLocale:(JavaUtilLocale *)locale {
  [((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis] withNSString:text withJavaUtilLocale:locale]];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)setWithNSString:(NSString *)text {
  (void) [self setWithNSString:text withJavaUtilLocale:nil];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)roundFloor {
  [((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) roundFloorWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis]]];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)roundCeiling {
  [((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) roundCeilingWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis]]];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)roundHalfFloor {
  [((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) roundHalfFloorWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis]]];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)roundHalfCeiling {
  [((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) roundHalfCeilingWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis]]];
  return iInstant_;
}

- (OrgJodaTimeMutableDateTime *)roundHalfEven {
  [((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) setMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([self getField])) roundHalfEvenWithLong:[((OrgJodaTimeMutableDateTime *) nil_chk(iInstant_)) getMillis]]];
  return iInstant_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, 6, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime;", 0x1, 7, 9, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime;", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime;", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime;", 0x1, 11, 13, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMutableDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeMutableDateTime:withOrgJodaTimeDateTimeField:);
  methods[1].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[2].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[3].selector = @selector(getField);
  methods[4].selector = @selector(getMillis);
  methods[5].selector = @selector(getChronology);
  methods[6].selector = @selector(getMutableDateTime);
  methods[7].selector = @selector(addWithInt:);
  methods[8].selector = @selector(addWithLong:);
  methods[9].selector = @selector(addWrapFieldWithInt:);
  methods[10].selector = @selector(setWithInt:);
  methods[11].selector = @selector(setWithNSString:withJavaUtilLocale:);
  methods[12].selector = @selector(setWithNSString:);
  methods[13].selector = @selector(roundFloor);
  methods[14].selector = @selector(roundCeiling);
  methods[15].selector = @selector(roundHalfFloor);
  methods[16].selector = @selector(roundHalfCeiling);
  methods[17].selector = @selector(roundHalfEven);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeMutableDateTime_Property_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iInstant_", "LOrgJodaTimeMutableDateTime;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iField_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeMutableDateTime;LOrgJodaTimeDateTimeField;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "add", "I", "J", "addWrapField", "set", "LNSString;LJavaUtilLocale;", "LNSString;", "LOrgJodaTimeMutableDateTime;" };
  static const J2ObjcClassInfo _OrgJodaTimeMutableDateTime_Property = { "Property", "org.joda.time", ptrTable, methods, fields, 7, 0x19, 18, 3, 14, -1, -1, -1, -1 };
  return &_OrgJodaTimeMutableDateTime_Property;
}

@end

void OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeMutableDateTime_Property *self, OrgJodaTimeMutableDateTime *instant, OrgJodaTimeDateTimeField *field) {
  OrgJodaTimeFieldAbstractReadableInstantFieldProperty_init(self);
  self->iInstant_ = instant;
  self->iField_ = field;
}

OrgJodaTimeMutableDateTime_Property *new_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeMutableDateTime *instant, OrgJodaTimeDateTimeField *field) {
  J2OBJC_NEW_IMPL(OrgJodaTimeMutableDateTime_Property, initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_, instant, field)
}

OrgJodaTimeMutableDateTime_Property *create_OrgJodaTimeMutableDateTime_Property_initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeMutableDateTime *instant, OrgJodaTimeDateTimeField *field) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeMutableDateTime_Property, initWithOrgJodaTimeMutableDateTime_withOrgJodaTimeDateTimeField_, instant, field)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeMutableDateTime_Property)
