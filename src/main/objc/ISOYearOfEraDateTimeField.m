//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/chrono/ISOYearOfEraDateTimeField.java
//

#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DecoratedDateTimeField.h"
#include "DurationField.h"
#include "FieldUtils.h"
#include "GregorianChronology.h"
#include "IOSPrimitiveArray.h"
#include "ISOYearOfEraDateTimeField.h"
#include "J2ObjC_source.h"
#include "ReadablePartial.h"

@interface OrgJodaTimeChronoISOYearOfEraDateTimeField ()

- (instancetype)init;

- (id)readResolve;

@end

inline jlong OrgJodaTimeChronoISOYearOfEraDateTimeField_get_serialVersionUID();
#define OrgJodaTimeChronoISOYearOfEraDateTimeField_serialVersionUID 7037524068969447317LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoISOYearOfEraDateTimeField, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJodaTimeChronoISOYearOfEraDateTimeField_init(OrgJodaTimeChronoISOYearOfEraDateTimeField *self);

__attribute__((unused)) static OrgJodaTimeChronoISOYearOfEraDateTimeField *new_OrgJodaTimeChronoISOYearOfEraDateTimeField_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoISOYearOfEraDateTimeField *create_OrgJodaTimeChronoISOYearOfEraDateTimeField_init();

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeChronoISOYearOfEraDateTimeField)

OrgJodaTimeDateTimeField *OrgJodaTimeChronoISOYearOfEraDateTimeField_INSTANCE;

@implementation OrgJodaTimeChronoISOYearOfEraDateTimeField

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeChronoISOYearOfEraDateTimeField_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return [((OrgJodaTimeChronoGregorianChronology *) nil_chk(OrgJodaTimeChronoGregorianChronology_getInstanceUTC())) eras];
}

- (jint)getWithLong:(jlong)instant {
  jint year = [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getWithLong:instant];
  return year < 0 ? -year : year;
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)years {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWithLong:instant withInt:years];
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)years {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWithLong:instant withLong:years];
}

- (jlong)addWrapFieldWithLong:(jlong)instant
                      withInt:(jint)years {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWrapFieldWithLong:instant withInt:years];
}

- (IOSIntArray *)addWrapFieldWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant
                                                    withInt:(jint)fieldIndex
                                               withIntArray:(IOSIntArray *)values
                                                    withInt:(jint)years {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) addWrapFieldWithOrgJodaTimeReadablePartial:instant withInt:fieldIndex withIntArray:values withInt:years];
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
}

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)year {
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeField_withInt_withInt_withInt_(self, year, 0, [self getMaximumValue]);
  if ([((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getWithLong:instant] < 0) {
    year = -year;
  }
  return [super setWithLong:instant withInt:year];
}

- (jint)getMinimumValue {
  return 0;
}

- (jint)getMaximumValue {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) getMaximumValue];
}

- (jlong)roundFloorWithLong:(jlong)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundFloorWithLong:instant];
}

- (jlong)roundCeilingWithLong:(jlong)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) roundCeilingWithLong:instant];
}

- (jlong)remainderWithLong:(jlong)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getWrappedField])) remainderWithLong:instant];
}

- (id)readResolve {
  return OrgJodaTimeChronoISOYearOfEraDateTimeField_INSTANCE;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 9, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 11, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 12, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getRangeDurationField);
  methods[2].selector = @selector(getWithLong:);
  methods[3].selector = @selector(addWithLong:withInt:);
  methods[4].selector = @selector(addWithLong:withLong:);
  methods[5].selector = @selector(addWrapFieldWithLong:withInt:);
  methods[6].selector = @selector(addWrapFieldWithOrgJodaTimeReadablePartial:withInt:withIntArray:withInt:);
  methods[7].selector = @selector(getDifferenceWithLong:withLong:);
  methods[8].selector = @selector(getDifferenceAsLongWithLong:withLong:);
  methods[9].selector = @selector(setWithLong:withInt:);
  methods[10].selector = @selector(getMinimumValue);
  methods[11].selector = @selector(getMaximumValue);
  methods[12].selector = @selector(roundFloorWithLong:);
  methods[13].selector = @selector(roundCeilingWithLong:);
  methods[14].selector = @selector(remainderWithLong:);
  methods[15].selector = @selector(readResolve);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeChronoISOYearOfEraDateTimeField_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "INSTANCE", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x18, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "get", "J", "add", "JI", "JJ", "addWrapField", "LOrgJodaTimeReadablePartial;I[II", "getDifference", "getDifferenceAsLong", "set", "roundFloor", "roundCeiling", "remainder", &OrgJodaTimeChronoISOYearOfEraDateTimeField_INSTANCE };
  static const J2ObjcClassInfo _OrgJodaTimeChronoISOYearOfEraDateTimeField = { "ISOYearOfEraDateTimeField", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0x0, 16, 2, -1, -1, -1, -1, -1 };
  return &_OrgJodaTimeChronoISOYearOfEraDateTimeField;
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoISOYearOfEraDateTimeField class]) {
    OrgJodaTimeChronoISOYearOfEraDateTimeField_INSTANCE = new_OrgJodaTimeChronoISOYearOfEraDateTimeField_init();
    J2OBJC_SET_INITIALIZED(OrgJodaTimeChronoISOYearOfEraDateTimeField)
  }
}

@end

void OrgJodaTimeChronoISOYearOfEraDateTimeField_init(OrgJodaTimeChronoISOYearOfEraDateTimeField *self) {
  OrgJodaTimeFieldDecoratedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeFieldType_(self, [((OrgJodaTimeChronoGregorianChronology *) nil_chk(OrgJodaTimeChronoGregorianChronology_getInstanceUTC())) year], OrgJodaTimeDateTimeFieldType_yearOfEra());
}

OrgJodaTimeChronoISOYearOfEraDateTimeField *new_OrgJodaTimeChronoISOYearOfEraDateTimeField_init() {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoISOYearOfEraDateTimeField, init)
}

OrgJodaTimeChronoISOYearOfEraDateTimeField *create_OrgJodaTimeChronoISOYearOfEraDateTimeField_init() {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoISOYearOfEraDateTimeField, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoISOYearOfEraDateTimeField)
