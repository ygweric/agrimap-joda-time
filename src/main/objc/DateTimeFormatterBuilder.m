//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/format/DateTimeFormatterBuilder.java
//

#include "Chronology.h"
#include "DateTimeConstants.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormat.h"
#include "DateTimeFormatter.h"
#include "DateTimeFormatterBuilder.h"
#include "DateTimeParser.h"
#include "DateTimeParserBucket.h"
#include "DateTimeParserInternalParser.h"
#include "DateTimePrinter.h"
#include "DateTimePrinterInternalPrinter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "FormatUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "InternalParser.h"
#include "InternalParserDateTimeParser.h"
#include "InternalPrinter.h"
#include "InternalPrinterDateTimePrinter.h"
#include "J2ObjC_source.h"
#include "MillisDurationField.h"
#include "MutableDateTime.h"
#include "PreciseDateTimeField.h"
#include "ReadablePartial.h"
#include "java/lang/Appendable.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringIndexOutOfBoundsException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgJodaTimeFormatDateTimeFormatterBuilder () {
 @public
  JavaUtilArrayList *iElementPairs_;
  id iFormatter_;
}

- (void)checkParserWithOrgJodaTimeFormatDateTimeParser:(id<OrgJodaTimeFormatDateTimeParser>)parser;

- (void)checkPrinterWithOrgJodaTimeFormatDateTimePrinter:(id<OrgJodaTimeFormatDateTimePrinter>)printer;

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)append0WithId:(id)element;

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)append0WithOrgJodaTimeFormatInternalPrinter:(id<OrgJodaTimeFormatInternalPrinter>)printer
                                                       withOrgJodaTimeFormatInternalParser:(id<OrgJodaTimeFormatInternalParser>)parser;

- (id)getFormatter;

- (jboolean)isPrinterWithId:(id)f;

- (jboolean)isParserWithId:(id)f;

- (jboolean)isFormatterWithId:(id)f;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatterBuilder, iElementPairs_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatterBuilder, iFormatter_, id)

__attribute__((unused)) static void OrgJodaTimeFormatDateTimeFormatterBuilder_checkParserWithOrgJodaTimeFormatDateTimeParser_(OrgJodaTimeFormatDateTimeFormatterBuilder *self, id<OrgJodaTimeFormatDateTimeParser> parser);

__attribute__((unused)) static void OrgJodaTimeFormatDateTimeFormatterBuilder_checkPrinterWithOrgJodaTimeFormatDateTimePrinter_(OrgJodaTimeFormatDateTimeFormatterBuilder *self, id<OrgJodaTimeFormatDateTimePrinter> printer);

__attribute__((unused)) static OrgJodaTimeFormatDateTimeFormatterBuilder *OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithId_(OrgJodaTimeFormatDateTimeFormatterBuilder *self, id element);

__attribute__((unused)) static OrgJodaTimeFormatDateTimeFormatterBuilder *OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(OrgJodaTimeFormatDateTimeFormatterBuilder *self, id<OrgJodaTimeFormatInternalPrinter> printer, id<OrgJodaTimeFormatInternalParser> parser);

__attribute__((unused)) static id OrgJodaTimeFormatDateTimeFormatterBuilder_getFormatter(OrgJodaTimeFormatDateTimeFormatterBuilder *self);

__attribute__((unused)) static jboolean OrgJodaTimeFormatDateTimeFormatterBuilder_isPrinterWithId_(OrgJodaTimeFormatDateTimeFormatterBuilder *self, id f);

__attribute__((unused)) static jboolean OrgJodaTimeFormatDateTimeFormatterBuilder_isParserWithId_(OrgJodaTimeFormatDateTimeFormatterBuilder *self, id f);

__attribute__((unused)) static jboolean OrgJodaTimeFormatDateTimeFormatterBuilder_isFormatterWithId_(OrgJodaTimeFormatDateTimeFormatterBuilder *self, id f);

@interface OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral () {
 @public
  jchar iValue_;
}

@end

@interface OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral () {
 @public
  NSString *iValue_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral, iValue_, NSString *)

@interface OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear () {
 @public
  OrgJodaTimeDateTimeFieldType *iType_;
  jint iPivot_;
  jboolean iLenientParse_;
}

- (jint)getTwoDigitYearWithLong:(jlong)instant
      withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono;

- (jint)getTwoDigitYearWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear, iType_, OrgJodaTimeDateTimeFieldType *)

__attribute__((unused)) static jint OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear_getTwoDigitYearWithLong_withOrgJodaTimeChronology_(OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear *self, jlong instant, OrgJodaTimeChronology *chrono);

__attribute__((unused)) static jint OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear_getTwoDigitYearWithOrgJodaTimeReadablePartial_(OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear *self, id<OrgJodaTimeReadablePartial> partial);

@interface OrgJodaTimeFormatDateTimeFormatterBuilder_TextField () {
 @public
  OrgJodaTimeDateTimeFieldType *iFieldType_;
  jboolean iShort_;
}

- (NSString *)printWithLong:(jlong)instant
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
         withJavaUtilLocale:(JavaUtilLocale *)locale;

- (NSString *)printWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                               withJavaUtilLocale:(JavaUtilLocale *)locale;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatterBuilder_TextField, iFieldType_, OrgJodaTimeDateTimeFieldType *)

inline id<JavaUtilMap> OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_get_cParseCache();
inline id<JavaUtilMap> OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_set_cParseCache(id<JavaUtilMap> value);
static id<JavaUtilMap> OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_cParseCache;
J2OBJC_STATIC_FIELD_OBJ(OrgJodaTimeFormatDateTimeFormatterBuilder_TextField, cParseCache, id<JavaUtilMap>)

__attribute__((unused)) static NSString *OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_printWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_(OrgJodaTimeFormatDateTimeFormatterBuilder_TextField *self, jlong instant, OrgJodaTimeChronology *chrono, JavaUtilLocale *locale);

__attribute__((unused)) static NSString *OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_printWithOrgJodaTimeReadablePartial_withJavaUtilLocale_(OrgJodaTimeFormatDateTimeFormatterBuilder_TextField *self, id<OrgJodaTimeReadablePartial> partial, JavaUtilLocale *locale);

@interface OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction () {
 @public
  OrgJodaTimeDateTimeFieldType *iFieldType_;
}

- (IOSLongArray *)getFractionDataWithLong:(jlong)fraction
             withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction, iFieldType_, OrgJodaTimeDateTimeFieldType *)

__attribute__((unused)) static IOSLongArray *OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction_getFractionDataWithLong_withOrgJodaTimeDateTimeField_(OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction *self, jlong fraction, OrgJodaTimeDateTimeField *field);

@interface OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset () {
 @public
  NSString *iZeroOffsetPrintText_;
  NSString *iZeroOffsetParseText_;
  jboolean iShowSeparators_;
  jint iMinFields_;
  jint iMaxFields_;
}

- (jint)digitCountWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                   withInt:(jint)position
                                   withInt:(jint)amount;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset, iZeroOffsetPrintText_, NSString *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset, iZeroOffsetParseText_, NSString *)

__attribute__((unused)) static jint OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset_digitCountWithJavaLangCharSequence_withInt_withInt_(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset *self, id<JavaLangCharSequence> text, jint position, jint amount);

@interface OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName () {
 @public
  id<JavaUtilMap> iParseLookup_;
  jint iType_;
}

- (NSString *)printWithLong:(jlong)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
         withJavaUtilLocale:(JavaUtilLocale *)locale;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName, iParseLookup_, id<JavaUtilMap>)

__attribute__((unused)) static NSString *OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_printWithLong_withOrgJodaTimeDateTimeZone_withJavaUtilLocale_(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName *self, jlong instant, OrgJodaTimeDateTimeZone *displayZone, JavaUtilLocale *locale);

@interface OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId ()

+ (jint)prefixedStartPositionWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                              withInt:(jint)position;

@end

inline id<JavaUtilList> OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_get_ALL_IDS();
static id<JavaUtilList> OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_ALL_IDS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId, ALL_IDS, id<JavaUtilList>)

__attribute__((unused)) static jint OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_prefixedStartPositionWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> text, jint position);

__attribute__((unused)) static void OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_initWithNSString_withInt_(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId *new_OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface OrgJodaTimeFormatDateTimeFormatterBuilder_Composite () {
 @public
  IOSObjectArray *iPrinters_;
  IOSObjectArray *iParsers_;
  jint iPrintedLengthEstimate_;
  jint iParsedLengthEstimate_;
}

- (void)decomposeWithJavaUtilList:(id<JavaUtilList>)elementPairs
                 withJavaUtilList:(id<JavaUtilList>)printerList
                 withJavaUtilList:(id<JavaUtilList>)parserList;

- (void)addArrayToListWithJavaUtilList:(id<JavaUtilList>)list
                     withNSObjectArray:(IOSObjectArray *)array;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatterBuilder_Composite, iPrinters_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatterBuilder_Composite, iParsers_, IOSObjectArray *)

__attribute__((unused)) static void OrgJodaTimeFormatDateTimeFormatterBuilder_Composite_decomposeWithJavaUtilList_withJavaUtilList_withJavaUtilList_(OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *self, id<JavaUtilList> elementPairs, id<JavaUtilList> printerList, id<JavaUtilList> parserList);

__attribute__((unused)) static void OrgJodaTimeFormatDateTimeFormatterBuilder_Composite_addArrayToListWithJavaUtilList_withNSObjectArray_(OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *self, id<JavaUtilList> list, IOSObjectArray *array);

@interface OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser () {
 @public
  IOSObjectArray *iParsers_;
  jint iParsedLengthEstimate_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser, iParsers_, IOSObjectArray *)

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeFormatDateTimeFormatterBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgJodaTimeFormatDateTimeFormatter *)toFormatter {
  id f = OrgJodaTimeFormatDateTimeFormatterBuilder_getFormatter(self);
  id<OrgJodaTimeFormatInternalPrinter> printer = nil;
  if (OrgJodaTimeFormatDateTimeFormatterBuilder_isPrinterWithId_(self, f)) {
    printer = (id<OrgJodaTimeFormatInternalPrinter>) cast_check(f, OrgJodaTimeFormatInternalPrinter_class_());
  }
  id<OrgJodaTimeFormatInternalParser> parser = nil;
  if (OrgJodaTimeFormatDateTimeFormatterBuilder_isParserWithId_(self, f)) {
    parser = (id<OrgJodaTimeFormatInternalParser>) cast_check(f, OrgJodaTimeFormatInternalParser_class_());
  }
  if (printer != nil || parser != nil) {
    return new_OrgJodaTimeFormatDateTimeFormatter_initWithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(printer, parser);
  }
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Both printing and parsing not supported");
}

- (id<OrgJodaTimeFormatDateTimePrinter>)toPrinter {
  id f = OrgJodaTimeFormatDateTimeFormatterBuilder_getFormatter(self);
  if (OrgJodaTimeFormatDateTimeFormatterBuilder_isPrinterWithId_(self, f)) {
    id<OrgJodaTimeFormatInternalPrinter> ip = (id<OrgJodaTimeFormatInternalPrinter>) cast_check(f, OrgJodaTimeFormatInternalPrinter_class_());
    return OrgJodaTimeFormatInternalPrinterDateTimePrinter_ofWithOrgJodaTimeFormatInternalPrinter_(ip);
  }
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Printing is not supported");
}

- (id<OrgJodaTimeFormatDateTimeParser>)toParser {
  id f = OrgJodaTimeFormatDateTimeFormatterBuilder_getFormatter(self);
  if (OrgJodaTimeFormatDateTimeFormatterBuilder_isParserWithId_(self, f)) {
    id<OrgJodaTimeFormatInternalParser> ip = (id<OrgJodaTimeFormatInternalParser>) cast_check(f, OrgJodaTimeFormatInternalParser_class_());
    return OrgJodaTimeFormatInternalParserDateTimeParser_ofWithOrgJodaTimeFormatInternalParser_(ip);
  }
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Parsing is not supported");
}

- (jboolean)canBuildFormatter {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_isFormatterWithId_(self, OrgJodaTimeFormatDateTimeFormatterBuilder_getFormatter(self));
}

- (jboolean)canBuildPrinter {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_isPrinterWithId_(self, OrgJodaTimeFormatDateTimeFormatterBuilder_getFormatter(self));
}

- (jboolean)canBuildParser {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_isParserWithId_(self, OrgJodaTimeFormatDateTimeFormatterBuilder_getFormatter(self));
}

- (void)clear {
  iFormatter_ = nil;
  [((JavaUtilArrayList *) nil_chk(iElementPairs_)) clear];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendWithOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter {
  if (formatter == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No formatter supplied");
  }
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(self, [formatter getPrinter0], [formatter getParser0]);
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendWithOrgJodaTimeFormatDateTimePrinter:(id<OrgJodaTimeFormatDateTimePrinter>)printer {
  OrgJodaTimeFormatDateTimeFormatterBuilder_checkPrinterWithOrgJodaTimeFormatDateTimePrinter_(self, printer);
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(self, OrgJodaTimeFormatDateTimePrinterInternalPrinter_ofWithOrgJodaTimeFormatDateTimePrinter_(printer), nil);
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendWithOrgJodaTimeFormatDateTimeParser:(id<OrgJodaTimeFormatDateTimeParser>)parser {
  OrgJodaTimeFormatDateTimeFormatterBuilder_checkParserWithOrgJodaTimeFormatDateTimeParser_(self, parser);
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(self, nil, OrgJodaTimeFormatDateTimeParserInternalParser_ofWithOrgJodaTimeFormatDateTimeParser_(parser));
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendWithOrgJodaTimeFormatDateTimePrinter:(id<OrgJodaTimeFormatDateTimePrinter>)printer
                                                      withOrgJodaTimeFormatDateTimeParser:(id<OrgJodaTimeFormatDateTimeParser>)parser {
  OrgJodaTimeFormatDateTimeFormatterBuilder_checkPrinterWithOrgJodaTimeFormatDateTimePrinter_(self, printer);
  OrgJodaTimeFormatDateTimeFormatterBuilder_checkParserWithOrgJodaTimeFormatDateTimeParser_(self, parser);
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(self, OrgJodaTimeFormatDateTimePrinterInternalPrinter_ofWithOrgJodaTimeFormatDateTimePrinter_(printer), OrgJodaTimeFormatDateTimeParserInternalParser_ofWithOrgJodaTimeFormatDateTimeParser_(parser));
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendWithOrgJodaTimeFormatDateTimePrinter:(id<OrgJodaTimeFormatDateTimePrinter>)printer
                                                 withOrgJodaTimeFormatDateTimeParserArray:(IOSObjectArray *)parsers {
  if (printer != nil) {
    OrgJodaTimeFormatDateTimeFormatterBuilder_checkPrinterWithOrgJodaTimeFormatDateTimePrinter_(self, printer);
  }
  if (parsers == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No parsers supplied");
  }
  jint length = parsers->size_;
  if (length == 1) {
    if (IOSObjectArray_Get(parsers, 0) == nil) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No parser supplied");
    }
    return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(self, OrgJodaTimeFormatDateTimePrinterInternalPrinter_ofWithOrgJodaTimeFormatDateTimePrinter_(printer), OrgJodaTimeFormatDateTimeParserInternalParser_ofWithOrgJodaTimeFormatDateTimeParser_(IOSObjectArray_Get(parsers, 0)));
  }
  IOSObjectArray *copyOfParsers = [IOSObjectArray newArrayWithLength:length type:OrgJodaTimeFormatInternalParser_class_()];
  jint i;
  for (i = 0; i < length - 1; i++) {
    if ((IOSObjectArray_Set(copyOfParsers, i, OrgJodaTimeFormatDateTimeParserInternalParser_ofWithOrgJodaTimeFormatDateTimeParser_(IOSObjectArray_Get(parsers, i)))) == nil) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Incomplete parser array");
    }
  }
  (void) IOSObjectArray_Set(copyOfParsers, i, OrgJodaTimeFormatDateTimeParserInternalParser_ofWithOrgJodaTimeFormatDateTimeParser_(IOSObjectArray_Get(parsers, i)));
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(self, OrgJodaTimeFormatDateTimePrinterInternalPrinter_ofWithOrgJodaTimeFormatDateTimePrinter_(printer), new_OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser_initWithOrgJodaTimeFormatInternalParserArray_(copyOfParsers));
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendOptionalWithOrgJodaTimeFormatDateTimeParser:(id<OrgJodaTimeFormatDateTimeParser>)parser {
  OrgJodaTimeFormatDateTimeFormatterBuilder_checkParserWithOrgJodaTimeFormatDateTimeParser_(self, parser);
  IOSObjectArray *parsers = [IOSObjectArray newArrayWithObjects:(id[]){ OrgJodaTimeFormatDateTimeParserInternalParser_ofWithOrgJodaTimeFormatDateTimeParser_(parser), nil } count:2 type:OrgJodaTimeFormatInternalParser_class_()];
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(self, nil, new_OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser_initWithOrgJodaTimeFormatInternalParserArray_(parsers));
}

- (void)checkParserWithOrgJodaTimeFormatDateTimeParser:(id<OrgJodaTimeFormatDateTimeParser>)parser {
  OrgJodaTimeFormatDateTimeFormatterBuilder_checkParserWithOrgJodaTimeFormatDateTimeParser_(self, parser);
}

- (void)checkPrinterWithOrgJodaTimeFormatDateTimePrinter:(id<OrgJodaTimeFormatDateTimePrinter>)printer {
  OrgJodaTimeFormatDateTimeFormatterBuilder_checkPrinterWithOrgJodaTimeFormatDateTimePrinter_(self, printer);
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)append0WithId:(id)element {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithId_(self, element);
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)append0WithOrgJodaTimeFormatInternalPrinter:(id<OrgJodaTimeFormatInternalPrinter>)printer
                                                       withOrgJodaTimeFormatInternalParser:(id<OrgJodaTimeFormatInternalParser>)parser {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(self, printer, parser);
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendLiteralWithChar:(jchar)c {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithId_(self, new_OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral_initWithChar_(c));
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendLiteralWithNSString:(NSString *)text {
  if (text == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Literal must not be null");
  }
  switch (((jint) [text length])) {
    case 0:
    return self;
    case 1:
    return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithId_(self, new_OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral_initWithChar_([text charAtWithInt:0]));
    default:
    return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithId_(self, new_OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral_initWithNSString_(text));
  }
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendDecimalWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                                                     withInt:(jint)minDigits
                                                                                     withInt:(jint)maxDigits {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field type must not be null");
  }
  if (maxDigits < minDigits) {
    maxDigits = minDigits;
  }
  if (minDigits < 0 || maxDigits <= 0) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  if (minDigits <= 1) {
    return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithId_(self, new_OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(fieldType, maxDigits, false));
  }
  else {
    return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithId_(self, new_OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_withInt_(fieldType, maxDigits, false, minDigits));
  }
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendFixedDecimalWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                                                          withInt:(jint)numDigits {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field type must not be null");
  }
  if (numDigits <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Illegal number of digits: ", numDigits));
  }
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithId_(self, new_OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(fieldType, numDigits, false));
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendSignedDecimalWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                                                           withInt:(jint)minDigits
                                                                                           withInt:(jint)maxDigits {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field type must not be null");
  }
  if (maxDigits < minDigits) {
    maxDigits = minDigits;
  }
  if (minDigits < 0 || maxDigits <= 0) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  if (minDigits <= 1) {
    return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithId_(self, new_OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(fieldType, maxDigits, true));
  }
  else {
    return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithId_(self, new_OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_withInt_(fieldType, maxDigits, true, minDigits));
  }
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendFixedSignedDecimalWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                                                                withInt:(jint)numDigits {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field type must not be null");
  }
  if (numDigits <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Illegal number of digits: ", numDigits));
  }
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithId_(self, new_OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(fieldType, numDigits, true));
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTextWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field type must not be null");
  }
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithId_(self, new_OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_initWithOrgJodaTimeDateTimeFieldType_withBoolean_(fieldType, false));
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendShortTextWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field type must not be null");
  }
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithId_(self, new_OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_initWithOrgJodaTimeDateTimeFieldType_withBoolean_(fieldType, true));
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendFractionWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                                                      withInt:(jint)minDigits
                                                                                      withInt:(jint)maxDigits {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field type must not be null");
  }
  if (maxDigits < minDigits) {
    maxDigits = minDigits;
  }
  if (minDigits < 0 || maxDigits <= 0) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithId_(self, new_OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction_initWithOrgJodaTimeDateTimeFieldType_withInt_withInt_(fieldType, minDigits, maxDigits));
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendFractionOfSecondWithInt:(jint)minDigits
                                                                     withInt:(jint)maxDigits {
  return [self appendFractionWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_secondOfDay() withInt:minDigits withInt:maxDigits];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendFractionOfMinuteWithInt:(jint)minDigits
                                                                     withInt:(jint)maxDigits {
  return [self appendFractionWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_minuteOfDay() withInt:minDigits withInt:maxDigits];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendFractionOfHourWithInt:(jint)minDigits
                                                                   withInt:(jint)maxDigits {
  return [self appendFractionWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_hourOfDay() withInt:minDigits withInt:maxDigits];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendFractionOfDayWithInt:(jint)minDigits
                                                                  withInt:(jint)maxDigits {
  return [self appendFractionWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_dayOfYear() withInt:minDigits withInt:maxDigits];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendMillisOfSecondWithInt:(jint)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_millisOfSecond() withInt:minDigits withInt:3];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendMillisOfDayWithInt:(jint)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_millisOfDay() withInt:minDigits withInt:8];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendSecondOfMinuteWithInt:(jint)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_secondOfMinute() withInt:minDigits withInt:2];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendSecondOfDayWithInt:(jint)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_secondOfDay() withInt:minDigits withInt:5];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendMinuteOfHourWithInt:(jint)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_minuteOfHour() withInt:minDigits withInt:2];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendMinuteOfDayWithInt:(jint)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_minuteOfDay() withInt:minDigits withInt:4];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendHourOfDayWithInt:(jint)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_hourOfDay() withInt:minDigits withInt:2];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendClockhourOfDayWithInt:(jint)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_clockhourOfDay() withInt:minDigits withInt:2];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendHourOfHalfdayWithInt:(jint)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_hourOfHalfday() withInt:minDigits withInt:2];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendClockhourOfHalfdayWithInt:(jint)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_clockhourOfHalfday() withInt:minDigits withInt:2];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendDayOfWeekWithInt:(jint)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_dayOfWeek() withInt:minDigits withInt:1];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendDayOfMonthWithInt:(jint)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_dayOfMonth() withInt:minDigits withInt:2];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendDayOfYearWithInt:(jint)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_dayOfYear() withInt:minDigits withInt:3];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendWeekOfWeekyearWithInt:(jint)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_weekOfWeekyear() withInt:minDigits withInt:2];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendWeekyearWithInt:(jint)minDigits
                                                             withInt:(jint)maxDigits {
  return [self appendSignedDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_weekyear() withInt:minDigits withInt:maxDigits];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendMonthOfYearWithInt:(jint)minDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_monthOfYear() withInt:minDigits withInt:2];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendYearWithInt:(jint)minDigits
                                                         withInt:(jint)maxDigits {
  return [self appendSignedDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_year() withInt:minDigits withInt:maxDigits];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTwoDigitYearWithInt:(jint)pivot {
  return [self appendTwoDigitYearWithInt:pivot withBoolean:false];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTwoDigitYearWithInt:(jint)pivot
                                                             withBoolean:(jboolean)lenientParse {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithId_(self, new_OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(OrgJodaTimeDateTimeFieldType_year(), pivot, lenientParse));
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTwoDigitWeekyearWithInt:(jint)pivot {
  return [self appendTwoDigitWeekyearWithInt:pivot withBoolean:false];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTwoDigitWeekyearWithInt:(jint)pivot
                                                                 withBoolean:(jboolean)lenientParse {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithId_(self, new_OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(OrgJodaTimeDateTimeFieldType_weekyear(), pivot, lenientParse));
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendYearOfEraWithInt:(jint)minDigits
                                                              withInt:(jint)maxDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_yearOfEra() withInt:minDigits withInt:maxDigits];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendYearOfCenturyWithInt:(jint)minDigits
                                                                  withInt:(jint)maxDigits {
  return [self appendDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_yearOfCentury() withInt:minDigits withInt:maxDigits];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendCenturyOfEraWithInt:(jint)minDigits
                                                                 withInt:(jint)maxDigits {
  return [self appendSignedDecimalWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_centuryOfEra() withInt:minDigits withInt:maxDigits];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendHalfdayOfDayText {
  return [self appendTextWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_halfdayOfDay()];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendDayOfWeekText {
  return [self appendTextWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_dayOfWeek()];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendDayOfWeekShortText {
  return [self appendShortTextWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_dayOfWeek()];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendMonthOfYearText {
  return [self appendTextWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_monthOfYear()];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendMonthOfYearShortText {
  return [self appendShortTextWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_monthOfYear()];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendEraText {
  return [self appendTextWithOrgJodaTimeDateTimeFieldType:OrgJodaTimeDateTimeFieldType_era()];
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTimeZoneName {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(self, new_OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_initWithInt_withJavaUtilMap_(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_LONG_NAME, nil), nil);
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTimeZoneNameWithJavaUtilMap:(id<JavaUtilMap>)parseLookup {
  OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName *pp = new_OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_initWithInt_withJavaUtilMap_(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_LONG_NAME, parseLookup);
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(self, pp, pp);
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTimeZoneShortName {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(self, new_OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_initWithInt_withJavaUtilMap_(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_SHORT_NAME, nil), nil);
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTimeZoneShortNameWithJavaUtilMap:(id<JavaUtilMap>)parseLookup {
  OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName *pp = new_OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_initWithInt_withJavaUtilMap_(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_SHORT_NAME, parseLookup);
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(self, pp, pp);
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTimeZoneId {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(self, JreLoadEnum(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId, INSTANCE), JreLoadEnum(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId, INSTANCE));
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTimeZoneOffsetWithNSString:(NSString *)zeroOffsetText
                                                                    withBoolean:(jboolean)showSeparators
                                                                        withInt:(jint)minFields
                                                                        withInt:(jint)maxFields {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithId_(self, new_OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset_initWithNSString_withNSString_withBoolean_withInt_withInt_(zeroOffsetText, zeroOffsetText, showSeparators, minFields, maxFields));
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendTimeZoneOffsetWithNSString:(NSString *)zeroOffsetPrintText
                                                                   withNSString:(NSString *)zeroOffsetParseText
                                                                    withBoolean:(jboolean)showSeparators
                                                                        withInt:(jint)minFields
                                                                        withInt:(jint)maxFields {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithId_(self, new_OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset_initWithNSString_withNSString_withBoolean_withInt_withInt_(zeroOffsetPrintText, zeroOffsetParseText, showSeparators, minFields, maxFields));
}

- (OrgJodaTimeFormatDateTimeFormatterBuilder *)appendPatternWithNSString:(NSString *)pattern {
  OrgJodaTimeFormatDateTimeFormat_appendPatternToWithOrgJodaTimeFormatDateTimeFormatterBuilder_withNSString_(self, pattern);
  return self;
}

- (id)getFormatter {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_getFormatter(self);
}

- (jboolean)isPrinterWithId:(id)f {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_isPrinterWithId_(self, f);
}

- (jboolean)isParserWithId:(id)f {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_isParserWithId_(self, f);
}

- (jboolean)isFormatterWithId:(id)f {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_isFormatterWithId_(self, f);
}

+ (void)appendUnknownStringWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                                          withInt:(jint)len {
  OrgJodaTimeFormatDateTimeFormatterBuilder_appendUnknownStringWithJavaLangAppendable_withInt_(appendable, len);
}

+ (jint)csCompareWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                  withInt:(jint)position
                             withNSString:(NSString *)search {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_csCompareWithJavaLangCharSequence_withInt_withNSString_(text, position, search);
}

+ (jboolean)csStartsWithWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                         withInt:(jint)position
                                    withNSString:(NSString *)search {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_csStartsWithWithJavaLangCharSequence_withInt_withNSString_(text, position, search);
}

+ (jboolean)csStartsWithIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                   withInt:(jint)position
                                              withNSString:(NSString *)search {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_csStartsWithIgnoreCaseWithJavaLangCharSequence_withInt_withNSString_(text, position, search);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimePrinter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeParser;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 0, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 0, 4, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 0, 5, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x2, 9, 11, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 12, 14, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 19, 16, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 20, 18, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 23, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 24, 16, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 27, 26, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 28, 26, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 29, 26, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 32, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 33, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 34, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 35, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 36, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 37, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 38, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 39, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 40, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 41, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 42, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 43, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 44, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 45, 26, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 46, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 47, 26, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 48, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 48, 49, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 50, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 50, 49, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 51, 26, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 52, 26, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 53, 26, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 54, 55, -1, 56, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 57, 55, -1, 56, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 58, 59, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 58, 60, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", 0x1, 61, 14, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 62, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 63, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 64, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 65, 66, 67, -1, -1, -1 },
    { NULL, "I", 0x8, 68, 69, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 70, 69, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 71, 69, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(toFormatter);
  methods[2].selector = @selector(toPrinter);
  methods[3].selector = @selector(toParser);
  methods[4].selector = @selector(canBuildFormatter);
  methods[5].selector = @selector(canBuildPrinter);
  methods[6].selector = @selector(canBuildParser);
  methods[7].selector = @selector(clear);
  methods[8].selector = @selector(appendWithOrgJodaTimeFormatDateTimeFormatter:);
  methods[9].selector = @selector(appendWithOrgJodaTimeFormatDateTimePrinter:);
  methods[10].selector = @selector(appendWithOrgJodaTimeFormatDateTimeParser:);
  methods[11].selector = @selector(appendWithOrgJodaTimeFormatDateTimePrinter:withOrgJodaTimeFormatDateTimeParser:);
  methods[12].selector = @selector(appendWithOrgJodaTimeFormatDateTimePrinter:withOrgJodaTimeFormatDateTimeParserArray:);
  methods[13].selector = @selector(appendOptionalWithOrgJodaTimeFormatDateTimeParser:);
  methods[14].selector = @selector(checkParserWithOrgJodaTimeFormatDateTimeParser:);
  methods[15].selector = @selector(checkPrinterWithOrgJodaTimeFormatDateTimePrinter:);
  methods[16].selector = @selector(append0WithId:);
  methods[17].selector = @selector(append0WithOrgJodaTimeFormatInternalPrinter:withOrgJodaTimeFormatInternalParser:);
  methods[18].selector = @selector(appendLiteralWithChar:);
  methods[19].selector = @selector(appendLiteralWithNSString:);
  methods[20].selector = @selector(appendDecimalWithOrgJodaTimeDateTimeFieldType:withInt:withInt:);
  methods[21].selector = @selector(appendFixedDecimalWithOrgJodaTimeDateTimeFieldType:withInt:);
  methods[22].selector = @selector(appendSignedDecimalWithOrgJodaTimeDateTimeFieldType:withInt:withInt:);
  methods[23].selector = @selector(appendFixedSignedDecimalWithOrgJodaTimeDateTimeFieldType:withInt:);
  methods[24].selector = @selector(appendTextWithOrgJodaTimeDateTimeFieldType:);
  methods[25].selector = @selector(appendShortTextWithOrgJodaTimeDateTimeFieldType:);
  methods[26].selector = @selector(appendFractionWithOrgJodaTimeDateTimeFieldType:withInt:withInt:);
  methods[27].selector = @selector(appendFractionOfSecondWithInt:withInt:);
  methods[28].selector = @selector(appendFractionOfMinuteWithInt:withInt:);
  methods[29].selector = @selector(appendFractionOfHourWithInt:withInt:);
  methods[30].selector = @selector(appendFractionOfDayWithInt:withInt:);
  methods[31].selector = @selector(appendMillisOfSecondWithInt:);
  methods[32].selector = @selector(appendMillisOfDayWithInt:);
  methods[33].selector = @selector(appendSecondOfMinuteWithInt:);
  methods[34].selector = @selector(appendSecondOfDayWithInt:);
  methods[35].selector = @selector(appendMinuteOfHourWithInt:);
  methods[36].selector = @selector(appendMinuteOfDayWithInt:);
  methods[37].selector = @selector(appendHourOfDayWithInt:);
  methods[38].selector = @selector(appendClockhourOfDayWithInt:);
  methods[39].selector = @selector(appendHourOfHalfdayWithInt:);
  methods[40].selector = @selector(appendClockhourOfHalfdayWithInt:);
  methods[41].selector = @selector(appendDayOfWeekWithInt:);
  methods[42].selector = @selector(appendDayOfMonthWithInt:);
  methods[43].selector = @selector(appendDayOfYearWithInt:);
  methods[44].selector = @selector(appendWeekOfWeekyearWithInt:);
  methods[45].selector = @selector(appendWeekyearWithInt:withInt:);
  methods[46].selector = @selector(appendMonthOfYearWithInt:);
  methods[47].selector = @selector(appendYearWithInt:withInt:);
  methods[48].selector = @selector(appendTwoDigitYearWithInt:);
  methods[49].selector = @selector(appendTwoDigitYearWithInt:withBoolean:);
  methods[50].selector = @selector(appendTwoDigitWeekyearWithInt:);
  methods[51].selector = @selector(appendTwoDigitWeekyearWithInt:withBoolean:);
  methods[52].selector = @selector(appendYearOfEraWithInt:withInt:);
  methods[53].selector = @selector(appendYearOfCenturyWithInt:withInt:);
  methods[54].selector = @selector(appendCenturyOfEraWithInt:withInt:);
  methods[55].selector = @selector(appendHalfdayOfDayText);
  methods[56].selector = @selector(appendDayOfWeekText);
  methods[57].selector = @selector(appendDayOfWeekShortText);
  methods[58].selector = @selector(appendMonthOfYearText);
  methods[59].selector = @selector(appendMonthOfYearShortText);
  methods[60].selector = @selector(appendEraText);
  methods[61].selector = @selector(appendTimeZoneName);
  methods[62].selector = @selector(appendTimeZoneNameWithJavaUtilMap:);
  methods[63].selector = @selector(appendTimeZoneShortName);
  methods[64].selector = @selector(appendTimeZoneShortNameWithJavaUtilMap:);
  methods[65].selector = @selector(appendTimeZoneId);
  methods[66].selector = @selector(appendTimeZoneOffsetWithNSString:withBoolean:withInt:withInt:);
  methods[67].selector = @selector(appendTimeZoneOffsetWithNSString:withNSString:withBoolean:withInt:withInt:);
  methods[68].selector = @selector(appendPatternWithNSString:);
  methods[69].selector = @selector(getFormatter);
  methods[70].selector = @selector(isPrinterWithId:);
  methods[71].selector = @selector(isParserWithId:);
  methods[72].selector = @selector(isFormatterWithId:);
  methods[73].selector = @selector(appendUnknownStringWithJavaLangAppendable:withInt:);
  methods[74].selector = @selector(csCompareWithJavaLangCharSequence:withInt:withNSString:);
  methods[75].selector = @selector(csStartsWithWithJavaLangCharSequence:withInt:withNSString:);
  methods[76].selector = @selector(csStartsWithIgnoreCaseWithJavaLangCharSequence:withInt:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iElementPairs_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 72, -1 },
    { "iFormatter_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "append", "LOrgJodaTimeFormatDateTimeFormatter;", "LOrgJodaTimeFormatDateTimePrinter;", "LOrgJodaTimeFormatDateTimeParser;", "LOrgJodaTimeFormatDateTimePrinter;LOrgJodaTimeFormatDateTimeParser;", "LOrgJodaTimeFormatDateTimePrinter;[LOrgJodaTimeFormatDateTimeParser;", "appendOptional", "checkParser", "checkPrinter", "append0", "LNSObject;", "LOrgJodaTimeFormatInternalPrinter;LOrgJodaTimeFormatInternalParser;", "appendLiteral", "C", "LNSString;", "appendDecimal", "LOrgJodaTimeDateTimeFieldType;II", "appendFixedDecimal", "LOrgJodaTimeDateTimeFieldType;I", "appendSignedDecimal", "appendFixedSignedDecimal", "appendText", "LOrgJodaTimeDateTimeFieldType;", "appendShortText", "appendFraction", "appendFractionOfSecond", "II", "appendFractionOfMinute", "appendFractionOfHour", "appendFractionOfDay", "appendMillisOfSecond", "I", "appendMillisOfDay", "appendSecondOfMinute", "appendSecondOfDay", "appendMinuteOfHour", "appendMinuteOfDay", "appendHourOfDay", "appendClockhourOfDay", "appendHourOfHalfday", "appendClockhourOfHalfday", "appendDayOfWeek", "appendDayOfMonth", "appendDayOfYear", "appendWeekOfWeekyear", "appendWeekyear", "appendMonthOfYear", "appendYear", "appendTwoDigitYear", "IZ", "appendTwoDigitWeekyear", "appendYearOfEra", "appendYearOfCentury", "appendCenturyOfEra", "appendTimeZoneName", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Lorg/joda/time/DateTimeZone;>;)Lorg/joda/time/format/DateTimeFormatterBuilder;", "appendTimeZoneShortName", "appendTimeZoneOffset", "LNSString;ZII", "LNSString;LNSString;ZII", "appendPattern", "isPrinter", "isParser", "isFormatter", "appendUnknownString", "LJavaLangAppendable;I", "LJavaIoIOException;", "csCompare", "LJavaLangCharSequence;ILNSString;", "csStartsWith", "csStartsWithIgnoreCase", "Ljava/util/ArrayList<Ljava/lang/Object;>;", "LOrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral;LOrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral;LOrgJodaTimeFormatDateTimeFormatterBuilder_NumberFormatter;LOrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber;LOrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber;LOrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber;LOrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear;LOrgJodaTimeFormatDateTimeFormatterBuilder_TextField;LOrgJodaTimeFormatDateTimeFormatterBuilder_Fraction;LOrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset;LOrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName;LOrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId;LOrgJodaTimeFormatDateTimeFormatterBuilder_Composite;LOrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser;" };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder = { "DateTimeFormatterBuilder", "org.joda.time.format", ptrTable, methods, fields, 7, 0x1, 77, 2, -1, 73, -1, -1, -1 };
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder;
}

@end

void OrgJodaTimeFormatDateTimeFormatterBuilder_init(OrgJodaTimeFormatDateTimeFormatterBuilder *self) {
  NSObject_init(self);
  self->iElementPairs_ = new_JavaUtilArrayList_init();
}

OrgJodaTimeFormatDateTimeFormatterBuilder *new_OrgJodaTimeFormatDateTimeFormatterBuilder_init() {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder, init)
}

OrgJodaTimeFormatDateTimeFormatterBuilder *create_OrgJodaTimeFormatDateTimeFormatterBuilder_init() {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder, init)
}

void OrgJodaTimeFormatDateTimeFormatterBuilder_checkParserWithOrgJodaTimeFormatDateTimeParser_(OrgJodaTimeFormatDateTimeFormatterBuilder *self, id<OrgJodaTimeFormatDateTimeParser> parser) {
  if (parser == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No parser supplied");
  }
}

void OrgJodaTimeFormatDateTimeFormatterBuilder_checkPrinterWithOrgJodaTimeFormatDateTimePrinter_(OrgJodaTimeFormatDateTimeFormatterBuilder *self, id<OrgJodaTimeFormatDateTimePrinter> printer) {
  if (printer == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No printer supplied");
  }
}

OrgJodaTimeFormatDateTimeFormatterBuilder *OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithId_(OrgJodaTimeFormatDateTimeFormatterBuilder *self, id element) {
  self->iFormatter_ = nil;
  [((JavaUtilArrayList *) nil_chk(self->iElementPairs_)) addWithId:element];
  [((JavaUtilArrayList *) nil_chk(self->iElementPairs_)) addWithId:element];
  return self;
}

OrgJodaTimeFormatDateTimeFormatterBuilder *OrgJodaTimeFormatDateTimeFormatterBuilder_append0WithOrgJodaTimeFormatInternalPrinter_withOrgJodaTimeFormatInternalParser_(OrgJodaTimeFormatDateTimeFormatterBuilder *self, id<OrgJodaTimeFormatInternalPrinter> printer, id<OrgJodaTimeFormatInternalParser> parser) {
  self->iFormatter_ = nil;
  [((JavaUtilArrayList *) nil_chk(self->iElementPairs_)) addWithId:printer];
  [((JavaUtilArrayList *) nil_chk(self->iElementPairs_)) addWithId:parser];
  return self;
}

id OrgJodaTimeFormatDateTimeFormatterBuilder_getFormatter(OrgJodaTimeFormatDateTimeFormatterBuilder *self) {
  id f = self->iFormatter_;
  if (f == nil) {
    if ([((JavaUtilArrayList *) nil_chk(self->iElementPairs_)) size] == 2) {
      id printer = [((JavaUtilArrayList *) nil_chk(self->iElementPairs_)) getWithInt:0];
      id parser = [((JavaUtilArrayList *) nil_chk(self->iElementPairs_)) getWithInt:1];
      if (printer != nil) {
        if (printer == parser || parser == nil) {
          f = printer;
        }
      }
      else {
        f = parser;
      }
    }
    if (f == nil) {
      f = new_OrgJodaTimeFormatDateTimeFormatterBuilder_Composite_initWithJavaUtilList_(self->iElementPairs_);
    }
    self->iFormatter_ = f;
  }
  return f;
}

jboolean OrgJodaTimeFormatDateTimeFormatterBuilder_isPrinterWithId_(OrgJodaTimeFormatDateTimeFormatterBuilder *self, id f) {
  if ([OrgJodaTimeFormatInternalPrinter_class_() isInstance:f]) {
    if ([f isKindOfClass:[OrgJodaTimeFormatDateTimeFormatterBuilder_Composite class]]) {
      return [((OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *) nil_chk(((OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *) cast_chk(f, [OrgJodaTimeFormatDateTimeFormatterBuilder_Composite class])))) isPrinter];
    }
    return true;
  }
  return false;
}

jboolean OrgJodaTimeFormatDateTimeFormatterBuilder_isParserWithId_(OrgJodaTimeFormatDateTimeFormatterBuilder *self, id f) {
  if ([OrgJodaTimeFormatInternalParser_class_() isInstance:f]) {
    if ([f isKindOfClass:[OrgJodaTimeFormatDateTimeFormatterBuilder_Composite class]]) {
      return [((OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *) nil_chk(((OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *) cast_chk(f, [OrgJodaTimeFormatDateTimeFormatterBuilder_Composite class])))) isParser];
    }
    return true;
  }
  return false;
}

jboolean OrgJodaTimeFormatDateTimeFormatterBuilder_isFormatterWithId_(OrgJodaTimeFormatDateTimeFormatterBuilder *self, id f) {
  return (OrgJodaTimeFormatDateTimeFormatterBuilder_isPrinterWithId_(self, f) || OrgJodaTimeFormatDateTimeFormatterBuilder_isParserWithId_(self, f));
}

void OrgJodaTimeFormatDateTimeFormatterBuilder_appendUnknownStringWithJavaLangAppendable_withInt_(id<JavaLangAppendable> appendable, jint len) {
  OrgJodaTimeFormatDateTimeFormatterBuilder_initialize();
  for (jint i = len; --i >= 0; ) {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:0xfffd];
  }
}

jint OrgJodaTimeFormatDateTimeFormatterBuilder_csCompareWithJavaLangCharSequence_withInt_withNSString_(id<JavaLangCharSequence> text, jint position, NSString *search) {
  OrgJodaTimeFormatDateTimeFormatterBuilder_initialize();
  jint matchLen = [((id<JavaLangCharSequence>) nil_chk(text)) length] - position;
  jint searchLen = ((jint) [((NSString *) nil_chk(search)) length]);
  jint compareLen = JavaLangMath_minWithInt_withInt_(matchLen, searchLen);
  for (jint i = 0; i < compareLen; i++) {
    jint result = [search charAtWithInt:i] - [text charAtWithInt:position + i];
    if (result != 0) {
      return result;
    }
  }
  return searchLen - matchLen;
}

jboolean OrgJodaTimeFormatDateTimeFormatterBuilder_csStartsWithWithJavaLangCharSequence_withInt_withNSString_(id<JavaLangCharSequence> text, jint position, NSString *search) {
  OrgJodaTimeFormatDateTimeFormatterBuilder_initialize();
  jint searchLen = ((jint) [((NSString *) nil_chk(search)) length]);
  if (([((id<JavaLangCharSequence>) nil_chk(text)) length] - position) < searchLen) {
    return false;
  }
  for (jint i = 0; i < searchLen; i++) {
    if ([text charAtWithInt:position + i] != [search charAtWithInt:i]) {
      return false;
    }
  }
  return true;
}

jboolean OrgJodaTimeFormatDateTimeFormatterBuilder_csStartsWithIgnoreCaseWithJavaLangCharSequence_withInt_withNSString_(id<JavaLangCharSequence> text, jint position, NSString *search) {
  OrgJodaTimeFormatDateTimeFormatterBuilder_initialize();
  jint searchLen = ((jint) [((NSString *) nil_chk(search)) length]);
  if (([((id<JavaLangCharSequence>) nil_chk(text)) length] - position) < searchLen) {
    return false;
  }
  for (jint i = 0; i < searchLen; i++) {
    jchar ch1 = [text charAtWithInt:position + i];
    jchar ch2 = [search charAtWithInt:i];
    if (ch1 != ch2) {
      jchar u1 = JavaLangCharacter_toUpperCaseWithChar_(ch1);
      jchar u2 = JavaLangCharacter_toUpperCaseWithChar_(ch2);
      if (u1 != u2 && JavaLangCharacter_toLowerCaseWithChar_(u1) != JavaLangCharacter_toLowerCaseWithChar_(u2)) {
        return false;
      }
    }
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormatterBuilder)

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral

- (instancetype)initWithChar:(jchar)value {
  OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral_initWithChar_(self, value);
  return self;
}

- (jint)estimatePrintedLength {
  return 1;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(jint)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:iValue_];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:iValue_];
}

- (jint)estimateParsedLength {
  return 1;
}

- (jint)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                   withInt:(jint)position {
  if (position >= [((id<JavaLangCharSequence>) nil_chk(text)) length]) {
    return ~position;
  }
  jchar a = [text charAtWithInt:position];
  jchar b = iValue_;
  if (a != b) {
    a = JavaLangCharacter_toUpperCaseWithChar_(a);
    b = JavaLangCharacter_toUpperCaseWithChar_(b);
    if (a != b) {
      a = JavaLangCharacter_toLowerCaseWithChar_(a);
      b = JavaLangCharacter_toLowerCaseWithChar_(b);
      if (a != b) {
        return ~position;
      }
    }
  }
  return position + 1;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithChar:);
  methods[1].selector = @selector(estimatePrintedLength);
  methods[2].selector = @selector(printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:);
  methods[3].selector = @selector(printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:);
  methods[4].selector = @selector(estimateParsedLength);
  methods[5].selector = @selector(parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iValue_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "C", "printTo", "LJavaLangAppendable;JLOrgJodaTimeChronology;ILOrgJodaTimeDateTimeZone;LJavaUtilLocale;", "LJavaIoIOException;", "LJavaLangAppendable;LOrgJodaTimeReadablePartial;LJavaUtilLocale;", "parseInto", "LOrgJodaTimeFormatDateTimeParserBucket;LJavaLangCharSequence;I", "LOrgJodaTimeFormatDateTimeFormatterBuilder;" };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral = { "CharacterLiteral", "org.joda.time.format", ptrTable, methods, fields, 7, 0x8, 6, 1, 7, -1, -1, -1, -1 };
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral;
}

@end

void OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral_initWithChar_(OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral *self, jchar value) {
  NSObject_init(self);
  self->iValue_ = value;
}

OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral *new_OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral_initWithChar_(jchar value) {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral, initWithChar_, value)
}

OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral *create_OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral_initWithChar_(jchar value) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral, initWithChar_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormatterBuilder_CharacterLiteral)

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral

- (instancetype)initWithNSString:(NSString *)value {
  OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral_initWithNSString_(self, value);
  return self;
}

- (jint)estimatePrintedLength {
  return ((jint) [((NSString *) nil_chk(iValue_)) length]);
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(jint)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithJavaLangCharSequence:iValue_];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithJavaLangCharSequence:iValue_];
}

- (jint)estimateParsedLength {
  return ((jint) [((NSString *) nil_chk(iValue_)) length]);
}

- (jint)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                   withInt:(jint)position {
  if (OrgJodaTimeFormatDateTimeFormatterBuilder_csStartsWithIgnoreCaseWithJavaLangCharSequence_withInt_withNSString_(text, position, iValue_)) {
    return position + ((jint) [((NSString *) nil_chk(iValue_)) length]);
  }
  return ~position;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(estimatePrintedLength);
  methods[2].selector = @selector(printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:);
  methods[3].selector = @selector(printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:);
  methods[4].selector = @selector(estimateParsedLength);
  methods[5].selector = @selector(parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iValue_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "printTo", "LJavaLangAppendable;JLOrgJodaTimeChronology;ILOrgJodaTimeDateTimeZone;LJavaUtilLocale;", "LJavaIoIOException;", "LJavaLangAppendable;LOrgJodaTimeReadablePartial;LJavaUtilLocale;", "parseInto", "LOrgJodaTimeFormatDateTimeParserBucket;LJavaLangCharSequence;I", "LOrgJodaTimeFormatDateTimeFormatterBuilder;" };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral = { "StringLiteral", "org.joda.time.format", ptrTable, methods, fields, 7, 0x8, 6, 1, 7, -1, -1, -1, -1 };
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral;
}

@end

void OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral_initWithNSString_(OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral *self, NSString *value) {
  NSObject_init(self);
  self->iValue_ = value;
}

OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral *new_OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral_initWithNSString_(NSString *value) {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral, initWithNSString_, value)
}

OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral *create_OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral_initWithNSString_(NSString *value) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral, initWithNSString_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormatterBuilder_StringLiteral)

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_NumberFormatter

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                             withInt:(jint)maxParsedDigits
                                         withBoolean:(jboolean)signed_ {
  OrgJodaTimeFormatDateTimeFormatterBuilder_NumberFormatter_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(self, fieldType, maxParsedDigits, signed_);
  return self;
}

- (jint)estimateParsedLength {
  return iMaxParsedDigits_;
}

- (jint)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                   withInt:(jint)position {
  jint limit = JavaLangMath_minWithInt_withInt_(iMaxParsedDigits_, [((id<JavaLangCharSequence>) nil_chk(text)) length] - position);
  jboolean negative = false;
  jboolean positive = false;
  jint length = 0;
  while (length < limit) {
    jchar c = [text charAtWithInt:position + length];
    if (length == 0 && (c == '-' || c == '+') && iSigned_) {
      negative = (c == '-');
      positive = (c == '+');
      if (length + 1 >= limit || (c = [text charAtWithInt:position + length + 1]) < '0' || c > '9') {
        break;
      }
      length++;
      limit = JavaLangMath_minWithInt_withInt_(limit + 1, [text length] - position);
      continue;
    }
    if (c < '0' || c > '9') {
      break;
    }
    length++;
  }
  if (length == 0) {
    return ~position;
  }
  jint value;
  if (length >= 9) {
    if (positive) {
      jint unseq$1 = position;
      value = JavaLangInteger_parseIntWithNSString_([((id<JavaLangCharSequence>) nil_chk([text subSequenceFrom:unseq$1 + 1 to:position += length])) description]);
    }
    else {
      jint unseq$2 = position;
      value = JavaLangInteger_parseIntWithNSString_([((id<JavaLangCharSequence>) nil_chk([text subSequenceFrom:unseq$2 to:position += length])) description]);
    }
  }
  else {
    jint i = position;
    if (negative || positive) {
      i++;
    }
    @try {
      value = [text charAtWithInt:i++] - '0';
    }
    @catch (JavaLangStringIndexOutOfBoundsException *e) {
      return ~position;
    }
    position += length;
    while (i < position) {
      value = ((JreLShift32(value, 3)) + (JreLShift32(value, 1))) + [text charAtWithInt:i++] - '0';
    }
    if (negative) {
      value = -value;
    }
  }
  [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) saveFieldWithOrgJodaTimeDateTimeFieldType:iFieldType_ withInt:value];
  return position;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeDateTimeFieldType:withInt:withBoolean:);
  methods[1].selector = @selector(estimateParsedLength);
  methods[2].selector = @selector(parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iFieldType_", "LOrgJodaTimeDateTimeFieldType;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "iMaxParsedDigits_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "iSigned_", "Z", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeDateTimeFieldType;IZ", "parseInto", "LOrgJodaTimeFormatDateTimeParserBucket;LJavaLangCharSequence;I", "LOrgJodaTimeFormatDateTimeFormatterBuilder;" };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_NumberFormatter = { "NumberFormatter", "org.joda.time.format", ptrTable, methods, fields, 7, 0x408, 3, 3, 3, -1, -1, -1, -1 };
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_NumberFormatter;
}

@end

void OrgJodaTimeFormatDateTimeFormatterBuilder_NumberFormatter_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(OrgJodaTimeFormatDateTimeFormatterBuilder_NumberFormatter *self, OrgJodaTimeDateTimeFieldType *fieldType, jint maxParsedDigits, jboolean signed_) {
  NSObject_init(self);
  self->iFieldType_ = fieldType;
  self->iMaxParsedDigits_ = maxParsedDigits;
  self->iSigned_ = signed_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormatterBuilder_NumberFormatter)

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                             withInt:(jint)maxParsedDigits
                                         withBoolean:(jboolean)signed_ {
  OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(self, fieldType, maxParsedDigits, signed_);
  return self;
}

- (jint)estimatePrintedLength {
  return iMaxParsedDigits_;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(jint)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  @try {
    OrgJodaTimeDateTimeField *field = [((OrgJodaTimeDateTimeFieldType *) nil_chk(iFieldType_)) getFieldWithOrgJodaTimeChronology:chrono];
    OrgJodaTimeFormatFormatUtils_appendUnpaddedIntegerWithJavaLangAppendable_withInt_(appendable, [((OrgJodaTimeDateTimeField *) nil_chk(field)) getWithLong:instant]);
  }
  @catch (JavaLangRuntimeException *e) {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:0xfffd];
  }
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  if ([((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) isSupportedWithOrgJodaTimeDateTimeFieldType:iFieldType_]) {
    @try {
      OrgJodaTimeFormatFormatUtils_appendUnpaddedIntegerWithJavaLangAppendable_withInt_(appendable, [partial getWithOrgJodaTimeDateTimeFieldType:iFieldType_]);
    }
    @catch (JavaLangRuntimeException *e) {
      (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:0xfffd];
    }
  }
  else {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:0xfffd];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeDateTimeFieldType:withInt:withBoolean:);
  methods[1].selector = @selector(estimatePrintedLength);
  methods[2].selector = @selector(printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:);
  methods[3].selector = @selector(printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgJodaTimeDateTimeFieldType;IZ", "printTo", "LJavaLangAppendable;JLOrgJodaTimeChronology;ILOrgJodaTimeDateTimeZone;LJavaUtilLocale;", "LJavaIoIOException;", "LJavaLangAppendable;LOrgJodaTimeReadablePartial;LJavaUtilLocale;", "LOrgJodaTimeFormatDateTimeFormatterBuilder;" };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber = { "UnpaddedNumber", "org.joda.time.format", ptrTable, methods, NULL, 7, 0x8, 4, 0, 5, -1, -1, -1, -1 };
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber;
}

@end

void OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber *self, OrgJodaTimeDateTimeFieldType *fieldType, jint maxParsedDigits, jboolean signed_) {
  OrgJodaTimeFormatDateTimeFormatterBuilder_NumberFormatter_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(self, fieldType, maxParsedDigits, signed_);
}

OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber *new_OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(OrgJodaTimeDateTimeFieldType *fieldType, jint maxParsedDigits, jboolean signed_) {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber, initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_, fieldType, maxParsedDigits, signed_)
}

OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber *create_OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(OrgJodaTimeDateTimeFieldType *fieldType, jint maxParsedDigits, jboolean signed_) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber, initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_, fieldType, maxParsedDigits, signed_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormatterBuilder_UnpaddedNumber)

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                             withInt:(jint)maxParsedDigits
                                         withBoolean:(jboolean)signed_
                                             withInt:(jint)minPrintedDigits {
  OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_withInt_(self, fieldType, maxParsedDigits, signed_, minPrintedDigits);
  return self;
}

- (jint)estimatePrintedLength {
  return iMaxParsedDigits_;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(jint)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  @try {
    OrgJodaTimeDateTimeField *field = [((OrgJodaTimeDateTimeFieldType *) nil_chk(iFieldType_)) getFieldWithOrgJodaTimeChronology:chrono];
    OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangAppendable_withInt_withInt_(appendable, [((OrgJodaTimeDateTimeField *) nil_chk(field)) getWithLong:instant], iMinPrintedDigits_);
  }
  @catch (JavaLangRuntimeException *e) {
    OrgJodaTimeFormatDateTimeFormatterBuilder_appendUnknownStringWithJavaLangAppendable_withInt_(appendable, iMinPrintedDigits_);
  }
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  if ([((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) isSupportedWithOrgJodaTimeDateTimeFieldType:iFieldType_]) {
    @try {
      OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangAppendable_withInt_withInt_(appendable, [partial getWithOrgJodaTimeDateTimeFieldType:iFieldType_], iMinPrintedDigits_);
    }
    @catch (JavaLangRuntimeException *e) {
      OrgJodaTimeFormatDateTimeFormatterBuilder_appendUnknownStringWithJavaLangAppendable_withInt_(appendable, iMinPrintedDigits_);
    }
  }
  else {
    OrgJodaTimeFormatDateTimeFormatterBuilder_appendUnknownStringWithJavaLangAppendable_withInt_(appendable, iMinPrintedDigits_);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeDateTimeFieldType:withInt:withBoolean:withInt:);
  methods[1].selector = @selector(estimatePrintedLength);
  methods[2].selector = @selector(printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:);
  methods[3].selector = @selector(printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iMinPrintedDigits_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeDateTimeFieldType;IZI", "printTo", "LJavaLangAppendable;JLOrgJodaTimeChronology;ILOrgJodaTimeDateTimeZone;LJavaUtilLocale;", "LJavaIoIOException;", "LJavaLangAppendable;LOrgJodaTimeReadablePartial;LJavaUtilLocale;", "LOrgJodaTimeFormatDateTimeFormatterBuilder;" };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber = { "PaddedNumber", "org.joda.time.format", ptrTable, methods, fields, 7, 0x8, 4, 1, 5, -1, -1, -1, -1 };
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber;
}

@end

void OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_withInt_(OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber *self, OrgJodaTimeDateTimeFieldType *fieldType, jint maxParsedDigits, jboolean signed_, jint minPrintedDigits) {
  OrgJodaTimeFormatDateTimeFormatterBuilder_NumberFormatter_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(self, fieldType, maxParsedDigits, signed_);
  self->iMinPrintedDigits_ = minPrintedDigits;
}

OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber *new_OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_withInt_(OrgJodaTimeDateTimeFieldType *fieldType, jint maxParsedDigits, jboolean signed_, jint minPrintedDigits) {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber, initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_withInt_, fieldType, maxParsedDigits, signed_, minPrintedDigits)
}

OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber *create_OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_withInt_(OrgJodaTimeDateTimeFieldType *fieldType, jint maxParsedDigits, jboolean signed_, jint minPrintedDigits) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber, initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_withInt_, fieldType, maxParsedDigits, signed_, minPrintedDigits)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber)

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                             withInt:(jint)numDigits
                                         withBoolean:(jboolean)signed_ {
  OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(self, fieldType, numDigits, signed_);
  return self;
}

- (jint)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                   withInt:(jint)position {
  jint newPos = [super parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:position];
  if (newPos < 0) {
    return newPos;
  }
  jint expectedPos = position + iMaxParsedDigits_;
  if (newPos != expectedPos) {
    if (iSigned_) {
      jchar c = [((id<JavaLangCharSequence>) nil_chk(text)) charAtWithInt:position];
      if (c == '-' || c == '+') {
        expectedPos++;
      }
    }
    if (newPos > expectedPos) {
      return ~(expectedPos + 1);
    }
    else if (newPos < expectedPos) {
      return ~newPos;
    }
  }
  return newPos;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeDateTimeFieldType:withInt:withBoolean:);
  methods[1].selector = @selector(parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgJodaTimeDateTimeFieldType;IZ", "parseInto", "LOrgJodaTimeFormatDateTimeParserBucket;LJavaLangCharSequence;I", "LOrgJodaTimeFormatDateTimeFormatterBuilder;" };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber = { "FixedNumber", "org.joda.time.format", ptrTable, methods, NULL, 7, 0x8, 2, 0, 3, -1, -1, -1, -1 };
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber;
}

@end

void OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber *self, OrgJodaTimeDateTimeFieldType *fieldType, jint numDigits, jboolean signed_) {
  OrgJodaTimeFormatDateTimeFormatterBuilder_PaddedNumber_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_withInt_(self, fieldType, numDigits, signed_, numDigits);
}

OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber *new_OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(OrgJodaTimeDateTimeFieldType *fieldType, jint numDigits, jboolean signed_) {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber, initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_, fieldType, numDigits, signed_)
}

OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber *create_OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(OrgJodaTimeDateTimeFieldType *fieldType, jint numDigits, jboolean signed_) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber, initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_, fieldType, numDigits, signed_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormatterBuilder_FixedNumber)

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                             withInt:(jint)pivot
                                         withBoolean:(jboolean)lenientParse {
  OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(self, type, pivot, lenientParse);
  return self;
}

- (jint)estimateParsedLength {
  return iLenientParse_ ? 4 : 2;
}

- (jint)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                   withInt:(jint)position {
  jint limit = [((id<JavaLangCharSequence>) nil_chk(text)) length] - position;
  if (!iLenientParse_) {
    limit = JavaLangMath_minWithInt_withInt_(2, limit);
    if (limit < 2) {
      return ~position;
    }
  }
  else {
    jboolean hasSignChar = false;
    jboolean negative = false;
    jint length = 0;
    while (length < limit) {
      jchar c = [text charAtWithInt:position + length];
      if (length == 0 && (c == '-' || c == '+')) {
        hasSignChar = true;
        negative = (c == '-');
        if (negative) {
          length++;
        }
        else {
          position++;
          limit--;
        }
        continue;
      }
      if (c < '0' || c > '9') {
        break;
      }
      length++;
    }
    if (length == 0) {
      return ~position;
    }
    if (hasSignChar || length != 2) {
      jint value;
      if (length >= 9) {
        jint unseq$1 = position;
        value = JavaLangInteger_parseIntWithNSString_([((id<JavaLangCharSequence>) nil_chk([text subSequenceFrom:unseq$1 to:position += length])) description]);
      }
      else {
        jint i = position;
        if (negative) {
          i++;
        }
        @try {
          value = [text charAtWithInt:i++] - '0';
        }
        @catch (JavaLangStringIndexOutOfBoundsException *e) {
          return ~position;
        }
        position += length;
        while (i < position) {
          value = ((JreLShift32(value, 3)) + (JreLShift32(value, 1))) + [text charAtWithInt:i++] - '0';
        }
        if (negative) {
          value = -value;
        }
      }
      [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) saveFieldWithOrgJodaTimeDateTimeFieldType:iType_ withInt:value];
      return position;
    }
  }
  jint year;
  jchar c = [text charAtWithInt:position];
  if (c < '0' || c > '9') {
    return ~position;
  }
  year = c - '0';
  c = [text charAtWithInt:position + 1];
  if (c < '0' || c > '9') {
    return ~position;
  }
  year = ((JreLShift32(year, 3)) + (JreLShift32(year, 1))) + c - '0';
  jint pivot = iPivot_;
  if ([((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) getPivotYear] != nil) {
    pivot = [((JavaLangInteger *) nil_chk([bucket getPivotYear])) intValue];
  }
  jint low = pivot - 50;
  jint t;
  if (low >= 0) {
    t = low % 100;
  }
  else {
    t = 99 + ((low + 1) % 100);
  }
  year += low + ((year < t) ? 100 : 0) - t;
  [bucket saveFieldWithOrgJodaTimeDateTimeFieldType:iType_ withInt:year];
  return position + 2;
}

- (jint)estimatePrintedLength {
  return 2;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(jint)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  jint year = OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear_getTwoDigitYearWithLong_withOrgJodaTimeChronology_(self, instant, chrono);
  if (year < 0) {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:0xfffd];
    (void) [appendable appendWithChar:0xfffd];
  }
  else {
    OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangAppendable_withInt_withInt_(appendable, year, 2);
  }
}

- (jint)getTwoDigitYearWithLong:(jlong)instant
      withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear_getTwoDigitYearWithLong_withOrgJodaTimeChronology_(self, instant, chrono);
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  jint year = OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear_getTwoDigitYearWithOrgJodaTimeReadablePartial_(self, partial);
  if (year < 0) {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:0xfffd];
    (void) [appendable appendWithChar:0xfffd];
  }
  else {
    OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangAppendable_withInt_withInt_(appendable, year, 2);
  }
}

- (jint)getTwoDigitYearWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear_getTwoDigitYearWithOrgJodaTimeReadablePartial_(self, partial);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 8, 5, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeDateTimeFieldType:withInt:withBoolean:);
  methods[1].selector = @selector(estimateParsedLength);
  methods[2].selector = @selector(parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:);
  methods[3].selector = @selector(estimatePrintedLength);
  methods[4].selector = @selector(printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:);
  methods[5].selector = @selector(getTwoDigitYearWithLong:withOrgJodaTimeChronology:);
  methods[6].selector = @selector(printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:);
  methods[7].selector = @selector(getTwoDigitYearWithOrgJodaTimeReadablePartial:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iType_", "LOrgJodaTimeDateTimeFieldType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iPivot_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iLenientParse_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeDateTimeFieldType;IZ", "parseInto", "LOrgJodaTimeFormatDateTimeParserBucket;LJavaLangCharSequence;I", "printTo", "LJavaLangAppendable;JLOrgJodaTimeChronology;ILOrgJodaTimeDateTimeZone;LJavaUtilLocale;", "LJavaIoIOException;", "getTwoDigitYear", "JLOrgJodaTimeChronology;", "LJavaLangAppendable;LOrgJodaTimeReadablePartial;LJavaUtilLocale;", "LOrgJodaTimeReadablePartial;", "LOrgJodaTimeFormatDateTimeFormatterBuilder;" };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear = { "TwoDigitYear", "org.joda.time.format", ptrTable, methods, fields, 7, 0x8, 8, 3, 10, -1, -1, -1, -1 };
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear;
}

@end

void OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear *self, OrgJodaTimeDateTimeFieldType *type, jint pivot, jboolean lenientParse) {
  NSObject_init(self);
  self->iType_ = type;
  self->iPivot_ = pivot;
  self->iLenientParse_ = lenientParse;
}

OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear *new_OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(OrgJodaTimeDateTimeFieldType *type, jint pivot, jboolean lenientParse) {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear, initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_, type, pivot, lenientParse)
}

OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear *create_OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear_initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_(OrgJodaTimeDateTimeFieldType *type, jint pivot, jboolean lenientParse) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear, initWithOrgJodaTimeDateTimeFieldType_withInt_withBoolean_, type, pivot, lenientParse)
}

jint OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear_getTwoDigitYearWithLong_withOrgJodaTimeChronology_(OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear *self, jlong instant, OrgJodaTimeChronology *chrono) {
  @try {
    jint year = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(self->iType_)) getFieldWithOrgJodaTimeChronology:chrono])) getWithLong:instant];
    if (year < 0) {
      year = -year;
    }
    return year % 100;
  }
  @catch (JavaLangRuntimeException *e) {
    return -1;
  }
}

jint OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear_getTwoDigitYearWithOrgJodaTimeReadablePartial_(OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear *self, id<OrgJodaTimeReadablePartial> partial) {
  if ([((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) isSupportedWithOrgJodaTimeDateTimeFieldType:self->iType_]) {
    @try {
      jint year = [partial getWithOrgJodaTimeDateTimeFieldType:self->iType_];
      if (year < 0) {
        year = -year;
      }
      return year % 100;
    }
    @catch (JavaLangRuntimeException *e) {
    }
  }
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormatterBuilder_TwoDigitYear)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeFormatDateTimeFormatterBuilder_TextField)

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_TextField

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                         withBoolean:(jboolean)isShort {
  OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_initWithOrgJodaTimeDateTimeFieldType_withBoolean_(self, fieldType, isShort);
  return self;
}

- (jint)estimatePrintedLength {
  return iShort_ ? 6 : 20;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(jint)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  @try {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithJavaLangCharSequence:OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_printWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_(self, instant, chrono, locale)];
  }
  @catch (JavaLangRuntimeException *e) {
    (void) [appendable appendWithChar:0xfffd];
  }
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  @try {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithJavaLangCharSequence:OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_printWithOrgJodaTimeReadablePartial_withJavaUtilLocale_(self, partial, locale)];
  }
  @catch (JavaLangRuntimeException *e) {
    (void) [appendable appendWithChar:0xfffd];
  }
}

- (NSString *)printWithLong:(jlong)instant
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
         withJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_printWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_(self, instant, chrono, locale);
}

- (NSString *)printWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                               withJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_printWithOrgJodaTimeReadablePartial_withJavaUtilLocale_(self, partial, locale);
}

- (jint)estimateParsedLength {
  return [self estimatePrintedLength];
}

- (jint)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                   withInt:(jint)position {
  JavaUtilLocale *locale = [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) getLocale];
  id<JavaUtilMap> validValues = nil;
  jint maxLength = 0;
  id<JavaUtilMap> innerMap = [((id<JavaUtilMap>) nil_chk(OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_cParseCache)) getWithId:locale];
  if (innerMap == nil) {
    innerMap = new_JavaUtilConcurrentConcurrentHashMap_init();
    (void) [((id<JavaUtilMap>) nil_chk(OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_cParseCache)) putWithId:locale withId:innerMap];
  }
  IOSObjectArray *array = [innerMap getWithId:iFieldType_];
  if (array == nil) {
    validValues = new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(32);
    OrgJodaTimeMutableDateTime *dt = new_OrgJodaTimeMutableDateTime_initWithLong_withOrgJodaTimeDateTimeZone_(0LL, JreLoadStatic(OrgJodaTimeDateTimeZone, UTC));
    OrgJodaTimeMutableDateTime_Property *property = [dt propertyWithOrgJodaTimeDateTimeFieldType:iFieldType_];
    jint min = [((OrgJodaTimeMutableDateTime_Property *) nil_chk(property)) getMinimumValueOverall];
    jint max = [property getMaximumValueOverall];
    if (max - min > 32) {
      return ~position;
    }
    maxLength = [property getMaximumTextLengthWithJavaUtilLocale:locale];
    for (jint i = min; i <= max; i++) {
      (void) [property setWithInt:i];
      (void) [validValues putWithId:[property getAsShortTextWithJavaUtilLocale:locale] withId:JreLoadStatic(JavaLangBoolean, TRUE)];
      (void) [validValues putWithId:[((NSString *) nil_chk([property getAsShortTextWithJavaUtilLocale:locale])) lowercaseStringWithJRELocale:locale] withId:JreLoadStatic(JavaLangBoolean, TRUE)];
      (void) [validValues putWithId:[((NSString *) nil_chk([property getAsShortTextWithJavaUtilLocale:locale])) uppercaseStringWithJRELocale:locale] withId:JreLoadStatic(JavaLangBoolean, TRUE)];
      (void) [validValues putWithId:[property getAsTextWithJavaUtilLocale:locale] withId:JreLoadStatic(JavaLangBoolean, TRUE)];
      (void) [validValues putWithId:[((NSString *) nil_chk([property getAsTextWithJavaUtilLocale:locale])) lowercaseStringWithJRELocale:locale] withId:JreLoadStatic(JavaLangBoolean, TRUE)];
      (void) [validValues putWithId:[((NSString *) nil_chk([property getAsTextWithJavaUtilLocale:locale])) uppercaseStringWithJRELocale:locale] withId:JreLoadStatic(JavaLangBoolean, TRUE)];
    }
    if ([@"en" isEqual:[((JavaUtilLocale *) nil_chk(locale)) getLanguage]] && iFieldType_ == OrgJodaTimeDateTimeFieldType_era()) {
      (void) [validValues putWithId:@"BCE" withId:JreLoadStatic(JavaLangBoolean, TRUE)];
      (void) [validValues putWithId:@"bce" withId:JreLoadStatic(JavaLangBoolean, TRUE)];
      (void) [validValues putWithId:@"CE" withId:JreLoadStatic(JavaLangBoolean, TRUE)];
      (void) [validValues putWithId:@"ce" withId:JreLoadStatic(JavaLangBoolean, TRUE)];
      maxLength = 3;
    }
    array = [IOSObjectArray newArrayWithObjects:(id[]){ validValues, JavaLangInteger_valueOfWithInt_(maxLength) } count:2 type:NSObject_class_()];
    (void) [innerMap putWithId:iFieldType_ withId:array];
  }
  else {
    validValues = (id<JavaUtilMap>) cast_check(IOSObjectArray_Get(array, 0), JavaUtilMap_class_());
    maxLength = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(array, 1), [JavaLangInteger class])))) intValue];
  }
  jint limit = JavaLangMath_minWithInt_withInt_([((id<JavaLangCharSequence>) nil_chk(text)) length], position + maxLength);
  for (jint i = limit; i > position; i--) {
    NSString *match = [((id<JavaLangCharSequence>) nil_chk([text subSequenceFrom:position to:i])) description];
    if ([((id<JavaUtilMap>) nil_chk(validValues)) containsKeyWithId:match]) {
      [bucket saveFieldWithOrgJodaTimeDateTimeFieldType:iFieldType_ withNSString:match withJavaUtilLocale:locale];
      return i;
    }
  }
  return ~position;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 5, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeDateTimeFieldType:withBoolean:);
  methods[1].selector = @selector(estimatePrintedLength);
  methods[2].selector = @selector(printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:);
  methods[3].selector = @selector(printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:);
  methods[4].selector = @selector(printWithLong:withOrgJodaTimeChronology:withJavaUtilLocale:);
  methods[5].selector = @selector(printWithOrgJodaTimeReadablePartial:withJavaUtilLocale:);
  methods[6].selector = @selector(estimateParsedLength);
  methods[7].selector = @selector(parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cParseCache", "LJavaUtilMap;", .constantValue.asLong = 0, 0xa, -1, 10, 11, -1 },
    { "iFieldType_", "LOrgJodaTimeDateTimeFieldType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iShort_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeDateTimeFieldType;Z", "printTo", "LJavaLangAppendable;JLOrgJodaTimeChronology;ILOrgJodaTimeDateTimeZone;LJavaUtilLocale;", "LJavaIoIOException;", "LJavaLangAppendable;LOrgJodaTimeReadablePartial;LJavaUtilLocale;", "print", "JLOrgJodaTimeChronology;LJavaUtilLocale;", "LOrgJodaTimeReadablePartial;LJavaUtilLocale;", "parseInto", "LOrgJodaTimeFormatDateTimeParserBucket;LJavaLangCharSequence;I", &OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_cParseCache, "Ljava/util/Map<Ljava/util/Locale;Ljava/util/Map<Lorg/joda/time/DateTimeFieldType;[Ljava/lang/Object;>;>;", "LOrgJodaTimeFormatDateTimeFormatterBuilder;" };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_TextField = { "TextField", "org.joda.time.format", ptrTable, methods, fields, 7, 0x8, 8, 3, 12, -1, -1, -1, -1 };
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_TextField;
}

+ (void)initialize {
  if (self == [OrgJodaTimeFormatDateTimeFormatterBuilder_TextField class]) {
    OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_cParseCache = new_JavaUtilConcurrentConcurrentHashMap_init();
    J2OBJC_SET_INITIALIZED(OrgJodaTimeFormatDateTimeFormatterBuilder_TextField)
  }
}

@end

void OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_initWithOrgJodaTimeDateTimeFieldType_withBoolean_(OrgJodaTimeFormatDateTimeFormatterBuilder_TextField *self, OrgJodaTimeDateTimeFieldType *fieldType, jboolean isShort) {
  NSObject_init(self);
  self->iFieldType_ = fieldType;
  self->iShort_ = isShort;
}

OrgJodaTimeFormatDateTimeFormatterBuilder_TextField *new_OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_initWithOrgJodaTimeDateTimeFieldType_withBoolean_(OrgJodaTimeDateTimeFieldType *fieldType, jboolean isShort) {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_TextField, initWithOrgJodaTimeDateTimeFieldType_withBoolean_, fieldType, isShort)
}

OrgJodaTimeFormatDateTimeFormatterBuilder_TextField *create_OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_initWithOrgJodaTimeDateTimeFieldType_withBoolean_(OrgJodaTimeDateTimeFieldType *fieldType, jboolean isShort) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_TextField, initWithOrgJodaTimeDateTimeFieldType_withBoolean_, fieldType, isShort)
}

NSString *OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_printWithLong_withOrgJodaTimeChronology_withJavaUtilLocale_(OrgJodaTimeFormatDateTimeFormatterBuilder_TextField *self, jlong instant, OrgJodaTimeChronology *chrono, JavaUtilLocale *locale) {
  OrgJodaTimeDateTimeField *field = [((OrgJodaTimeDateTimeFieldType *) nil_chk(self->iFieldType_)) getFieldWithOrgJodaTimeChronology:chrono];
  if (self->iShort_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(field)) getAsShortTextWithLong:instant withJavaUtilLocale:locale];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(field)) getAsTextWithLong:instant withJavaUtilLocale:locale];
  }
}

NSString *OrgJodaTimeFormatDateTimeFormatterBuilder_TextField_printWithOrgJodaTimeReadablePartial_withJavaUtilLocale_(OrgJodaTimeFormatDateTimeFormatterBuilder_TextField *self, id<OrgJodaTimeReadablePartial> partial, JavaUtilLocale *locale) {
  if ([((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) isSupportedWithOrgJodaTimeDateTimeFieldType:self->iFieldType_]) {
    OrgJodaTimeDateTimeField *field = [((OrgJodaTimeDateTimeFieldType *) nil_chk(self->iFieldType_)) getFieldWithOrgJodaTimeChronology:[partial getChronology]];
    if (self->iShort_) {
      return [((OrgJodaTimeDateTimeField *) nil_chk(field)) getAsShortTextWithOrgJodaTimeReadablePartial:partial withJavaUtilLocale:locale];
    }
    else {
      return [((OrgJodaTimeDateTimeField *) nil_chk(field)) getAsTextWithOrgJodaTimeReadablePartial:partial withJavaUtilLocale:locale];
    }
  }
  else {
    return @"\ufffd";
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormatterBuilder_TextField)

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                             withInt:(jint)minDigits
                                             withInt:(jint)maxDigits {
  OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction_initWithOrgJodaTimeDateTimeFieldType_withInt_withInt_(self, fieldType, minDigits, maxDigits);
  return self;
}

- (jint)estimatePrintedLength {
  return iMaxDigits_;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(jint)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  [self printToWithJavaLangAppendable:appendable withLong:instant withOrgJodaTimeChronology:chrono];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  jlong millis = [((OrgJodaTimeChronology *) nil_chk([((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) getChronology])) setWithOrgJodaTimeReadablePartial:partial withLong:0LL];
  [self printToWithJavaLangAppendable:appendable withLong:millis withOrgJodaTimeChronology:[partial getChronology]];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  OrgJodaTimeDateTimeField *field = [((OrgJodaTimeDateTimeFieldType *) nil_chk(iFieldType_)) getFieldWithOrgJodaTimeChronology:chrono];
  jint minDigits = iMinDigits_;
  jlong fraction;
  @try {
    fraction = [((OrgJodaTimeDateTimeField *) nil_chk(field)) remainderWithLong:instant];
  }
  @catch (JavaLangRuntimeException *e) {
    OrgJodaTimeFormatDateTimeFormatterBuilder_appendUnknownStringWithJavaLangAppendable_withInt_(appendable, minDigits);
    return;
  }
  if (fraction == 0) {
    while (--minDigits >= 0) {
      (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:'0'];
    }
    return;
  }
  NSString *str;
  IOSLongArray *fractionData = OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction_getFractionDataWithLong_withOrgJodaTimeDateTimeField_(self, fraction, field);
  jlong scaled = IOSLongArray_Get(nil_chk(fractionData), 0);
  jint maxDigits = (jint) IOSLongArray_Get(fractionData, 1);
  if ((scaled & (jint) 0x7fffffff) == scaled) {
    str = JavaLangInteger_toStringWithInt_((jint) scaled);
  }
  else {
    str = JavaLangLong_toStringWithLong_(scaled);
  }
  jint length = ((jint) [((NSString *) nil_chk(str)) length]);
  jint digits = maxDigits;
  while (length < digits) {
    (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:'0'];
    minDigits--;
    digits--;
  }
  if (minDigits < digits) {
    while (minDigits < digits) {
      if (length <= 1 || [str charAtWithInt:length - 1] != '0') {
        break;
      }
      digits--;
      length--;
    }
    if (length < ((jint) [str length])) {
      for (jint i = 0; i < length; i++) {
        (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithChar:[str charAtWithInt:i]];
      }
      return;
    }
  }
  (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithJavaLangCharSequence:str];
}

- (IOSLongArray *)getFractionDataWithLong:(jlong)fraction
             withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction_getFractionDataWithLong_withOrgJodaTimeDateTimeField_(self, fraction, field);
}

- (jint)estimateParsedLength {
  return iMaxDigits_;
}

- (jint)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                   withInt:(jint)position {
  OrgJodaTimeDateTimeField *field = [((OrgJodaTimeDateTimeFieldType *) nil_chk(iFieldType_)) getFieldWithOrgJodaTimeChronology:[((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) getChronology]];
  jint limit = JavaLangMath_minWithInt_withInt_(iMaxDigits_, [((id<JavaLangCharSequence>) nil_chk(text)) length] - position);
  jlong value = 0;
  jlong n = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDateTimeField *) nil_chk(field)) getDurationField])) getUnitMillis] * 10;
  jint length = 0;
  while (length < limit) {
    jchar c = [text charAtWithInt:position + length];
    if (c < '0' || c > '9') {
      break;
    }
    length++;
    jlong nn = n / 10;
    value += (c - '0') * nn;
    n = nn;
  }
  value /= 10;
  if (length == 0) {
    return ~position;
  }
  if (value > JavaLangInteger_MAX_VALUE) {
    return ~position;
  }
  OrgJodaTimeDateTimeField *parseField = new_OrgJodaTimeFieldPreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeFieldType_millisOfSecond(), JreLoadStatic(OrgJodaTimeFieldMillisDurationField, INSTANCE), [field getDurationField]);
  [bucket saveFieldWithOrgJodaTimeDateTimeField:parseField withInt:(jint) value];
  return position + length;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 5, 3, -1, -1, -1 },
    { NULL, "[J", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeDateTimeFieldType:withInt:withInt:);
  methods[1].selector = @selector(estimatePrintedLength);
  methods[2].selector = @selector(printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:);
  methods[3].selector = @selector(printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:);
  methods[4].selector = @selector(printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:);
  methods[5].selector = @selector(getFractionDataWithLong:withOrgJodaTimeDateTimeField:);
  methods[6].selector = @selector(estimateParsedLength);
  methods[7].selector = @selector(parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iFieldType_", "LOrgJodaTimeDateTimeFieldType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iMinDigits_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "iMaxDigits_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeDateTimeFieldType;II", "printTo", "LJavaLangAppendable;JLOrgJodaTimeChronology;ILOrgJodaTimeDateTimeZone;LJavaUtilLocale;", "LJavaIoIOException;", "LJavaLangAppendable;LOrgJodaTimeReadablePartial;LJavaUtilLocale;", "LJavaLangAppendable;JLOrgJodaTimeChronology;", "getFractionData", "JLOrgJodaTimeDateTimeField;", "parseInto", "LOrgJodaTimeFormatDateTimeParserBucket;LJavaLangCharSequence;I", "LOrgJodaTimeFormatDateTimeFormatterBuilder;" };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction = { "Fraction", "org.joda.time.format", ptrTable, methods, fields, 7, 0x8, 8, 3, 10, -1, -1, -1, -1 };
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction;
}

@end

void OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction_initWithOrgJodaTimeDateTimeFieldType_withInt_withInt_(OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction *self, OrgJodaTimeDateTimeFieldType *fieldType, jint minDigits, jint maxDigits) {
  NSObject_init(self);
  self->iFieldType_ = fieldType;
  if (maxDigits > 18) {
    maxDigits = 18;
  }
  self->iMinDigits_ = minDigits;
  self->iMaxDigits_ = maxDigits;
}

OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction *new_OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction_initWithOrgJodaTimeDateTimeFieldType_withInt_withInt_(OrgJodaTimeDateTimeFieldType *fieldType, jint minDigits, jint maxDigits) {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction, initWithOrgJodaTimeDateTimeFieldType_withInt_withInt_, fieldType, minDigits, maxDigits)
}

OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction *create_OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction_initWithOrgJodaTimeDateTimeFieldType_withInt_withInt_(OrgJodaTimeDateTimeFieldType *fieldType, jint minDigits, jint maxDigits) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction, initWithOrgJodaTimeDateTimeFieldType_withInt_withInt_, fieldType, minDigits, maxDigits)
}

IOSLongArray *OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction_getFractionDataWithLong_withOrgJodaTimeDateTimeField_(OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction *self, jlong fraction, OrgJodaTimeDateTimeField *field) {
  jlong rangeMillis = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDateTimeField *) nil_chk(field)) getDurationField])) getUnitMillis];
  jlong scalar;
  jint maxDigits = self->iMaxDigits_;
  while (true) {
    switch (maxDigits) {
      default:
      scalar = 1LL;
      break;
      case 1:
      scalar = 10LL;
      break;
      case 2:
      scalar = 100LL;
      break;
      case 3:
      scalar = 1000LL;
      break;
      case 4:
      scalar = 10000LL;
      break;
      case 5:
      scalar = 100000LL;
      break;
      case 6:
      scalar = 1000000LL;
      break;
      case 7:
      scalar = 10000000LL;
      break;
      case 8:
      scalar = 100000000LL;
      break;
      case 9:
      scalar = 1000000000LL;
      break;
      case 10:
      scalar = 10000000000LL;
      break;
      case 11:
      scalar = 100000000000LL;
      break;
      case 12:
      scalar = 1000000000000LL;
      break;
      case 13:
      scalar = 10000000000000LL;
      break;
      case 14:
      scalar = 100000000000000LL;
      break;
      case 15:
      scalar = 1000000000000000LL;
      break;
      case 16:
      scalar = 10000000000000000LL;
      break;
      case 17:
      scalar = 100000000000000000LL;
      break;
      case 18:
      scalar = 1000000000000000000LL;
      break;
    }
    if (((rangeMillis * scalar) / scalar) == rangeMillis) {
      break;
    }
    maxDigits--;
  }
  return [IOSLongArray newArrayWithLongs:(jlong[]){ fraction * scalar / rangeMillis, maxDigits } count:2];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormatterBuilder_Fraction)

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset

- (instancetype)initWithNSString:(NSString *)zeroOffsetPrintText
                    withNSString:(NSString *)zeroOffsetParseText
                     withBoolean:(jboolean)showSeparators
                         withInt:(jint)minFields
                         withInt:(jint)maxFields {
  OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset_initWithNSString_withNSString_withBoolean_withInt_withInt_(self, zeroOffsetPrintText, zeroOffsetParseText, showSeparators, minFields, maxFields);
  return self;
}

- (jint)estimatePrintedLength {
  jint est = JreLShift32(1 + iMinFields_, 1);
  if (iShowSeparators_) {
    est += iMinFields_ - 1;
  }
  if (iZeroOffsetPrintText_ != nil && ((jint) [iZeroOffsetPrintText_ length]) > est) {
    est = ((jint) [iZeroOffsetPrintText_ length]);
  }
  return est;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)buf
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(jint)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (displayZone == nil) {
    return;
  }
  if (displayOffset == 0 && iZeroOffsetPrintText_ != nil) {
    (void) [((id<JavaLangAppendable>) nil_chk(buf)) appendWithJavaLangCharSequence:iZeroOffsetPrintText_];
    return;
  }
  if (displayOffset >= 0) {
    (void) [((id<JavaLangAppendable>) nil_chk(buf)) appendWithChar:'+'];
  }
  else {
    (void) [((id<JavaLangAppendable>) nil_chk(buf)) appendWithChar:'-'];
    displayOffset = -displayOffset;
  }
  jint hours = displayOffset / OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangAppendable_withInt_withInt_(buf, hours, 2);
  if (iMaxFields_ == 1) {
    return;
  }
  displayOffset -= hours * (jint) OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  if (displayOffset == 0 && iMinFields_ <= 1) {
    return;
  }
  jint minutes = displayOffset / OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE;
  if (iShowSeparators_) {
    (void) [buf appendWithChar:':'];
  }
  OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangAppendable_withInt_withInt_(buf, minutes, 2);
  if (iMaxFields_ == 2) {
    return;
  }
  displayOffset -= minutes * OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE;
  if (displayOffset == 0 && iMinFields_ <= 2) {
    return;
  }
  jint seconds = displayOffset / OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND;
  if (iShowSeparators_) {
    (void) [buf appendWithChar:':'];
  }
  OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangAppendable_withInt_withInt_(buf, seconds, 2);
  if (iMaxFields_ == 3) {
    return;
  }
  displayOffset -= seconds * OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND;
  if (displayOffset == 0 && iMinFields_ <= 3) {
    return;
  }
  if (iShowSeparators_) {
    (void) [buf appendWithChar:'.'];
  }
  OrgJodaTimeFormatFormatUtils_appendPaddedIntegerWithJavaLangAppendable_withInt_withInt_(buf, displayOffset, 3);
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
}

- (jint)estimateParsedLength {
  return [self estimatePrintedLength];
}

- (jint)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                   withInt:(jint)position {
  jint limit = [((id<JavaLangCharSequence>) nil_chk(text)) length] - position;
  if (iZeroOffsetParseText_ != nil) {
    if (((jint) [iZeroOffsetParseText_ length]) == 0) {
      if (limit > 0) {
        jchar c = [text charAtWithInt:position];
        if (c == '-' || c == '+') {
          goto break_zeroOffset;
        }
      }
      [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) setOffsetWithJavaLangInteger:JavaLangInteger_valueOfWithInt_(0)];
      return position;
    }
    if (OrgJodaTimeFormatDateTimeFormatterBuilder_csStartsWithIgnoreCaseWithJavaLangCharSequence_withInt_withNSString_(text, position, iZeroOffsetParseText_)) {
      [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) setOffsetWithJavaLangInteger:JavaLangInteger_valueOfWithInt_(0)];
      return position + ((jint) [iZeroOffsetParseText_ length]);
    }
  }
  break_zeroOffset: ;
  if (limit <= 1) {
    return ~position;
  }
  jboolean negative;
  jchar c = [text charAtWithInt:position];
  if (c == '-') {
    negative = true;
  }
  else if (c == '+') {
    negative = false;
  }
  else {
    return ~position;
  }
  limit--;
  position++;
  if (OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset_digitCountWithJavaLangCharSequence_withInt_withInt_(self, text, position, 2) < 2) {
    return ~position;
  }
  jint offset;
  jint hours = OrgJodaTimeFormatFormatUtils_parseTwoDigitsWithJavaLangCharSequence_withInt_(text, position);
  if (hours > 23) {
    return ~position;
  }
  offset = hours * OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  limit -= 2;
  position += 2;
  {
    if (limit <= 0) {
      goto break_parse;
    }
    jboolean expectSeparators;
    c = [text charAtWithInt:position];
    if (c == ':') {
      expectSeparators = true;
      limit--;
      position++;
    }
    else if (c >= '0' && c <= '9') {
      expectSeparators = false;
    }
    else {
      goto break_parse;
    }
    jint count = OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset_digitCountWithJavaLangCharSequence_withInt_withInt_(self, text, position, 2);
    if (count == 0 && !expectSeparators) {
      goto break_parse;
    }
    else if (count < 2) {
      return ~position;
    }
    jint minutes = OrgJodaTimeFormatFormatUtils_parseTwoDigitsWithJavaLangCharSequence_withInt_(text, position);
    if (minutes > 59) {
      return ~position;
    }
    offset += minutes * OrgJodaTimeDateTimeConstants_MILLIS_PER_MINUTE;
    limit -= 2;
    position += 2;
    if (limit <= 0) {
      goto break_parse;
    }
    if (expectSeparators) {
      if ([text charAtWithInt:position] != ':') {
        goto break_parse;
      }
      limit--;
      position++;
    }
    count = OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset_digitCountWithJavaLangCharSequence_withInt_withInt_(self, text, position, 2);
    if (count == 0 && !expectSeparators) {
      goto break_parse;
    }
    else if (count < 2) {
      return ~position;
    }
    jint seconds = OrgJodaTimeFormatFormatUtils_parseTwoDigitsWithJavaLangCharSequence_withInt_(text, position);
    if (seconds > 59) {
      return ~position;
    }
    offset += seconds * OrgJodaTimeDateTimeConstants_MILLIS_PER_SECOND;
    limit -= 2;
    position += 2;
    if (limit <= 0) {
      goto break_parse;
    }
    if (expectSeparators) {
      if ([text charAtWithInt:position] != '.' && [text charAtWithInt:position] != ',') {
        goto break_parse;
      }
      limit--;
      position++;
    }
    count = OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset_digitCountWithJavaLangCharSequence_withInt_withInt_(self, text, position, 3);
    if (count == 0 && !expectSeparators) {
      goto break_parse;
    }
    else if (count < 1) {
      return ~position;
    }
    offset += ([text charAtWithInt:position++] - '0') * 100;
    if (count > 1) {
      offset += ([text charAtWithInt:position++] - '0') * 10;
      if (count > 2) {
        offset += [text charAtWithInt:position++] - '0';
      }
    }
  }
  break_parse: ;
  [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) setOffsetWithJavaLangInteger:JavaLangInteger_valueOfWithInt_(negative ? -offset : offset)];
  return position;
}

- (jint)digitCountWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                   withInt:(jint)position
                                   withInt:(jint)amount {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset_digitCountWithJavaLangCharSequence_withInt_withInt_(self, text, position, amount);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:withBoolean:withInt:withInt:);
  methods[1].selector = @selector(estimatePrintedLength);
  methods[2].selector = @selector(printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:);
  methods[3].selector = @selector(printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:);
  methods[4].selector = @selector(estimateParsedLength);
  methods[5].selector = @selector(parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:);
  methods[6].selector = @selector(digitCountWithJavaLangCharSequence:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iZeroOffsetPrintText_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iZeroOffsetParseText_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iShowSeparators_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iMinFields_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iMaxFields_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;ZII", "printTo", "LJavaLangAppendable;JLOrgJodaTimeChronology;ILOrgJodaTimeDateTimeZone;LJavaUtilLocale;", "LJavaIoIOException;", "LJavaLangAppendable;LOrgJodaTimeReadablePartial;LJavaUtilLocale;", "parseInto", "LOrgJodaTimeFormatDateTimeParserBucket;LJavaLangCharSequence;I", "digitCount", "LJavaLangCharSequence;II", "LOrgJodaTimeFormatDateTimeFormatterBuilder;" };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset = { "TimeZoneOffset", "org.joda.time.format", ptrTable, methods, fields, 7, 0x8, 7, 5, 9, -1, -1, -1, -1 };
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset;
}

@end

void OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset_initWithNSString_withNSString_withBoolean_withInt_withInt_(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset *self, NSString *zeroOffsetPrintText, NSString *zeroOffsetParseText, jboolean showSeparators, jint minFields, jint maxFields) {
  NSObject_init(self);
  self->iZeroOffsetPrintText_ = zeroOffsetPrintText;
  self->iZeroOffsetParseText_ = zeroOffsetParseText;
  self->iShowSeparators_ = showSeparators;
  if (minFields <= 0 || maxFields < minFields) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  if (minFields > 4) {
    minFields = 4;
    maxFields = 4;
  }
  self->iMinFields_ = minFields;
  self->iMaxFields_ = maxFields;
}

OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset *new_OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset_initWithNSString_withNSString_withBoolean_withInt_withInt_(NSString *zeroOffsetPrintText, NSString *zeroOffsetParseText, jboolean showSeparators, jint minFields, jint maxFields) {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset, initWithNSString_withNSString_withBoolean_withInt_withInt_, zeroOffsetPrintText, zeroOffsetParseText, showSeparators, minFields, maxFields)
}

OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset *create_OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset_initWithNSString_withNSString_withBoolean_withInt_withInt_(NSString *zeroOffsetPrintText, NSString *zeroOffsetParseText, jboolean showSeparators, jint minFields, jint maxFields) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset, initWithNSString_withNSString_withBoolean_withInt_withInt_, zeroOffsetPrintText, zeroOffsetParseText, showSeparators, minFields, maxFields)
}

jint OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset_digitCountWithJavaLangCharSequence_withInt_withInt_(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset *self, id<JavaLangCharSequence> text, jint position, jint amount) {
  jint limit = JavaLangMath_minWithInt_withInt_([((id<JavaLangCharSequence>) nil_chk(text)) length] - position, amount);
  amount = 0;
  for (; limit > 0; limit--) {
    jchar c = [text charAtWithInt:position + amount];
    if (c < '0' || c > '9') {
      break;
    }
    amount++;
  }
  return amount;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneOffset)

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName

- (instancetype)initWithInt:(jint)type
            withJavaUtilMap:(id<JavaUtilMap>)parseLookup {
  OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_initWithInt_withJavaUtilMap_(self, type, parseLookup);
  return self;
}

- (jint)estimatePrintedLength {
  return (iType_ == OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_SHORT_NAME ? 4 : 20);
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(jint)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithJavaLangCharSequence:OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_printWithLong_withOrgJodaTimeDateTimeZone_withJavaUtilLocale_(self, instant - displayOffset, displayZone, locale)];
}

- (NSString *)printWithLong:(jlong)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
         withJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_printWithLong_withOrgJodaTimeDateTimeZone_withJavaUtilLocale_(self, instant, displayZone, locale);
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
}

- (jint)estimateParsedLength {
  return (iType_ == OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_SHORT_NAME ? 4 : 20);
}

- (jint)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                   withInt:(jint)position {
  id<JavaUtilMap> parseLookup = iParseLookup_;
  parseLookup = (parseLookup != nil ? parseLookup : OrgJodaTimeDateTimeUtils_getDefaultTimeZoneNames());
  NSString *matched = nil;
  for (NSString * __strong name in nil_chk([parseLookup keySet])) {
    if (OrgJodaTimeFormatDateTimeFormatterBuilder_csStartsWithWithJavaLangCharSequence_withInt_withNSString_(text, position, name)) {
      if (matched == nil || ((jint) [((NSString *) nil_chk(name)) length]) > ((jint) [matched length])) {
        matched = name;
      }
    }
  }
  if (matched != nil) {
    [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) setZoneWithOrgJodaTimeDateTimeZone:[parseLookup getWithId:matched]];
    return position + ((jint) [matched length]);
  }
  return ~position;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 7, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withJavaUtilMap:);
  methods[1].selector = @selector(estimatePrintedLength);
  methods[2].selector = @selector(printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:);
  methods[3].selector = @selector(printWithLong:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:);
  methods[4].selector = @selector(printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:);
  methods[5].selector = @selector(estimateParsedLength);
  methods[6].selector = @selector(parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LONG_NAME", "I", .constantValue.asInt = OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_LONG_NAME, 0x18, -1, -1, -1, -1 },
    { "SHORT_NAME", "I", .constantValue.asInt = OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_SHORT_NAME, 0x18, -1, -1, -1, -1 },
    { "iParseLookup_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "iType_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILJavaUtilMap;", "(ILjava/util/Map<Ljava/lang/String;Lorg/joda/time/DateTimeZone;>;)V", "printTo", "LJavaLangAppendable;JLOrgJodaTimeChronology;ILOrgJodaTimeDateTimeZone;LJavaUtilLocale;", "LJavaIoIOException;", "print", "JLOrgJodaTimeDateTimeZone;LJavaUtilLocale;", "LJavaLangAppendable;LOrgJodaTimeReadablePartial;LJavaUtilLocale;", "parseInto", "LOrgJodaTimeFormatDateTimeParserBucket;LJavaLangCharSequence;I", "Ljava/util/Map<Ljava/lang/String;Lorg/joda/time/DateTimeZone;>;", "LOrgJodaTimeFormatDateTimeFormatterBuilder;" };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName = { "TimeZoneName", "org.joda.time.format", ptrTable, methods, fields, 7, 0x8, 7, 4, 11, -1, -1, -1, -1 };
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName;
}

@end

void OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_initWithInt_withJavaUtilMap_(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName *self, jint type, id<JavaUtilMap> parseLookup) {
  NSObject_init(self);
  self->iType_ = type;
  self->iParseLookup_ = parseLookup;
}

OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName *new_OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_initWithInt_withJavaUtilMap_(jint type, id<JavaUtilMap> parseLookup) {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName, initWithInt_withJavaUtilMap_, type, parseLookup)
}

OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName *create_OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_initWithInt_withJavaUtilMap_(jint type, id<JavaUtilMap> parseLookup) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName, initWithInt_withJavaUtilMap_, type, parseLookup)
}

NSString *OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_printWithLong_withOrgJodaTimeDateTimeZone_withJavaUtilLocale_(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName *self, jlong instant, OrgJodaTimeDateTimeZone *displayZone, JavaUtilLocale *locale) {
  if (displayZone == nil) {
    return @"";
  }
  switch (self->iType_) {
    case OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_LONG_NAME:
    return [displayZone getNameWithLong:instant withJavaUtilLocale:locale];
    case OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName_SHORT_NAME:
    return [displayZone getShortNameWithLong:instant withJavaUtilLocale:locale];
  }
  return @"";
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneName)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId)

jint OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_MAX_LENGTH;

OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId *OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_values_[1];

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId

- (jint)estimatePrintedLength {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_MAX_LENGTH;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(jint)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  (void) [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithJavaLangCharSequence:displayZone != nil ? [displayZone getID] : @""];
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
}

- (jint)estimateParsedLength {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_MAX_LENGTH;
}

- (jint)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                   withInt:(jint)position {
  NSString *best = nil;
  jint pos = OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_prefixedStartPositionWithJavaLangCharSequence_withInt_(text, position);
  for (jint i = pos; i < [((id<JavaUtilList>) nil_chk(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_ALL_IDS)) size]; i++) {
    NSString *id_ = [OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_ALL_IDS getWithInt:i];
    if (OrgJodaTimeFormatDateTimeFormatterBuilder_csStartsWithWithJavaLangCharSequence_withInt_withNSString_(text, position, id_)) {
      if (best == nil || ((jint) [((NSString *) nil_chk(id_)) length]) > ((jint) [best length])) {
        best = id_;
      }
    }
    else {
      break;
    }
  }
  if (best != nil) {
    [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) setZoneWithOrgJodaTimeDateTimeZone:OrgJodaTimeDateTimeZone_forIDWithNSString_(best)];
    return position + ((jint) [best length]);
  }
  return ~position;
}

+ (jint)prefixedStartPositionWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                              withInt:(jint)position {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_prefixedStartPositionWithJavaLangCharSequence_withInt_(text, position);
}

+ (IOSObjectArray *)values {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_values();
}

+ (OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId *)valueOfWithNSString:(NSString *)name {
  return OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 3, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "[LOrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId;", 0x9, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(estimatePrintedLength);
  methods[1].selector = @selector(printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:);
  methods[2].selector = @selector(printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:);
  methods[3].selector = @selector(estimateParsedLength);
  methods[4].selector = @selector(parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:);
  methods[5].selector = @selector(prefixedStartPositionWithJavaLangCharSequence:withInt:);
  methods[6].selector = @selector(values);
  methods[7].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "ALL_IDS", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 11, 12, -1 },
    { "MAX_LENGTH", "I", .constantValue.asLong = 0, 0x18, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "printTo", "LJavaLangAppendable;JLOrgJodaTimeChronology;ILOrgJodaTimeDateTimeZone;LJavaUtilLocale;", "LJavaIoIOException;", "LJavaLangAppendable;LOrgJodaTimeReadablePartial;LJavaUtilLocale;", "parseInto", "LOrgJodaTimeFormatDateTimeParserBucket;LJavaLangCharSequence;I", "prefixedStartPosition", "LJavaLangCharSequence;I", "valueOf", "LNSString;", &JreEnum(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId, INSTANCE), &OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_ALL_IDS, "Ljava/util/List<Ljava/lang/String;>;", &OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_MAX_LENGTH, "LOrgJodaTimeFormatDateTimeFormatterBuilder;", "Ljava/lang/Enum<Lorg/joda/time/format/DateTimeFormatterBuilder$TimeZoneId;>;Lorg/joda/time/format/InternalPrinter;Lorg/joda/time/format/InternalParser;" };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId = { "TimeZoneId", "org.joda.time.format", ptrTable, methods, fields, 7, 0x4018, 8, 3, 14, -1, -1, 15, -1 };
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId;
}

+ (void)initialize {
  if (self == [OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId class]) {
    JreEnum(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId, INSTANCE) = new_OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_initWithNSString_withInt_(@"INSTANCE", 0);
    {
      OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_ALL_IDS = new_JavaUtilArrayList_initWithJavaUtilCollection_(OrgJodaTimeDateTimeZone_getAvailableIDs());
      JavaUtilCollections_sortWithJavaUtilList_(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_ALL_IDS);
    }
    {
      jint max = 0;
      for (NSString * __strong id_ in OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_ALL_IDS) {
        max = JavaLangMath_maxWithInt_withInt_(max, ((jint) [((NSString *) nil_chk(id_)) length]));
      }
      OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_MAX_LENGTH = max;
    }
    J2OBJC_SET_INITIALIZED(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId)
  }
}

@end

jint OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_prefixedStartPositionWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> text, jint position) {
  OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_initialize();
  jint lo = 0;
  jint hi = [((id<JavaUtilList>) nil_chk(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_ALL_IDS)) size] - 1;
  while (lo <= hi) {
    jint mid = JreURShift32((lo + hi), 1);
    NSString *value = [OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_ALL_IDS getWithInt:mid];
    jint compare = OrgJodaTimeFormatDateTimeFormatterBuilder_csCompareWithJavaLangCharSequence_withInt_withNSString_(text, position, value);
    if (compare > 0) {
      hi = mid - 1;
    }
    else if (compare < 0) {
      lo = mid + 1;
    }
    else {
      return mid;
    }
  }
  return lo;
}

void OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_initWithNSString_withInt_(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId *new_OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_values() {
  OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_initialize();
  return [IOSObjectArray arrayWithObjects:OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_values_ count:1 type:OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_class_()];
}

OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId *OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_valueOfWithNSString_(NSString *name) {
  OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_initialize();
  for (int i = 0; i < 1; i++) {
    OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId *e = OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId *OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_fromOrdinal(NSUInteger ordinal) {
  OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_initialize();
  if (ordinal >= 1) {
    return nil;
  }
  return OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormatterBuilder_TimeZoneId)

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_Composite

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)elementPairs {
  OrgJodaTimeFormatDateTimeFormatterBuilder_Composite_initWithJavaUtilList_(self, elementPairs);
  return self;
}

- (jint)estimatePrintedLength {
  return iPrintedLengthEstimate_;
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
                             withLong:(jlong)instant
            withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono
                              withInt:(jint)displayOffset
          withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)displayZone
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  IOSObjectArray *elements = iPrinters_;
  if (elements == nil) {
    @throw new_JavaLangUnsupportedOperationException_init();
  }
  if (locale == nil) {
    locale = JavaUtilLocale_getDefault();
  }
  jint len = elements->size_;
  for (jint i = 0; i < len; i++) {
    [((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(IOSObjectArray_Get(elements, i))) printToWithJavaLangAppendable:appendable withLong:instant withOrgJodaTimeChronology:chrono withInt:displayOffset withOrgJodaTimeDateTimeZone:displayZone withJavaUtilLocale:locale];
  }
}

- (void)printToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable
       withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                   withJavaUtilLocale:(JavaUtilLocale *)locale {
  IOSObjectArray *elements = iPrinters_;
  if (elements == nil) {
    @throw new_JavaLangUnsupportedOperationException_init();
  }
  if (locale == nil) {
    locale = JavaUtilLocale_getDefault();
  }
  jint len = elements->size_;
  for (jint i = 0; i < len; i++) {
    [((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(IOSObjectArray_Get(elements, i))) printToWithJavaLangAppendable:appendable withOrgJodaTimeReadablePartial:partial withJavaUtilLocale:locale];
  }
}

- (jint)estimateParsedLength {
  return iParsedLengthEstimate_;
}

- (jint)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                   withInt:(jint)position {
  IOSObjectArray *elements = iParsers_;
  if (elements == nil) {
    @throw new_JavaLangUnsupportedOperationException_init();
  }
  jint len = elements->size_;
  for (jint i = 0; i < len && position >= 0; i++) {
    position = [((id<OrgJodaTimeFormatInternalParser>) nil_chk(IOSObjectArray_Get(elements, i))) parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:position];
  }
  return position;
}

- (jboolean)isPrinter {
  return iPrinters_ != nil;
}

- (jboolean)isParser {
  return iParsers_ != nil;
}

- (void)decomposeWithJavaUtilList:(id<JavaUtilList>)elementPairs
                 withJavaUtilList:(id<JavaUtilList>)printerList
                 withJavaUtilList:(id<JavaUtilList>)parserList {
  OrgJodaTimeFormatDateTimeFormatterBuilder_Composite_decomposeWithJavaUtilList_withJavaUtilList_withJavaUtilList_(self, elementPairs, printerList, parserList);
}

- (void)addArrayToListWithJavaUtilList:(id<JavaUtilList>)list
                     withNSObjectArray:(IOSObjectArray *)array {
  OrgJodaTimeFormatDateTimeFormatterBuilder_Composite_addArrayToListWithJavaUtilList_withNSObjectArray_(self, list, array);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 5, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, 13, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(estimatePrintedLength);
  methods[2].selector = @selector(printToWithJavaLangAppendable:withLong:withOrgJodaTimeChronology:withInt:withOrgJodaTimeDateTimeZone:withJavaUtilLocale:);
  methods[3].selector = @selector(printToWithJavaLangAppendable:withOrgJodaTimeReadablePartial:withJavaUtilLocale:);
  methods[4].selector = @selector(estimateParsedLength);
  methods[5].selector = @selector(parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:);
  methods[6].selector = @selector(isPrinter);
  methods[7].selector = @selector(isParser);
  methods[8].selector = @selector(decomposeWithJavaUtilList:withJavaUtilList:withJavaUtilList:);
  methods[9].selector = @selector(addArrayToListWithJavaUtilList:withNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iPrinters_", "[LOrgJodaTimeFormatInternalPrinter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iParsers_", "[LOrgJodaTimeFormatInternalParser;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iPrintedLengthEstimate_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iParsedLengthEstimate_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Object;>;)V", "printTo", "LJavaLangAppendable;JLOrgJodaTimeChronology;ILOrgJodaTimeDateTimeZone;LJavaUtilLocale;", "LJavaIoIOException;", "LJavaLangAppendable;LOrgJodaTimeReadablePartial;LJavaUtilLocale;", "parseInto", "LOrgJodaTimeFormatDateTimeParserBucket;LJavaLangCharSequence;I", "decompose", "LJavaUtilList;LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Object;>;Ljava/util/List<Ljava/lang/Object;>;Ljava/util/List<Ljava/lang/Object;>;)V", "addArrayToList", "LJavaUtilList;[LNSObject;", "(Ljava/util/List<Ljava/lang/Object;>;[Ljava/lang/Object;)V", "LOrgJodaTimeFormatDateTimeFormatterBuilder;" };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_Composite = { "Composite", "org.joda.time.format", ptrTable, methods, fields, 7, 0x8, 10, 4, 14, -1, -1, -1, -1 };
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_Composite;
}

@end

void OrgJodaTimeFormatDateTimeFormatterBuilder_Composite_initWithJavaUtilList_(OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *self, id<JavaUtilList> elementPairs) {
  NSObject_init(self);
  id<JavaUtilList> printerList = new_JavaUtilArrayList_init();
  id<JavaUtilList> parserList = new_JavaUtilArrayList_init();
  OrgJodaTimeFormatDateTimeFormatterBuilder_Composite_decomposeWithJavaUtilList_withJavaUtilList_withJavaUtilList_(self, elementPairs, printerList, parserList);
  if ([printerList containsWithId:nil] || [printerList isEmpty]) {
    self->iPrinters_ = nil;
    self->iPrintedLengthEstimate_ = 0;
  }
  else {
    jint size = [printerList size];
    self->iPrinters_ = [IOSObjectArray newArrayWithLength:size type:OrgJodaTimeFormatInternalPrinter_class_()];
    jint printEst = 0;
    for (jint i = 0; i < size; i++) {
      id<OrgJodaTimeFormatInternalPrinter> printer = (id<OrgJodaTimeFormatInternalPrinter>) cast_check([printerList getWithInt:i], OrgJodaTimeFormatInternalPrinter_class_());
      printEst += [((id<OrgJodaTimeFormatInternalPrinter>) nil_chk(printer)) estimatePrintedLength];
      (void) IOSObjectArray_Set(self->iPrinters_, i, printer);
    }
    self->iPrintedLengthEstimate_ = printEst;
  }
  if ([parserList containsWithId:nil] || [parserList isEmpty]) {
    self->iParsers_ = nil;
    self->iParsedLengthEstimate_ = 0;
  }
  else {
    jint size = [parserList size];
    self->iParsers_ = [IOSObjectArray newArrayWithLength:size type:OrgJodaTimeFormatInternalParser_class_()];
    jint parseEst = 0;
    for (jint i = 0; i < size; i++) {
      id<OrgJodaTimeFormatInternalParser> parser = (id<OrgJodaTimeFormatInternalParser>) cast_check([parserList getWithInt:i], OrgJodaTimeFormatInternalParser_class_());
      parseEst += [((id<OrgJodaTimeFormatInternalParser>) nil_chk(parser)) estimateParsedLength];
      (void) IOSObjectArray_Set(self->iParsers_, i, parser);
    }
    self->iParsedLengthEstimate_ = parseEst;
  }
}

OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *new_OrgJodaTimeFormatDateTimeFormatterBuilder_Composite_initWithJavaUtilList_(id<JavaUtilList> elementPairs) {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_Composite, initWithJavaUtilList_, elementPairs)
}

OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *create_OrgJodaTimeFormatDateTimeFormatterBuilder_Composite_initWithJavaUtilList_(id<JavaUtilList> elementPairs) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_Composite, initWithJavaUtilList_, elementPairs)
}

void OrgJodaTimeFormatDateTimeFormatterBuilder_Composite_decomposeWithJavaUtilList_withJavaUtilList_withJavaUtilList_(OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *self, id<JavaUtilList> elementPairs, id<JavaUtilList> printerList, id<JavaUtilList> parserList) {
  jint size = [((id<JavaUtilList>) nil_chk(elementPairs)) size];
  for (jint i = 0; i < size; i += 2) {
    id element = [elementPairs getWithInt:i];
    if ([element isKindOfClass:[OrgJodaTimeFormatDateTimeFormatterBuilder_Composite class]]) {
      OrgJodaTimeFormatDateTimeFormatterBuilder_Composite_addArrayToListWithJavaUtilList_withNSObjectArray_(self, printerList, ((OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *) nil_chk(((OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *) cast_chk(element, [OrgJodaTimeFormatDateTimeFormatterBuilder_Composite class]))))->iPrinters_);
    }
    else {
      [((id<JavaUtilList>) nil_chk(printerList)) addWithId:element];
    }
    element = [elementPairs getWithInt:i + 1];
    if ([element isKindOfClass:[OrgJodaTimeFormatDateTimeFormatterBuilder_Composite class]]) {
      OrgJodaTimeFormatDateTimeFormatterBuilder_Composite_addArrayToListWithJavaUtilList_withNSObjectArray_(self, parserList, ((OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *) nil_chk(((OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *) cast_chk(element, [OrgJodaTimeFormatDateTimeFormatterBuilder_Composite class]))))->iParsers_);
    }
    else {
      [((id<JavaUtilList>) nil_chk(parserList)) addWithId:element];
    }
  }
}

void OrgJodaTimeFormatDateTimeFormatterBuilder_Composite_addArrayToListWithJavaUtilList_withNSObjectArray_(OrgJodaTimeFormatDateTimeFormatterBuilder_Composite *self, id<JavaUtilList> list, IOSObjectArray *array) {
  if (array != nil) {
    for (jint i = 0; i < array->size_; i++) {
      [((id<JavaUtilList>) nil_chk(list)) addWithId:IOSObjectArray_Get(array, i)];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormatterBuilder_Composite)

@implementation OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser

- (instancetype)initWithOrgJodaTimeFormatInternalParserArray:(IOSObjectArray *)parsers {
  OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser_initWithOrgJodaTimeFormatInternalParserArray_(self, parsers);
  return self;
}

- (jint)estimateParsedLength {
  return iParsedLengthEstimate_;
}

- (jint)parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:(OrgJodaTimeFormatDateTimeParserBucket *)bucket
                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                   withInt:(jint)position {
  IOSObjectArray *parsers = iParsers_;
  jint length = ((IOSObjectArray *) nil_chk(parsers))->size_;
  id originalState = [((OrgJodaTimeFormatDateTimeParserBucket *) nil_chk(bucket)) saveState];
  jboolean isOptional = false;
  jint bestValidPos = position;
  id bestValidState = nil;
  jint bestInvalidPos = position;
  for (jint i = 0; i < length; i++) {
    id<OrgJodaTimeFormatInternalParser> parser = IOSObjectArray_Get(parsers, i);
    if (parser == nil) {
      if (bestValidPos <= position) {
        return position;
      }
      isOptional = true;
      break;
    }
    jint parsePos = [parser parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:bucket withJavaLangCharSequence:text withInt:position];
    if (parsePos >= position) {
      if (parsePos > bestValidPos) {
        if (parsePos >= [((id<JavaLangCharSequence>) nil_chk(text)) length] || (i + 1) >= length || IOSObjectArray_Get(parsers, i + 1) == nil) {
          return parsePos;
        }
        bestValidPos = parsePos;
        bestValidState = [bucket saveState];
      }
    }
    else {
      if (parsePos < 0) {
        parsePos = ~parsePos;
        if (parsePos > bestInvalidPos) {
          bestInvalidPos = parsePos;
        }
      }
    }
    [bucket restoreStateWithId:originalState];
  }
  if (bestValidPos > position || (bestValidPos == position && isOptional)) {
    if (bestValidState != nil) {
      [bucket restoreStateWithId:bestValidState];
    }
    return bestValidPos;
  }
  return ~bestInvalidPos;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeFormatInternalParserArray:);
  methods[1].selector = @selector(estimateParsedLength);
  methods[2].selector = @selector(parseIntoWithOrgJodaTimeFormatDateTimeParserBucket:withJavaLangCharSequence:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iParsers_", "[LOrgJodaTimeFormatInternalParser;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iParsedLengthEstimate_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LOrgJodaTimeFormatInternalParser;", "parseInto", "LOrgJodaTimeFormatDateTimeParserBucket;LJavaLangCharSequence;I", "LOrgJodaTimeFormatDateTimeFormatterBuilder;" };
  static const J2ObjcClassInfo _OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser = { "MatchingParser", "org.joda.time.format", ptrTable, methods, fields, 7, 0x8, 3, 2, 3, -1, -1, -1, -1 };
  return &_OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser;
}

@end

void OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser_initWithOrgJodaTimeFormatInternalParserArray_(OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser *self, IOSObjectArray *parsers) {
  NSObject_init(self);
  self->iParsers_ = parsers;
  jint est = 0;
  for (jint i = ((IOSObjectArray *) nil_chk(parsers))->size_; --i >= 0; ) {
    id<OrgJodaTimeFormatInternalParser> parser = IOSObjectArray_Get(parsers, i);
    if (parser != nil) {
      jint len = [parser estimateParsedLength];
      if (len > est) {
        est = len;
      }
    }
  }
  self->iParsedLengthEstimate_ = est;
}

OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser *new_OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser_initWithOrgJodaTimeFormatInternalParserArray_(IOSObjectArray *parsers) {
  J2OBJC_NEW_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser, initWithOrgJodaTimeFormatInternalParserArray_, parsers)
}

OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser *create_OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser_initWithOrgJodaTimeFormatInternalParserArray_(IOSObjectArray *parsers) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser, initWithOrgJodaTimeFormatInternalParserArray_, parsers)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFormatDateTimeFormatterBuilder_MatchingParser)
