//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/chrono/GJChronology.java
//

#include "AssembledChronology.h"
#include "BaseDateTimeField.h"
#include "Chronology.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormatter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DecoratedDurationField.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "GJCacheKey.h"
#include "GJChronology.h"
#include "GregorianChronology.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "ISODateTimeFormat.h"
#include "IllegalFieldValueException.h"
#include "Instant.h"
#include "J2ObjC_source.h"
#include "JulianChronology.h"
#include "LocalDate.h"
#include "ReadableInstant.h"
#include "ReadablePartial.h"
#include "ZonedChronology.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Locale.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

@interface OrgJodaTimeChronoGJChronology () {
 @public
  OrgJodaTimeChronoJulianChronology *iJulianChronology_;
  OrgJodaTimeChronoGregorianChronology *iGregorianChronology_;
  OrgJodaTimeInstant *iCutoverInstant_;
  jlong iCutoverMillis_;
  jlong iGapDuration_;
}

+ (jlong)convertByYearWithLong:(jlong)instant
     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)from
     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)to;

+ (jlong)convertByWeekyearWithLong:(jlong)instant
         withOrgJodaTimeChronology:(OrgJodaTimeChronology *)from
         withOrgJodaTimeChronology:(OrgJodaTimeChronology *)to;

- (instancetype)initWithOrgJodaTimeChronoJulianChronology:(OrgJodaTimeChronoJulianChronology *)julian
                 withOrgJodaTimeChronoGregorianChronology:(OrgJodaTimeChronoGregorianChronology *)gregorian
                                   withOrgJodaTimeInstant:(OrgJodaTimeInstant *)cutoverInstant;

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
        withOrgJodaTimeChronoJulianChronology:(OrgJodaTimeChronoJulianChronology *)julian
     withOrgJodaTimeChronoGregorianChronology:(OrgJodaTimeChronoGregorianChronology *)gregorian
                       withOrgJodaTimeInstant:(OrgJodaTimeInstant *)cutoverInstant;

- (id)readResolve;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology, iJulianChronology_, OrgJodaTimeChronoJulianChronology *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology, iGregorianChronology_, OrgJodaTimeChronoGregorianChronology *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology, iCutoverInstant_, OrgJodaTimeInstant *)

inline jlong OrgJodaTimeChronoGJChronology_get_serialVersionUID();
#define OrgJodaTimeChronoGJChronology_serialVersionUID -2545574827706931671LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoGJChronology, serialVersionUID, jlong)

inline JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeChronoGJChronology_get_cCache();
static JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeChronoGJChronology_cCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoGJChronology, cCache, JavaUtilConcurrentConcurrentHashMap *)

__attribute__((unused)) static jlong OrgJodaTimeChronoGJChronology_convertByYearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *from, OrgJodaTimeChronology *to);

__attribute__((unused)) static jlong OrgJodaTimeChronoGJChronology_convertByWeekyearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *from, OrgJodaTimeChronology *to);

__attribute__((unused)) static void OrgJodaTimeChronoGJChronology_initWithOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_(OrgJodaTimeChronoGJChronology *self, OrgJodaTimeChronoJulianChronology *julian, OrgJodaTimeChronoGregorianChronology *gregorian, OrgJodaTimeInstant *cutoverInstant);

__attribute__((unused)) static OrgJodaTimeChronoGJChronology *new_OrgJodaTimeChronoGJChronology_initWithOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_(OrgJodaTimeChronoJulianChronology *julian, OrgJodaTimeChronoGregorianChronology *gregorian, OrgJodaTimeInstant *cutoverInstant) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoGJChronology *create_OrgJodaTimeChronoGJChronology_initWithOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_(OrgJodaTimeChronoJulianChronology *julian, OrgJodaTimeChronoGregorianChronology *gregorian, OrgJodaTimeInstant *cutoverInstant);

__attribute__((unused)) static void OrgJodaTimeChronoGJChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_(OrgJodaTimeChronoGJChronology *self, OrgJodaTimeChronology *base, OrgJodaTimeChronoJulianChronology *julian, OrgJodaTimeChronoGregorianChronology *gregorian, OrgJodaTimeInstant *cutoverInstant);

__attribute__((unused)) static OrgJodaTimeChronoGJChronology *new_OrgJodaTimeChronoGJChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_(OrgJodaTimeChronology *base, OrgJodaTimeChronoJulianChronology *julian, OrgJodaTimeChronoGregorianChronology *gregorian, OrgJodaTimeInstant *cutoverInstant) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoGJChronology *create_OrgJodaTimeChronoGJChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_(OrgJodaTimeChronology *base, OrgJodaTimeChronoJulianChronology *julian, OrgJodaTimeChronoGregorianChronology *gregorian, OrgJodaTimeInstant *cutoverInstant);

@interface OrgJodaTimeChronoGJChronology_CutoverField : OrgJodaTimeFieldBaseDateTimeField {
 @public
  OrgJodaTimeChronoGJChronology *this$0_;
  OrgJodaTimeDateTimeField *iJulianField_;
  OrgJodaTimeDateTimeField *iGregorianField_;
  jlong iCutover_;
  jboolean iConvertByWeekyear_;
  OrgJodaTimeDurationField *iDurationField_;
  OrgJodaTimeDurationField *iRangeDurationField_;
}

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                             withLong:(jlong)cutoverMillis;

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                             withLong:(jlong)cutoverMillis
                                          withBoolean:(jboolean)convertByWeekyear;

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeField
                                             withLong:(jlong)cutoverMillis
                                          withBoolean:(jboolean)convertByWeekyear;

- (jboolean)isLenient;

- (jint)getWithLong:(jlong)instant;

- (NSString *)getAsTextWithLong:(jlong)instant
             withJavaUtilLocale:(JavaUtilLocale *)locale;

- (NSString *)getAsTextWithInt:(jint)fieldValue
            withJavaUtilLocale:(JavaUtilLocale *)locale;

- (NSString *)getAsShortTextWithLong:(jlong)instant
                  withJavaUtilLocale:(JavaUtilLocale *)locale;

- (NSString *)getAsShortTextWithInt:(jint)fieldValue
                 withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value;

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value;

- (IOSIntArray *)addWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                           withInt:(jint)fieldIndex
                                      withIntArray:(IOSIntArray *)values
                                           withInt:(jint)valueToAdd;

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant;

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant;

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)value;

- (jlong)setWithLong:(jlong)instant
        withNSString:(NSString *)text
  withJavaUtilLocale:(JavaUtilLocale *)locale;

- (OrgJodaTimeDurationField *)getDurationField;

- (OrgJodaTimeDurationField *)getRangeDurationField;

- (jboolean)isLeapWithLong:(jlong)instant;

- (jint)getLeapAmountWithLong:(jlong)instant;

- (OrgJodaTimeDurationField *)getLeapDurationField;

- (jint)getMinimumValue;

- (jint)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial;

- (jint)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                         withIntArray:(IOSIntArray *)values;

- (jint)getMinimumValueWithLong:(jlong)instant;

- (jint)getMaximumValue;

- (jint)getMaximumValueWithLong:(jlong)instant;

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial;

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                         withIntArray:(IOSIntArray *)values;

- (jlong)roundFloorWithLong:(jlong)instant;

- (jlong)roundCeilingWithLong:(jlong)instant;

- (jint)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)getMaximumShortTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale;

- (jlong)julianToGregorianWithLong:(jlong)instant;

- (jlong)gregorianToJulianWithLong:(jlong)instant;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeChronoGJChronology_CutoverField)

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology_CutoverField, this$0_, OrgJodaTimeChronoGJChronology *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology_CutoverField, iJulianField_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology_CutoverField, iGregorianField_, OrgJodaTimeDateTimeField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology_CutoverField, iDurationField_, OrgJodaTimeDurationField *)
J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology_CutoverField, iRangeDurationField_, OrgJodaTimeDurationField *)

inline jlong OrgJodaTimeChronoGJChronology_CutoverField_get_serialVersionUID();
#define OrgJodaTimeChronoGJChronology_CutoverField_serialVersionUID 3528501219481026402LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoGJChronology_CutoverField, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(OrgJodaTimeChronoGJChronology_CutoverField *self, OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, jlong cutoverMillis);

__attribute__((unused)) static OrgJodaTimeChronoGJChronology_CutoverField *new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, jlong cutoverMillis) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoGJChronology_CutoverField *create_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, jlong cutoverMillis);

__attribute__((unused)) static void OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_withBoolean_(OrgJodaTimeChronoGJChronology_CutoverField *self, OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, jlong cutoverMillis, jboolean convertByWeekyear);

__attribute__((unused)) static OrgJodaTimeChronoGJChronology_CutoverField *new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_withBoolean_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, jlong cutoverMillis, jboolean convertByWeekyear) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoGJChronology_CutoverField *create_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_withBoolean_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, jlong cutoverMillis, jboolean convertByWeekyear);

__attribute__((unused)) static void OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(OrgJodaTimeChronoGJChronology_CutoverField *self, OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *rangeField, jlong cutoverMillis, jboolean convertByWeekyear);

__attribute__((unused)) static OrgJodaTimeChronoGJChronology_CutoverField *new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *rangeField, jlong cutoverMillis, jboolean convertByWeekyear) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoGJChronology_CutoverField *create_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *rangeField, jlong cutoverMillis, jboolean convertByWeekyear);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoGJChronology_CutoverField)

@interface OrgJodaTimeChronoGJChronology_ImpreciseCutoverField : OrgJodaTimeChronoGJChronology_CutoverField {
 @public
  OrgJodaTimeChronoGJChronology *this$1_;
}

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                             withLong:(jlong)cutoverMillis;

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                                             withLong:(jlong)cutoverMillis;

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeDurationField
                                             withLong:(jlong)cutoverMillis;

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                                             withLong:(jlong)cutoverMillis
                                          withBoolean:(jboolean)convertByWeekyear;

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value;

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value;

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant;

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant;

- (jint)getMinimumValueWithLong:(jlong)instant;

- (jint)getMaximumValueWithLong:(jlong)instant;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField)

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField, this$1_, OrgJodaTimeChronoGJChronology *)

inline jlong OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_get_serialVersionUID();
#define OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_serialVersionUID 3410248757173576441LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *self, OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, jlong cutoverMillis);

__attribute__((unused)) static OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *new_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, jlong cutoverMillis) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *create_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, jlong cutoverMillis);

__attribute__((unused)) static void OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *self, OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *durationField, jlong cutoverMillis);

__attribute__((unused)) static OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *new_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *durationField, jlong cutoverMillis) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *create_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *durationField, jlong cutoverMillis);

__attribute__((unused)) static void OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withLong_(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *self, OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, jlong cutoverMillis);

__attribute__((unused)) static OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *new_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withLong_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, jlong cutoverMillis) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *create_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withLong_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, jlong cutoverMillis);

__attribute__((unused)) static void OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *self, OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *durationField, jlong cutoverMillis, jboolean convertByWeekyear);

__attribute__((unused)) static OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *new_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *durationField, jlong cutoverMillis, jboolean convertByWeekyear) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *create_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *durationField, jlong cutoverMillis, jboolean convertByWeekyear);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField)

@interface OrgJodaTimeChronoGJChronology_LinkedDurationField : OrgJodaTimeFieldDecoratedDurationField {
 @public
  OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *iField_LinkedDurationField_;
}

- (instancetype)initWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField:(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *)dateTimeField;

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value;

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value;

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant;

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaTimeChronoGJChronology_LinkedDurationField)

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoGJChronology_LinkedDurationField, iField_LinkedDurationField_, OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *)

inline jlong OrgJodaTimeChronoGJChronology_LinkedDurationField_get_serialVersionUID();
#define OrgJodaTimeChronoGJChronology_LinkedDurationField_serialVersionUID 4097975388007713084LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoGJChronology_LinkedDurationField, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJodaTimeChronoGJChronology_LinkedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField_(OrgJodaTimeChronoGJChronology_LinkedDurationField *self, OrgJodaTimeDurationField *durationField, OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *dateTimeField);

__attribute__((unused)) static OrgJodaTimeChronoGJChronology_LinkedDurationField *new_OrgJodaTimeChronoGJChronology_LinkedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField_(OrgJodaTimeDurationField *durationField, OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *dateTimeField) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoGJChronology_LinkedDurationField *create_OrgJodaTimeChronoGJChronology_LinkedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField_(OrgJodaTimeDurationField *durationField, OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *dateTimeField);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoGJChronology_LinkedDurationField)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeChronoGJChronology)

OrgJodaTimeInstant *OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER;

@implementation OrgJodaTimeChronoGJChronology

+ (jlong)convertByYearWithLong:(jlong)instant
     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)from
     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)to {
  return OrgJodaTimeChronoGJChronology_convertByYearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(instant, from, to);
}

+ (jlong)convertByWeekyearWithLong:(jlong)instant
         withOrgJodaTimeChronology:(OrgJodaTimeChronology *)from
         withOrgJodaTimeChronology:(OrgJodaTimeChronology *)to {
  return OrgJodaTimeChronoGJChronology_convertByWeekyearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(instant, from, to);
}

+ (OrgJodaTimeChronoGJChronology *)getInstanceUTC {
  return OrgJodaTimeChronoGJChronology_getInstanceUTC();
}

+ (OrgJodaTimeChronoGJChronology *)getInstance {
  return OrgJodaTimeChronoGJChronology_getInstance();
}

+ (OrgJodaTimeChronoGJChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeChronoGJChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                           withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)gregorianCutover {
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_(zone, gregorianCutover);
}

+ (OrgJodaTimeChronoGJChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                           withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)gregorianCutover
                                                                  withInt:(jint)minDaysInFirstWeek {
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_(zone, gregorianCutover, minDaysInFirstWeek);
}

+ (OrgJodaTimeChronoGJChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                                                 withLong:(jlong)gregorianCutover
                                                                  withInt:(jint)minDaysInFirstWeek {
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withLong_withInt_(zone, gregorianCutover, minDaysInFirstWeek);
}

- (instancetype)initWithOrgJodaTimeChronoJulianChronology:(OrgJodaTimeChronoJulianChronology *)julian
                 withOrgJodaTimeChronoGregorianChronology:(OrgJodaTimeChronoGregorianChronology *)gregorian
                                   withOrgJodaTimeInstant:(OrgJodaTimeInstant *)cutoverInstant {
  OrgJodaTimeChronoGJChronology_initWithOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_(self, julian, gregorian, cutoverInstant);
  return self;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
        withOrgJodaTimeChronoJulianChronology:(OrgJodaTimeChronoJulianChronology *)julian
     withOrgJodaTimeChronoGregorianChronology:(OrgJodaTimeChronoGregorianChronology *)gregorian
                       withOrgJodaTimeInstant:(OrgJodaTimeInstant *)cutoverInstant {
  OrgJodaTimeChronoGJChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_(self, base, julian, gregorian, cutoverInstant);
  return self;
}

- (id)readResolve {
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_([self getZone], iCutoverInstant_, [self getMinimumDaysInFirstWeek]);
}

- (OrgJodaTimeDateTimeZone *)getZone {
  OrgJodaTimeChronology *base;
  if ((base = [self getBase]) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getZone];
  }
  return JreLoadStatic(OrgJodaTimeDateTimeZone, UTC);
}

- (OrgJodaTimeChronology *)withUTC {
  return [self withZoneWithOrgJodaTimeDateTimeZone:JreLoadStatic(OrgJodaTimeDateTimeZone, UTC)];
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  if (zone == [self getZone]) {
    return self;
  }
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_(zone, iCutoverInstant_, [self getMinimumDaysInFirstWeek]);
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)millisOfDay {
  OrgJodaTimeChronology *base;
  if ((base = [self getBase]) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
  }
  jlong instant = [((OrgJodaTimeChronoGregorianChronology *) nil_chk(iGregorianChronology_)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
  if (instant < iCutoverMillis_) {
    instant = [((OrgJodaTimeChronoJulianChronology *) nil_chk(iJulianChronology_)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay];
    if (instant >= iCutoverMillis_) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Specified date does not exist");
    }
  }
  return instant;
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)hourOfDay
                          withInt:(jint)minuteOfHour
                          withInt:(jint)secondOfMinute
                          withInt:(jint)millisOfSecond {
  OrgJodaTimeChronology *base;
  if ((base = [self getBase]) != nil) {
    return [((OrgJodaTimeChronology *) nil_chk(base)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  }
  jlong instant;
  @try {
    instant = [((OrgJodaTimeChronoGregorianChronology *) nil_chk(iGregorianChronology_)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  }
  @catch (OrgJodaTimeIllegalFieldValueException *ex) {
    if (monthOfYear != 2 || dayOfMonth != 29) {
      @throw ex;
    }
    instant = [((OrgJodaTimeChronoGregorianChronology *) nil_chk(iGregorianChronology_)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:28 withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
    if (instant >= iCutoverMillis_) {
      @throw ex;
    }
  }
  if (instant < iCutoverMillis_) {
    instant = [((OrgJodaTimeChronoJulianChronology *) nil_chk(iJulianChronology_)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
    if (instant >= iCutoverMillis_) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Specified date does not exist");
    }
  }
  return instant;
}

- (OrgJodaTimeInstant *)getGregorianCutover {
  return iCutoverInstant_;
}

- (jint)getMinimumDaysInFirstWeek {
  return [((OrgJodaTimeChronoGregorianChronology *) nil_chk(iGregorianChronology_)) getMinimumDaysInFirstWeek];
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if ([obj isKindOfClass:[OrgJodaTimeChronoGJChronology class]]) {
    OrgJodaTimeChronoGJChronology *chrono = (OrgJodaTimeChronoGJChronology *) cast_chk(obj, [OrgJodaTimeChronoGJChronology class]);
    return iCutoverMillis_ == ((OrgJodaTimeChronoGJChronology *) nil_chk(chrono))->iCutoverMillis_ && [self getMinimumDaysInFirstWeek] == [chrono getMinimumDaysInFirstWeek] && [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) isEqual:[chrono getZone]];
  }
  return false;
}

- (NSUInteger)hash {
  return ((jint) [@"GJ" hash]) * 11 + ((jint) [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) hash]) + [self getMinimumDaysInFirstWeek] + ((jint) [((OrgJodaTimeInstant *) nil_chk(iCutoverInstant_)) hash]);
}

- (NSString *)description {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_initWithInt_(60);
  (void) [sb appendWithNSString:@"GJChronology"];
  (void) [sb appendWithChar:'['];
  (void) [sb appendWithNSString:[((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) getID]];
  if (iCutoverMillis_ != [((OrgJodaTimeInstant *) nil_chk(OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER)) getMillis]) {
    (void) [sb appendWithNSString:@",cutover="];
    OrgJodaTimeFormatDateTimeFormatter *printer;
    if ([((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self withUTC])) dayOfYear])) remainderWithLong:iCutoverMillis_] == 0) {
      printer = OrgJodaTimeFormatISODateTimeFormat_date();
    }
    else {
      printer = OrgJodaTimeFormatISODateTimeFormat_dateTime();
    }
    [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(printer)) withChronologyWithOrgJodaTimeChronology:[self withUTC]])) printToWithJavaLangStringBuffer:sb withLong:iCutoverMillis_];
  }
  if ([self getMinimumDaysInFirstWeek] != 4) {
    (void) [sb appendWithNSString:@",mdfw="];
    (void) [sb appendWithInt:[self getMinimumDaysInFirstWeek]];
  }
  (void) [sb appendWithChar:']'];
  return [sb description];
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  IOSObjectArray *params = (IOSObjectArray *) cast_check([self getParam], IOSClass_arrayType(NSObject_class_(), 1));
  OrgJodaTimeChronoJulianChronology *julian = (OrgJodaTimeChronoJulianChronology *) cast_chk(IOSObjectArray_Get(nil_chk(params), 0), [OrgJodaTimeChronoJulianChronology class]);
  OrgJodaTimeChronoGregorianChronology *gregorian = (OrgJodaTimeChronoGregorianChronology *) cast_chk(IOSObjectArray_Get(params, 1), [OrgJodaTimeChronoGregorianChronology class]);
  OrgJodaTimeInstant *cutoverInstant = (OrgJodaTimeInstant *) cast_chk(IOSObjectArray_Get(params, 2), [OrgJodaTimeInstant class]);
  iCutoverMillis_ = [((OrgJodaTimeInstant *) nil_chk(cutoverInstant)) getMillis];
  iJulianChronology_ = julian;
  iGregorianChronology_ = gregorian;
  iCutoverInstant_ = cutoverInstant;
  if ([self getBase] != nil) {
    return;
  }
  if ([((OrgJodaTimeChronoJulianChronology *) nil_chk(julian)) getMinimumDaysInFirstWeek] != [((OrgJodaTimeChronoGregorianChronology *) nil_chk(gregorian)) getMinimumDaysInFirstWeek]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  iGapDuration_ = iCutoverMillis_ - [self julianToGregorianByYearWithLong:iCutoverMillis_];
  [((OrgJodaTimeChronoAssembledChronology_Fields *) nil_chk(fields)) copyFieldsFromWithOrgJodaTimeChronology:gregorian];
  if ([((OrgJodaTimeDateTimeField *) nil_chk([gregorian millisOfDay])) getWithLong:iCutoverMillis_] == 0) {
    fields->millisOfSecond_ = new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(self, [julian millisOfSecond], fields->millisOfSecond_, iCutoverMillis_);
    fields->millisOfDay_ = new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(self, [julian millisOfDay], fields->millisOfDay_, iCutoverMillis_);
    fields->secondOfMinute_ = new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(self, [julian secondOfMinute], fields->secondOfMinute_, iCutoverMillis_);
    fields->secondOfDay_ = new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(self, [julian secondOfDay], fields->secondOfDay_, iCutoverMillis_);
    fields->minuteOfHour_ = new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(self, [julian minuteOfHour], fields->minuteOfHour_, iCutoverMillis_);
    fields->minuteOfDay_ = new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(self, [julian minuteOfDay], fields->minuteOfDay_, iCutoverMillis_);
    fields->hourOfDay_ = new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(self, [julian hourOfDay], fields->hourOfDay_, iCutoverMillis_);
    fields->hourOfHalfday_ = new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(self, [julian hourOfHalfday], fields->hourOfHalfday_, iCutoverMillis_);
    fields->clockhourOfDay_ = new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(self, [julian clockhourOfDay], fields->clockhourOfDay_, iCutoverMillis_);
    fields->clockhourOfHalfday_ = new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(self, [julian clockhourOfHalfday], fields->clockhourOfHalfday_, iCutoverMillis_);
    fields->halfdayOfDay_ = new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(self, [julian halfdayOfDay], fields->halfdayOfDay_, iCutoverMillis_);
  }
  {
    fields->era_ = new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(self, [julian era], fields->era_, iCutoverMillis_);
  }
  {
    fields->year_ = new_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(self, [julian year], fields->year_, iCutoverMillis_);
    fields->years_ = [fields->year_ getDurationField];
    fields->yearOfEra_ = new_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_(self, [julian yearOfEra], fields->yearOfEra_, fields->years_, iCutoverMillis_);
    fields->centuryOfEra_ = new_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(self, [julian centuryOfEra], fields->centuryOfEra_, iCutoverMillis_);
    fields->centuries_ = [fields->centuryOfEra_ getDurationField];
    fields->yearOfCentury_ = new_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withLong_(self, [julian yearOfCentury], fields->yearOfCentury_, fields->years_, fields->centuries_, iCutoverMillis_);
    fields->monthOfYear_ = new_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withLong_(self, [julian monthOfYear], fields->monthOfYear_, nil, fields->years_, iCutoverMillis_);
    fields->months_ = [fields->monthOfYear_ getDurationField];
    fields->weekyear_ = new_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(self, [julian weekyear], fields->weekyear_, nil, iCutoverMillis_, true);
    fields->weekyears_ = [fields->weekyear_ getDurationField];
    fields->weekyearOfCentury_ = new_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withLong_(self, [julian weekyearOfCentury], fields->weekyearOfCentury_, fields->weekyears_, fields->centuries_, iCutoverMillis_);
  }
  {
    jlong cutover = [((OrgJodaTimeDateTimeField *) nil_chk([gregorian year])) roundCeilingWithLong:iCutoverMillis_];
    fields->dayOfYear_ = new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(self, [julian dayOfYear], fields->dayOfYear_, fields->years_, cutover, false);
  }
  {
    jlong cutover = [((OrgJodaTimeDateTimeField *) nil_chk([gregorian weekyear])) roundCeilingWithLong:iCutoverMillis_];
    fields->weekOfWeekyear_ = new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(self, [julian weekOfWeekyear], fields->weekOfWeekyear_, fields->weekyears_, cutover, true);
  }
  {
    OrgJodaTimeChronoGJChronology_CutoverField *cf = new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(self, [julian dayOfMonth], fields->dayOfMonth_, iCutoverMillis_);
    cf->iRangeDurationField_ = fields->months_;
    fields->dayOfMonth_ = cf;
  }
}

- (jlong)julianToGregorianByYearWithLong:(jlong)instant {
  return OrgJodaTimeChronoGJChronology_convertByYearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(instant, iJulianChronology_, iGregorianChronology_);
}

- (jlong)gregorianToJulianByYearWithLong:(jlong)instant {
  return OrgJodaTimeChronoGJChronology_convertByYearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(instant, iGregorianChronology_, iJulianChronology_);
}

- (jlong)julianToGregorianByWeekyearWithLong:(jlong)instant {
  return OrgJodaTimeChronoGJChronology_convertByWeekyearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(instant, iJulianChronology_, iGregorianChronology_);
}

- (jlong)gregorianToJulianByWeekyearWithLong:(jlong)instant {
  return OrgJodaTimeChronoGJChronology_convertByWeekyearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(instant, iGregorianChronology_, iJulianChronology_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "J", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronoGJChronology;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronoGJChronology;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronoGJChronology;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronoGJChronology;", 0x9, 3, 5, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronoGJChronology;", 0x9, 3, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronoGJChronology;", 0x9, 3, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 8, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeZone;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 11, 12, 13, -1, -1, -1 },
    { NULL, "J", 0x1, 11, 14, 13, -1, -1, -1 },
    { NULL, "LOrgJodaTimeInstant;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 19, 20, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 21, 22, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 23, 22, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 24, 22, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 25, 22, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertByYearWithLong:withOrgJodaTimeChronology:withOrgJodaTimeChronology:);
  methods[1].selector = @selector(convertByWeekyearWithLong:withOrgJodaTimeChronology:withOrgJodaTimeChronology:);
  methods[2].selector = @selector(getInstanceUTC);
  methods[3].selector = @selector(getInstance);
  methods[4].selector = @selector(getInstanceWithOrgJodaTimeDateTimeZone:);
  methods[5].selector = @selector(getInstanceWithOrgJodaTimeDateTimeZone:withOrgJodaTimeReadableInstant:);
  methods[6].selector = @selector(getInstanceWithOrgJodaTimeDateTimeZone:withOrgJodaTimeReadableInstant:withInt:);
  methods[7].selector = @selector(getInstanceWithOrgJodaTimeDateTimeZone:withLong:withInt:);
  methods[8].selector = @selector(initWithOrgJodaTimeChronoJulianChronology:withOrgJodaTimeChronoGregorianChronology:withOrgJodaTimeInstant:);
  methods[9].selector = @selector(initWithOrgJodaTimeChronology:withOrgJodaTimeChronoJulianChronology:withOrgJodaTimeChronoGregorianChronology:withOrgJodaTimeInstant:);
  methods[10].selector = @selector(readResolve);
  methods[11].selector = @selector(getZone);
  methods[12].selector = @selector(withUTC);
  methods[13].selector = @selector(withZoneWithOrgJodaTimeDateTimeZone:);
  methods[14].selector = @selector(getDateTimeMillisWithInt:withInt:withInt:withInt:);
  methods[15].selector = @selector(getDateTimeMillisWithInt:withInt:withInt:withInt:withInt:withInt:withInt:);
  methods[16].selector = @selector(getGregorianCutover);
  methods[17].selector = @selector(getMinimumDaysInFirstWeek);
  methods[18].selector = @selector(isEqual:);
  methods[19].selector = @selector(hash);
  methods[20].selector = @selector(description);
  methods[21].selector = @selector(assembleWithOrgJodaTimeChronoAssembledChronology_Fields:);
  methods[22].selector = @selector(julianToGregorianByYearWithLong:);
  methods[23].selector = @selector(gregorianToJulianByYearWithLong:);
  methods[24].selector = @selector(julianToGregorianByWeekyearWithLong:);
  methods[25].selector = @selector(gregorianToJulianByWeekyearWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeChronoGJChronology_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_CUTOVER", "LOrgJodaTimeInstant;", .constantValue.asLong = 0, 0x18, -1, 26, -1, -1 },
    { "cCache", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x1a, -1, 27, 28, -1 },
    { "iJulianChronology_", "LOrgJodaTimeChronoJulianChronology;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iGregorianChronology_", "LOrgJodaTimeChronoGregorianChronology;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iCutoverInstant_", "LOrgJodaTimeInstant;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iCutoverMillis_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iGapDuration_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "convertByYear", "JLOrgJodaTimeChronology;LOrgJodaTimeChronology;", "convertByWeekyear", "getInstance", "LOrgJodaTimeDateTimeZone;", "LOrgJodaTimeDateTimeZone;LOrgJodaTimeReadableInstant;", "LOrgJodaTimeDateTimeZone;LOrgJodaTimeReadableInstant;I", "LOrgJodaTimeDateTimeZone;JI", "LOrgJodaTimeChronoJulianChronology;LOrgJodaTimeChronoGregorianChronology;LOrgJodaTimeInstant;", "LOrgJodaTimeChronology;LOrgJodaTimeChronoJulianChronology;LOrgJodaTimeChronoGregorianChronology;LOrgJodaTimeInstant;", "withZone", "getDateTimeMillis", "IIII", "LJavaLangIllegalArgumentException;", "IIIIIII", "equals", "LNSObject;", "hashCode", "toString", "assemble", "LOrgJodaTimeChronoAssembledChronology_Fields;", "julianToGregorianByYear", "J", "gregorianToJulianByYear", "julianToGregorianByWeekyear", "gregorianToJulianByWeekyear", &OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER, &OrgJodaTimeChronoGJChronology_cCache, "Ljava/util/concurrent/ConcurrentHashMap<Lorg/joda/time/chrono/GJCacheKey;Lorg/joda/time/chrono/GJChronology;>;", "LOrgJodaTimeChronoGJChronology_CutoverField;LOrgJodaTimeChronoGJChronology_ImpreciseCutoverField;LOrgJodaTimeChronoGJChronology_LinkedDurationField;" };
  static const J2ObjcClassInfo _OrgJodaTimeChronoGJChronology = { "GJChronology", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0x11, 26, 8, -1, 29, -1, -1, -1 };
  return &_OrgJodaTimeChronoGJChronology;
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoGJChronology class]) {
    OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER = new_OrgJodaTimeInstant_initWithLong_(-12219292800000LL);
    OrgJodaTimeChronoGJChronology_cCache = new_JavaUtilConcurrentConcurrentHashMap_init();
    J2OBJC_SET_INITIALIZED(OrgJodaTimeChronoGJChronology)
  }
}

@end

jlong OrgJodaTimeChronoGJChronology_convertByYearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *from, OrgJodaTimeChronology *to) {
  OrgJodaTimeChronoGJChronology_initialize();
  return [((OrgJodaTimeChronology *) nil_chk(to)) getDateTimeMillisWithInt:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(from)) year])) getWithLong:instant] withInt:[((OrgJodaTimeDateTimeField *) nil_chk([from monthOfYear])) getWithLong:instant] withInt:[((OrgJodaTimeDateTimeField *) nil_chk([from dayOfMonth])) getWithLong:instant] withInt:[((OrgJodaTimeDateTimeField *) nil_chk([from millisOfDay])) getWithLong:instant]];
}

jlong OrgJodaTimeChronoGJChronology_convertByWeekyearWithLong_withOrgJodaTimeChronology_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *from, OrgJodaTimeChronology *to) {
  OrgJodaTimeChronoGJChronology_initialize();
  jlong newInstant;
  newInstant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(to)) weekyear])) setWithLong:0 withInt:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(from)) weekyear])) getWithLong:instant]];
  newInstant = [((OrgJodaTimeDateTimeField *) nil_chk([to weekOfWeekyear])) setWithLong:newInstant withInt:[((OrgJodaTimeDateTimeField *) nil_chk([from weekOfWeekyear])) getWithLong:instant]];
  newInstant = [((OrgJodaTimeDateTimeField *) nil_chk([to dayOfWeek])) setWithLong:newInstant withInt:[((OrgJodaTimeDateTimeField *) nil_chk([from dayOfWeek])) getWithLong:instant]];
  newInstant = [((OrgJodaTimeDateTimeField *) nil_chk([to millisOfDay])) setWithLong:newInstant withInt:[((OrgJodaTimeDateTimeField *) nil_chk([from millisOfDay])) getWithLong:instant]];
  return newInstant;
}

OrgJodaTimeChronoGJChronology *OrgJodaTimeChronoGJChronology_getInstanceUTC() {
  OrgJodaTimeChronoGJChronology_initialize();
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_(JreLoadStatic(OrgJodaTimeDateTimeZone, UTC), OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER, 4);
}

OrgJodaTimeChronoGJChronology *OrgJodaTimeChronoGJChronology_getInstance() {
  OrgJodaTimeChronoGJChronology_initialize();
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_(OrgJodaTimeDateTimeZone_getDefault(), OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER, 4);
}

OrgJodaTimeChronoGJChronology *OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeChronoGJChronology_initialize();
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_(zone, OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER, 4);
}

OrgJodaTimeChronoGJChronology *OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_(OrgJodaTimeDateTimeZone *zone, id<OrgJodaTimeReadableInstant> gregorianCutover) {
  OrgJodaTimeChronoGJChronology_initialize();
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_(zone, gregorianCutover, 4);
}

OrgJodaTimeChronoGJChronology *OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_(OrgJodaTimeDateTimeZone *zone, id<OrgJodaTimeReadableInstant> gregorianCutover, jint minDaysInFirstWeek) {
  OrgJodaTimeChronoGJChronology_initialize();
  zone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(zone);
  OrgJodaTimeInstant *cutoverInstant;
  if (gregorianCutover == nil) {
    cutoverInstant = OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER;
  }
  else {
    cutoverInstant = [gregorianCutover toInstant];
    OrgJodaTimeLocalDate *cutoverDate = new_OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_([((OrgJodaTimeInstant *) nil_chk(cutoverInstant)) getMillis], OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone));
    if ([cutoverDate getYear] <= 0) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cutover too early. Must be on or after 0001-01-01.");
    }
  }
  OrgJodaTimeChronoGJCacheKey *cacheKey = new_OrgJodaTimeChronoGJCacheKey_initWithOrgJodaTimeDateTimeZone_withOrgJodaTimeInstant_withInt_(zone, cutoverInstant, minDaysInFirstWeek);
  OrgJodaTimeChronoGJChronology *chrono = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(OrgJodaTimeChronoGJChronology_cCache)) getWithId:cacheKey];
  if (chrono == nil) {
    if (zone == JreLoadStatic(OrgJodaTimeDateTimeZone, UTC)) {
      chrono = new_OrgJodaTimeChronoGJChronology_initWithOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_(OrgJodaTimeChronoJulianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(zone, minDaysInFirstWeek), OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(zone, minDaysInFirstWeek), cutoverInstant);
    }
    else {
      chrono = OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_(JreLoadStatic(OrgJodaTimeDateTimeZone, UTC), cutoverInstant, minDaysInFirstWeek);
      chrono = new_OrgJodaTimeChronoGJChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_(OrgJodaTimeChronoZonedChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(chrono, zone), ((OrgJodaTimeChronoGJChronology *) nil_chk(chrono))->iJulianChronology_, chrono->iGregorianChronology_, chrono->iCutoverInstant_);
    }
    OrgJodaTimeChronoGJChronology *oldChrono = [OrgJodaTimeChronoGJChronology_cCache putIfAbsentWithId:cacheKey withId:chrono];
    if (oldChrono != nil) {
      chrono = oldChrono;
    }
  }
  return chrono;
}

OrgJodaTimeChronoGJChronology *OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withLong_withInt_(OrgJodaTimeDateTimeZone *zone, jlong gregorianCutover, jint minDaysInFirstWeek) {
  OrgJodaTimeChronoGJChronology_initialize();
  OrgJodaTimeInstant *cutoverInstant;
  if (gregorianCutover == [((OrgJodaTimeInstant *) nil_chk(OrgJodaTimeChronoGJChronology_DEFAULT_CUTOVER)) getMillis]) {
    cutoverInstant = nil;
  }
  else {
    cutoverInstant = new_OrgJodaTimeInstant_initWithLong_(gregorianCutover);
  }
  return OrgJodaTimeChronoGJChronology_getInstanceWithOrgJodaTimeDateTimeZone_withOrgJodaTimeReadableInstant_withInt_(zone, cutoverInstant, minDaysInFirstWeek);
}

void OrgJodaTimeChronoGJChronology_initWithOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_(OrgJodaTimeChronoGJChronology *self, OrgJodaTimeChronoJulianChronology *julian, OrgJodaTimeChronoGregorianChronology *gregorian, OrgJodaTimeInstant *cutoverInstant) {
  OrgJodaTimeChronoAssembledChronology_initWithOrgJodaTimeChronology_withId_(self, nil, [IOSObjectArray newArrayWithObjects:(id[]){ julian, gregorian, cutoverInstant } count:3 type:NSObject_class_()]);
}

OrgJodaTimeChronoGJChronology *new_OrgJodaTimeChronoGJChronology_initWithOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_(OrgJodaTimeChronoJulianChronology *julian, OrgJodaTimeChronoGregorianChronology *gregorian, OrgJodaTimeInstant *cutoverInstant) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoGJChronology, initWithOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_, julian, gregorian, cutoverInstant)
}

OrgJodaTimeChronoGJChronology *create_OrgJodaTimeChronoGJChronology_initWithOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_(OrgJodaTimeChronoJulianChronology *julian, OrgJodaTimeChronoGregorianChronology *gregorian, OrgJodaTimeInstant *cutoverInstant) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoGJChronology, initWithOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_, julian, gregorian, cutoverInstant)
}

void OrgJodaTimeChronoGJChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_(OrgJodaTimeChronoGJChronology *self, OrgJodaTimeChronology *base, OrgJodaTimeChronoJulianChronology *julian, OrgJodaTimeChronoGregorianChronology *gregorian, OrgJodaTimeInstant *cutoverInstant) {
  OrgJodaTimeChronoAssembledChronology_initWithOrgJodaTimeChronology_withId_(self, base, [IOSObjectArray newArrayWithObjects:(id[]){ julian, gregorian, cutoverInstant } count:3 type:NSObject_class_()]);
}

OrgJodaTimeChronoGJChronology *new_OrgJodaTimeChronoGJChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_(OrgJodaTimeChronology *base, OrgJodaTimeChronoJulianChronology *julian, OrgJodaTimeChronoGregorianChronology *gregorian, OrgJodaTimeInstant *cutoverInstant) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoGJChronology, initWithOrgJodaTimeChronology_withOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_, base, julian, gregorian, cutoverInstant)
}

OrgJodaTimeChronoGJChronology *create_OrgJodaTimeChronoGJChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_(OrgJodaTimeChronology *base, OrgJodaTimeChronoJulianChronology *julian, OrgJodaTimeChronoGregorianChronology *gregorian, OrgJodaTimeInstant *cutoverInstant) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoGJChronology, initWithOrgJodaTimeChronology_withOrgJodaTimeChronoJulianChronology_withOrgJodaTimeChronoGregorianChronology_withOrgJodaTimeInstant_, base, julian, gregorian, cutoverInstant)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoGJChronology)

@implementation OrgJodaTimeChronoGJChronology_CutoverField

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                             withLong:(jlong)cutoverMillis {
  OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(self, outer$, julianField, gregorianField, cutoverMillis);
  return self;
}

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                             withLong:(jlong)cutoverMillis
                                          withBoolean:(jboolean)convertByWeekyear {
  OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_withBoolean_(self, outer$, julianField, gregorianField, cutoverMillis, convertByWeekyear);
  return self;
}

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeField
                                             withLong:(jlong)cutoverMillis
                                          withBoolean:(jboolean)convertByWeekyear {
  OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(self, outer$, julianField, gregorianField, rangeField, cutoverMillis, convertByWeekyear);
  return self;
}

- (jboolean)isLenient {
  return false;
}

- (jint)getWithLong:(jlong)instant {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getWithLong:instant];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getWithLong:instant];
  }
}

- (NSString *)getAsTextWithLong:(jlong)instant
             withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getAsTextWithLong:instant withJavaUtilLocale:locale];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getAsTextWithLong:instant withJavaUtilLocale:locale];
  }
}

- (NSString *)getAsTextWithInt:(jint)fieldValue
            withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getAsTextWithInt:fieldValue withJavaUtilLocale:locale];
}

- (NSString *)getAsShortTextWithLong:(jlong)instant
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getAsShortTextWithLong:instant withJavaUtilLocale:locale];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getAsShortTextWithLong:instant withJavaUtilLocale:locale];
  }
}

- (NSString *)getAsShortTextWithInt:(jint)fieldValue
                 withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getAsShortTextWithInt:fieldValue withJavaUtilLocale:locale];
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) addWithLong:instant withInt:value];
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) addWithLong:instant withLong:value];
}

- (IOSIntArray *)addWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                           withInt:(jint)fieldIndex
                                      withIntArray:(IOSIntArray *)values
                                           withInt:(jint)valueToAdd {
  if (valueToAdd == 0) {
    return values;
  }
  if (OrgJodaTimeDateTimeUtils_isContiguousWithOrgJodaTimeReadablePartial_(partial)) {
    jlong instant = 0LL;
    for (jint i = 0, isize = [((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) size]; i < isize; i++) {
      instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk([partial getFieldTypeWithInt:i])) getFieldWithOrgJodaTimeChronology:this$0_])) setWithLong:instant withInt:IOSIntArray_Get(nil_chk(values), i)];
    }
    instant = [self addWithLong:instant withInt:valueToAdd];
    return [this$0_ getWithOrgJodaTimeReadablePartial:partial withLong:instant];
  }
  else {
    return [super addWithOrgJodaTimeReadablePartial:partial withInt:fieldIndex withIntArray:values withInt:valueToAdd];
  }
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
}

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)value {
  if (instant >= iCutover_) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) setWithLong:instant withInt:value];
    if (instant < iCutover_) {
      if (instant + this$0_->iGapDuration_ < iCutover_) {
        instant = [self gregorianToJulianWithLong:instant];
      }
      if ([self getWithLong:instant] != value) {
        @throw new_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSNumber_withNSNumber_([iGregorianField_ getType], JavaLangInteger_valueOfWithInt_(value), nil, nil);
      }
    }
  }
  else {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) setWithLong:instant withInt:value];
    if (instant >= iCutover_) {
      if (instant - this$0_->iGapDuration_ >= iCutover_) {
        instant = [self julianToGregorianWithLong:instant];
      }
      if ([self getWithLong:instant] != value) {
        @throw new_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSNumber_withNSNumber_([iJulianField_ getType], JavaLangInteger_valueOfWithInt_(value), nil, nil);
      }
    }
  }
  return instant;
}

- (jlong)setWithLong:(jlong)instant
        withNSString:(NSString *)text
  withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (instant >= iCutover_) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) setWithLong:instant withNSString:text withJavaUtilLocale:locale];
    if (instant < iCutover_) {
      if (instant + this$0_->iGapDuration_ < iCutover_) {
        instant = [self gregorianToJulianWithLong:instant];
      }
    }
  }
  else {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) setWithLong:instant withNSString:text withJavaUtilLocale:locale];
    if (instant >= iCutover_) {
      if (instant - this$0_->iGapDuration_ >= iCutover_) {
        instant = [self julianToGregorianWithLong:instant];
      }
    }
  }
  return instant;
}

- (OrgJodaTimeDurationField *)getDurationField {
  return iDurationField_;
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return iRangeDurationField_;
}

- (jboolean)isLeapWithLong:(jlong)instant {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) isLeapWithLong:instant];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) isLeapWithLong:instant];
  }
}

- (jint)getLeapAmountWithLong:(jlong)instant {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getLeapAmountWithLong:instant];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getLeapAmountWithLong:instant];
  }
}

- (OrgJodaTimeDurationField *)getLeapDurationField {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getLeapDurationField];
}

- (jint)getMinimumValue {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMinimumValue];
}

- (jint)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMinimumValueWithOrgJodaTimeReadablePartial:partial];
}

- (jint)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                         withIntArray:(IOSIntArray *)values {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMinimumValueWithOrgJodaTimeReadablePartial:partial withIntArray:values];
}

- (jint)getMinimumValueWithLong:(jlong)instant {
  if (instant < iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMinimumValueWithLong:instant];
  }
  jint min = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMinimumValueWithLong:instant];
  instant = [iGregorianField_ setWithLong:instant withInt:min];
  if (instant < iCutover_) {
    min = [iGregorianField_ getWithLong:iCutover_];
  }
  return min;
}

- (jint)getMaximumValue {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMaximumValue];
}

- (jint)getMaximumValueWithLong:(jlong)instant {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMaximumValueWithLong:instant];
  }
  jint max = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMaximumValueWithLong:instant];
  instant = [iJulianField_ setWithLong:instant withInt:max];
  if (instant >= iCutover_) {
    max = [iJulianField_ getWithLong:[iJulianField_ addWithLong:iCutover_ withInt:-1]];
  }
  return max;
}

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  jlong instant = [((OrgJodaTimeChronoGJChronology *) nil_chk(OrgJodaTimeChronoGJChronology_getInstanceUTC())) setWithOrgJodaTimeReadablePartial:partial withLong:0LL];
  return [self getMaximumValueWithLong:instant];
}

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial
                                         withIntArray:(IOSIntArray *)values {
  OrgJodaTimeChronology *chrono = OrgJodaTimeChronoGJChronology_getInstanceUTC();
  jlong instant = 0LL;
  for (jint i = 0, isize = [((id<OrgJodaTimeReadablePartial>) nil_chk(partial)) size]; i < isize; i++) {
    OrgJodaTimeDateTimeField *field = [((OrgJodaTimeDateTimeFieldType *) nil_chk([partial getFieldTypeWithInt:i])) getFieldWithOrgJodaTimeChronology:chrono];
    if (IOSIntArray_Get(nil_chk(values), i) <= [((OrgJodaTimeDateTimeField *) nil_chk(field)) getMaximumValueWithLong:instant]) {
      instant = [field setWithLong:instant withInt:IOSIntArray_Get(values, i)];
    }
  }
  return [self getMaximumValueWithLong:instant];
}

- (jlong)roundFloorWithLong:(jlong)instant {
  if (instant >= iCutover_) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) roundFloorWithLong:instant];
    if (instant < iCutover_) {
      if (instant + this$0_->iGapDuration_ < iCutover_) {
        instant = [self gregorianToJulianWithLong:instant];
      }
    }
  }
  else {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) roundFloorWithLong:instant];
  }
  return instant;
}

- (jlong)roundCeilingWithLong:(jlong)instant {
  if (instant >= iCutover_) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) roundCeilingWithLong:instant];
  }
  else {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) roundCeilingWithLong:instant];
    if (instant >= iCutover_) {
      if (instant - this$0_->iGapDuration_ >= iCutover_) {
        instant = [self julianToGregorianWithLong:instant];
      }
    }
  }
  return instant;
}

- (jint)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return JavaLangMath_maxWithInt_withInt_([((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMaximumTextLengthWithJavaUtilLocale:locale], [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMaximumTextLengthWithJavaUtilLocale:locale]);
}

- (jint)getMaximumShortTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return JavaLangMath_maxWithInt_withInt_([((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMaximumShortTextLengthWithJavaUtilLocale:locale], [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMaximumShortTextLengthWithJavaUtilLocale:locale]);
}

- (jlong)julianToGregorianWithLong:(jlong)instant {
  if (iConvertByWeekyear_) {
    return [this$0_ julianToGregorianByWeekyearWithLong:instant];
  }
  else {
    return [this$0_ julianToGregorianByYearWithLong:instant];
  }
}

- (jlong)gregorianToJulianWithLong:(jlong)instant {
  if (iConvertByWeekyear_) {
    return [this$0_ gregorianToJulianByWeekyearWithLong:instant];
  }
  else {
    return [this$0_ gregorianToJulianByYearWithLong:instant];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 9, 11, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 9, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 11, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 14, 11, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 15, 10, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 18, 4, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 19, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 19, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, 21, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 23, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 24, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 27, 26, -1, -1, -1, -1 },
    { NULL, "J", 0x4, 28, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x4, 29, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withLong:);
  methods[1].selector = @selector(initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withLong:withBoolean:);
  methods[2].selector = @selector(initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withOrgJodaTimeDurationField:withLong:withBoolean:);
  methods[3].selector = @selector(isLenient);
  methods[4].selector = @selector(getWithLong:);
  methods[5].selector = @selector(getAsTextWithLong:withJavaUtilLocale:);
  methods[6].selector = @selector(getAsTextWithInt:withJavaUtilLocale:);
  methods[7].selector = @selector(getAsShortTextWithLong:withJavaUtilLocale:);
  methods[8].selector = @selector(getAsShortTextWithInt:withJavaUtilLocale:);
  methods[9].selector = @selector(addWithLong:withInt:);
  methods[10].selector = @selector(addWithLong:withLong:);
  methods[11].selector = @selector(addWithOrgJodaTimeReadablePartial:withInt:withIntArray:withInt:);
  methods[12].selector = @selector(getDifferenceWithLong:withLong:);
  methods[13].selector = @selector(getDifferenceAsLongWithLong:withLong:);
  methods[14].selector = @selector(setWithLong:withInt:);
  methods[15].selector = @selector(setWithLong:withNSString:withJavaUtilLocale:);
  methods[16].selector = @selector(getDurationField);
  methods[17].selector = @selector(getRangeDurationField);
  methods[18].selector = @selector(isLeapWithLong:);
  methods[19].selector = @selector(getLeapAmountWithLong:);
  methods[20].selector = @selector(getLeapDurationField);
  methods[21].selector = @selector(getMinimumValue);
  methods[22].selector = @selector(getMinimumValueWithOrgJodaTimeReadablePartial:);
  methods[23].selector = @selector(getMinimumValueWithOrgJodaTimeReadablePartial:withIntArray:);
  methods[24].selector = @selector(getMinimumValueWithLong:);
  methods[25].selector = @selector(getMaximumValue);
  methods[26].selector = @selector(getMaximumValueWithLong:);
  methods[27].selector = @selector(getMaximumValueWithOrgJodaTimeReadablePartial:);
  methods[28].selector = @selector(getMaximumValueWithOrgJodaTimeReadablePartial:withIntArray:);
  methods[29].selector = @selector(roundFloorWithLong:);
  methods[30].selector = @selector(roundCeilingWithLong:);
  methods[31].selector = @selector(getMaximumTextLengthWithJavaUtilLocale:);
  methods[32].selector = @selector(getMaximumShortTextLengthWithJavaUtilLocale:);
  methods[33].selector = @selector(julianToGregorianWithLong:);
  methods[34].selector = @selector(gregorianToJulianWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgJodaTimeChronoGJChronology;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeChronoGJChronology_CutoverField_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iJulianField_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "iGregorianField_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "iCutover_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "iConvertByWeekyear_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "iDurationField_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "iRangeDurationField_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeChronoGJChronology;LOrgJodaTimeDateTimeField;LOrgJodaTimeDateTimeField;J", "LOrgJodaTimeChronoGJChronology;LOrgJodaTimeDateTimeField;LOrgJodaTimeDateTimeField;JZ", "LOrgJodaTimeChronoGJChronology;LOrgJodaTimeDateTimeField;LOrgJodaTimeDateTimeField;LOrgJodaTimeDurationField;JZ", "get", "J", "getAsText", "JLJavaUtilLocale;", "ILJavaUtilLocale;", "getAsShortText", "add", "JI", "JJ", "LOrgJodaTimeReadablePartial;I[II", "getDifference", "getDifferenceAsLong", "set", "JLNSString;LJavaUtilLocale;", "isLeap", "getLeapAmount", "getMinimumValue", "LOrgJodaTimeReadablePartial;", "LOrgJodaTimeReadablePartial;[I", "getMaximumValue", "roundFloor", "roundCeiling", "getMaximumTextLength", "LJavaUtilLocale;", "getMaximumShortTextLength", "julianToGregorian", "gregorianToJulian", "LOrgJodaTimeChronoGJChronology;" };
  static const J2ObjcClassInfo _OrgJodaTimeChronoGJChronology_CutoverField = { "CutoverField", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0x2, 35, 8, 30, -1, -1, -1, -1 };
  return &_OrgJodaTimeChronoGJChronology_CutoverField;
}

@end

void OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(OrgJodaTimeChronoGJChronology_CutoverField *self, OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, jlong cutoverMillis) {
  OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_withBoolean_(self, outer$, julianField, gregorianField, cutoverMillis, false);
}

OrgJodaTimeChronoGJChronology_CutoverField *new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, jlong cutoverMillis) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoGJChronology_CutoverField, initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_, outer$, julianField, gregorianField, cutoverMillis)
}

OrgJodaTimeChronoGJChronology_CutoverField *create_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, jlong cutoverMillis) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoGJChronology_CutoverField, initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_, outer$, julianField, gregorianField, cutoverMillis)
}

void OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_withBoolean_(OrgJodaTimeChronoGJChronology_CutoverField *self, OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, jlong cutoverMillis, jboolean convertByWeekyear) {
  OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(self, outer$, julianField, gregorianField, nil, cutoverMillis, convertByWeekyear);
}

OrgJodaTimeChronoGJChronology_CutoverField *new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_withBoolean_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, jlong cutoverMillis, jboolean convertByWeekyear) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoGJChronology_CutoverField, initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_withBoolean_, outer$, julianField, gregorianField, cutoverMillis, convertByWeekyear)
}

OrgJodaTimeChronoGJChronology_CutoverField *create_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_withBoolean_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, jlong cutoverMillis, jboolean convertByWeekyear) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoGJChronology_CutoverField, initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_withBoolean_, outer$, julianField, gregorianField, cutoverMillis, convertByWeekyear)
}

void OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(OrgJodaTimeChronoGJChronology_CutoverField *self, OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *rangeField, jlong cutoverMillis, jboolean convertByWeekyear) {
  self->this$0_ = outer$;
  OrgJodaTimeFieldBaseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_(self, [((OrgJodaTimeDateTimeField *) nil_chk(gregorianField)) getType]);
  self->iJulianField_ = julianField;
  self->iGregorianField_ = gregorianField;
  self->iCutover_ = cutoverMillis;
  self->iConvertByWeekyear_ = convertByWeekyear;
  self->iDurationField_ = [gregorianField getDurationField];
  if (rangeField == nil) {
    rangeField = [gregorianField getRangeDurationField];
    if (rangeField == nil) {
      rangeField = [((OrgJodaTimeDateTimeField *) nil_chk(julianField)) getRangeDurationField];
    }
  }
  self->iRangeDurationField_ = rangeField;
}

OrgJodaTimeChronoGJChronology_CutoverField *new_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *rangeField, jlong cutoverMillis, jboolean convertByWeekyear) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoGJChronology_CutoverField, initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_, outer$, julianField, gregorianField, rangeField, cutoverMillis, convertByWeekyear)
}

OrgJodaTimeChronoGJChronology_CutoverField *create_OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *rangeField, jlong cutoverMillis, jboolean convertByWeekyear) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoGJChronology_CutoverField, initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_, outer$, julianField, gregorianField, rangeField, cutoverMillis, convertByWeekyear)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoGJChronology_CutoverField)

@implementation OrgJodaTimeChronoGJChronology_ImpreciseCutoverField

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                                             withLong:(jlong)cutoverMillis {
  OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(self, outer$, julianField, gregorianField, cutoverMillis);
  return self;
}

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                                             withLong:(jlong)cutoverMillis {
  OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_(self, outer$, julianField, gregorianField, durationField, cutoverMillis);
  return self;
}

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeDurationField
                                             withLong:(jlong)cutoverMillis {
  OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withLong_(self, outer$, julianField, gregorianField, durationField, rangeDurationField, cutoverMillis);
  return self;
}

- (instancetype)initWithOrgJodaTimeChronoGJChronology:(OrgJodaTimeChronoGJChronology *)outer$
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)julianField
                         withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)gregorianField
                         withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                                             withLong:(jlong)cutoverMillis
                                          withBoolean:(jboolean)convertByWeekyear {
  OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(self, outer$, julianField, gregorianField, durationField, cutoverMillis, convertByWeekyear);
  return self;
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value {
  if (instant >= iCutover_) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) addWithLong:instant withInt:value];
    if (instant < iCutover_) {
      if (instant + this$1_->iGapDuration_ < iCutover_) {
        if (iConvertByWeekyear_) {
          jint wyear = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoGregorianChronology *) nil_chk(this$1_->iGregorianChronology_)) weekyear])) getWithLong:instant];
          if (wyear <= 0) {
            instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoGregorianChronology *) nil_chk(this$1_->iGregorianChronology_)) weekyear])) addWithLong:instant withInt:-1];
          }
        }
        else {
          jint year = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoGregorianChronology *) nil_chk(this$1_->iGregorianChronology_)) year])) getWithLong:instant];
          if (year <= 0) {
            instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoGregorianChronology *) nil_chk(this$1_->iGregorianChronology_)) year])) addWithLong:instant withInt:-1];
          }
        }
        instant = [self gregorianToJulianWithLong:instant];
      }
    }
  }
  else {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) addWithLong:instant withInt:value];
    if (instant >= iCutover_) {
      if (instant - this$1_->iGapDuration_ >= iCutover_) {
        instant = [self julianToGregorianWithLong:instant];
      }
    }
  }
  return instant;
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value {
  if (instant >= iCutover_) {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) addWithLong:instant withLong:value];
    if (instant < iCutover_) {
      if (instant + this$1_->iGapDuration_ < iCutover_) {
        if (iConvertByWeekyear_) {
          jint wyear = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoGregorianChronology *) nil_chk(this$1_->iGregorianChronology_)) weekyear])) getWithLong:instant];
          if (wyear <= 0) {
            instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoGregorianChronology *) nil_chk(this$1_->iGregorianChronology_)) weekyear])) addWithLong:instant withInt:-1];
          }
        }
        else {
          jint year = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoGregorianChronology *) nil_chk(this$1_->iGregorianChronology_)) year])) getWithLong:instant];
          if (year <= 0) {
            instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoGregorianChronology *) nil_chk(this$1_->iGregorianChronology_)) year])) addWithLong:instant withInt:-1];
          }
        }
        instant = [self gregorianToJulianWithLong:instant];
      }
    }
  }
  else {
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) addWithLong:instant withLong:value];
    if (instant >= iCutover_) {
      if (instant - this$1_->iGapDuration_ >= iCutover_) {
        instant = [self julianToGregorianWithLong:instant];
      }
    }
  }
  return instant;
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  if (minuendInstant >= iCutover_) {
    if (subtrahendInstant >= iCutover_) {
      return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
    }
    minuendInstant = [self gregorianToJulianWithLong:minuendInstant];
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
  }
  else {
    if (subtrahendInstant < iCutover_) {
      return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
    }
    minuendInstant = [self julianToGregorianWithLong:minuendInstant];
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
  }
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  if (minuendInstant >= iCutover_) {
    if (subtrahendInstant >= iCutover_) {
      return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
    }
    minuendInstant = [self gregorianToJulianWithLong:minuendInstant];
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
  }
  else {
    if (subtrahendInstant < iCutover_) {
      return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
    }
    minuendInstant = [self julianToGregorianWithLong:minuendInstant];
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
  }
}

- (jint)getMinimumValueWithLong:(jlong)instant {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMinimumValueWithLong:instant];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMinimumValueWithLong:instant];
  }
}

- (jint)getMaximumValueWithLong:(jlong)instant {
  if (instant >= iCutover_) {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iGregorianField_)) getMaximumValueWithLong:instant];
  }
  else {
    return [((OrgJodaTimeDateTimeField *) nil_chk(iJulianField_)) getMaximumValueWithLong:instant];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 8, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withLong:);
  methods[1].selector = @selector(initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withOrgJodaTimeDurationField:withLong:);
  methods[2].selector = @selector(initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withOrgJodaTimeDurationField:withOrgJodaTimeDurationField:withLong:);
  methods[3].selector = @selector(initWithOrgJodaTimeChronoGJChronology:withOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeField:withOrgJodaTimeDurationField:withLong:withBoolean:);
  methods[4].selector = @selector(addWithLong:withInt:);
  methods[5].selector = @selector(addWithLong:withLong:);
  methods[6].selector = @selector(getDifferenceWithLong:withLong:);
  methods[7].selector = @selector(getDifferenceAsLongWithLong:withLong:);
  methods[8].selector = @selector(getMinimumValueWithLong:);
  methods[9].selector = @selector(getMaximumValueWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LOrgJodaTimeChronoGJChronology;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeChronoGJChronology;LOrgJodaTimeDateTimeField;LOrgJodaTimeDateTimeField;J", "LOrgJodaTimeChronoGJChronology;LOrgJodaTimeDateTimeField;LOrgJodaTimeDateTimeField;LOrgJodaTimeDurationField;J", "LOrgJodaTimeChronoGJChronology;LOrgJodaTimeDateTimeField;LOrgJodaTimeDateTimeField;LOrgJodaTimeDurationField;LOrgJodaTimeDurationField;J", "LOrgJodaTimeChronoGJChronology;LOrgJodaTimeDateTimeField;LOrgJodaTimeDateTimeField;LOrgJodaTimeDurationField;JZ", "add", "JI", "JJ", "getDifference", "getDifferenceAsLong", "getMinimumValue", "J", "getMaximumValue", "LOrgJodaTimeChronoGJChronology;" };
  static const J2ObjcClassInfo _OrgJodaTimeChronoGJChronology_ImpreciseCutoverField = { "ImpreciseCutoverField", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0x12, 10, 2, 12, -1, -1, -1, -1 };
  return &_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField;
}

@end

void OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *self, OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, jlong cutoverMillis) {
  OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(self, outer$, julianField, gregorianField, nil, cutoverMillis, false);
}

OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *new_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, jlong cutoverMillis) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField, initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_, outer$, julianField, gregorianField, cutoverMillis)
}

OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *create_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, jlong cutoverMillis) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField, initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_, outer$, julianField, gregorianField, cutoverMillis)
}

void OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *self, OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *durationField, jlong cutoverMillis) {
  OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(self, outer$, julianField, gregorianField, durationField, cutoverMillis, false);
}

OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *new_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *durationField, jlong cutoverMillis) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField, initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_, outer$, julianField, gregorianField, durationField, cutoverMillis)
}

OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *create_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *durationField, jlong cutoverMillis) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField, initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_, outer$, julianField, gregorianField, durationField, cutoverMillis)
}

void OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withLong_(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *self, OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, jlong cutoverMillis) {
  OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(self, outer$, julianField, gregorianField, durationField, cutoverMillis, false);
  self->iRangeDurationField_ = rangeDurationField;
}

OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *new_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withLong_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, jlong cutoverMillis) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField, initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withLong_, outer$, julianField, gregorianField, durationField, rangeDurationField, cutoverMillis)
}

OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *create_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withLong_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, jlong cutoverMillis) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField, initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withLong_, outer$, julianField, gregorianField, durationField, rangeDurationField, cutoverMillis)
}

void OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *self, OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *durationField, jlong cutoverMillis, jboolean convertByWeekyear) {
  self->this$1_ = outer$;
  OrgJodaTimeChronoGJChronology_CutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withLong_withBoolean_(self, outer$, julianField, gregorianField, cutoverMillis, convertByWeekyear);
  if (durationField == nil) {
    durationField = new_OrgJodaTimeChronoGJChronology_LinkedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField_(self->iDurationField_, self);
  }
  self->iDurationField_ = durationField;
}

OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *new_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *durationField, jlong cutoverMillis, jboolean convertByWeekyear) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField, initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_, outer$, julianField, gregorianField, durationField, cutoverMillis, convertByWeekyear)
}

OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *create_OrgJodaTimeChronoGJChronology_ImpreciseCutoverField_initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_(OrgJodaTimeChronoGJChronology *outer$, OrgJodaTimeDateTimeField *julianField, OrgJodaTimeDateTimeField *gregorianField, OrgJodaTimeDurationField *durationField, jlong cutoverMillis, jboolean convertByWeekyear) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField, initWithOrgJodaTimeChronoGJChronology_withOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeField_withOrgJodaTimeDurationField_withLong_withBoolean_, outer$, julianField, gregorianField, durationField, cutoverMillis, convertByWeekyear)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField)

@implementation OrgJodaTimeChronoGJChronology_LinkedDurationField

- (instancetype)initWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField:(OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *)dateTimeField {
  OrgJodaTimeChronoGJChronology_LinkedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField_(self, durationField, dateTimeField);
  return self;
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value {
  return [((OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *) nil_chk(iField_LinkedDurationField_)) addWithLong:instant withInt:value];
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value {
  return [((OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *) nil_chk(iField_LinkedDurationField_)) addWithLong:instant withLong:value];
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  return [((OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *) nil_chk(iField_LinkedDurationField_)) getDifferenceWithLong:minuendInstant withLong:subtrahendInstant];
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  return [((OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *) nil_chk(iField_LinkedDurationField_)) getDifferenceAsLongWithLong:minuendInstant withLong:subtrahendInstant];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 5, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeDurationField:withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField:);
  methods[1].selector = @selector(addWithLong:withInt:);
  methods[2].selector = @selector(addWithLong:withLong:);
  methods[3].selector = @selector(getDifferenceWithLong:withLong:);
  methods[4].selector = @selector(getDifferenceAsLongWithLong:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeChronoGJChronology_LinkedDurationField_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iField_LinkedDurationField_", "LOrgJodaTimeChronoGJChronology_ImpreciseCutoverField;", .constantValue.asLong = 0, 0x12, 6, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeDurationField;LOrgJodaTimeChronoGJChronology_ImpreciseCutoverField;", "add", "JI", "JJ", "getDifference", "getDifferenceAsLong", "iField", "LOrgJodaTimeChronoGJChronology;" };
  static const J2ObjcClassInfo _OrgJodaTimeChronoGJChronology_LinkedDurationField = { "LinkedDurationField", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0xa, 5, 2, 7, -1, -1, -1, -1 };
  return &_OrgJodaTimeChronoGJChronology_LinkedDurationField;
}

@end

void OrgJodaTimeChronoGJChronology_LinkedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField_(OrgJodaTimeChronoGJChronology_LinkedDurationField *self, OrgJodaTimeDurationField *durationField, OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *dateTimeField) {
  OrgJodaTimeFieldDecoratedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDurationFieldType_(self, durationField, [((OrgJodaTimeDurationField *) nil_chk(durationField)) getType]);
  self->iField_LinkedDurationField_ = dateTimeField;
}

OrgJodaTimeChronoGJChronology_LinkedDurationField *new_OrgJodaTimeChronoGJChronology_LinkedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField_(OrgJodaTimeDurationField *durationField, OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *dateTimeField) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoGJChronology_LinkedDurationField, initWithOrgJodaTimeDurationField_withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField_, durationField, dateTimeField)
}

OrgJodaTimeChronoGJChronology_LinkedDurationField *create_OrgJodaTimeChronoGJChronology_LinkedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField_(OrgJodaTimeDurationField *durationField, OrgJodaTimeChronoGJChronology_ImpreciseCutoverField *dateTimeField) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoGJChronology_LinkedDurationField, initWithOrgJodaTimeDurationField_withOrgJodaTimeChronoGJChronology_ImpreciseCutoverField_, durationField, dateTimeField)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoGJChronology_LinkedDurationField)
