//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/chrono/BasicWeekyearDateTimeField.java
//

#include "BasicChronology.h"
#include "BasicWeekyearDateTimeField.h"
#include "DateTimeConstants.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DurationField.h"
#include "FieldUtils.h"
#include "ImpreciseDateTimeField.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"

@interface OrgJodaTimeChronoBasicWeekyearDateTimeField () {
 @public
  OrgJodaTimeChronoBasicChronology *iChronology_;
}

- (id)readResolve;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoBasicWeekyearDateTimeField, iChronology_, OrgJodaTimeChronoBasicChronology *)

inline jlong OrgJodaTimeChronoBasicWeekyearDateTimeField_get_serialVersionUID();
#define OrgJodaTimeChronoBasicWeekyearDateTimeField_serialVersionUID 6215066916806820644LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoBasicWeekyearDateTimeField, serialVersionUID, jlong)

inline jlong OrgJodaTimeChronoBasicWeekyearDateTimeField_get_WEEK_53();
#define OrgJodaTimeChronoBasicWeekyearDateTimeField_WEEK_53 31449600000LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoBasicWeekyearDateTimeField, WEEK_53, jlong)

@implementation OrgJodaTimeChronoBasicWeekyearDateTimeField

- (instancetype)initWithOrgJodaTimeChronoBasicChronology:(OrgJodaTimeChronoBasicChronology *)chronology {
  OrgJodaTimeChronoBasicWeekyearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(self, chronology);
  return self;
}

- (jboolean)isLenient {
  return false;
}

- (jint)getWithLong:(jlong)instant {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getWeekyearWithLong:instant];
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)years {
  if (years == 0) {
    return instant;
  }
  return [self setWithLong:instant withInt:[self getWithLong:instant] + years];
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value {
  return [self addWithLong:instant withInt:OrgJodaTimeFieldFieldUtils_safeToIntWithLong_(value)];
}

- (jlong)addWrapFieldWithLong:(jlong)instant
                      withInt:(jint)years {
  return [self addWithLong:instant withInt:years];
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  if (minuendInstant < subtrahendInstant) {
    return -[self getDifferenceWithLong:subtrahendInstant withLong:minuendInstant];
  }
  jint minuendWeekyear = [self getWithLong:minuendInstant];
  jint subtrahendWeekyear = [self getWithLong:subtrahendInstant];
  jlong minuendRem = [self remainderWithLong:minuendInstant];
  jlong subtrahendRem = [self remainderWithLong:subtrahendInstant];
  if (subtrahendRem >= OrgJodaTimeChronoBasicWeekyearDateTimeField_WEEK_53 && [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getWeeksInYearWithInt:minuendWeekyear] <= 52) {
    subtrahendRem -= OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK;
  }
  jint difference = minuendWeekyear - subtrahendWeekyear;
  if (minuendRem < subtrahendRem) {
    difference--;
  }
  return difference;
}

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)year {
  OrgJodaTimeFieldFieldUtils_verifyValueBoundsWithOrgJodaTimeDateTimeField_withInt_withInt_withInt_(self, JavaLangMath_absWithInt_(year), [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getMinYear], [iChronology_ getMaxYear]);
  jint thisWeekyear = [self getWithLong:instant];
  if (thisWeekyear == year) {
    return instant;
  }
  jint thisDow = [iChronology_ getDayOfWeekWithLong:instant];
  jint weeksInFromYear = [iChronology_ getWeeksInYearWithInt:thisWeekyear];
  jint weeksInToYear = [iChronology_ getWeeksInYearWithInt:year];
  jint maxOutWeeks = (weeksInToYear < weeksInFromYear) ? weeksInToYear : weeksInFromYear;
  jint setToWeek = [iChronology_ getWeekOfWeekyearWithLong:instant];
  if (setToWeek > maxOutWeeks) {
    setToWeek = maxOutWeeks;
  }
  jlong workInstant = instant;
  workInstant = [iChronology_ setYearWithLong:workInstant withInt:year];
  jint workWoyYear = [self getWithLong:workInstant];
  if (workWoyYear < year) {
    workInstant += OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK;
  }
  else if (workWoyYear > year) {
    workInstant -= OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK;
  }
  jint currentWoyWeek = [iChronology_ getWeekOfWeekyearWithLong:workInstant];
  workInstant = workInstant + (setToWeek - currentWoyWeek) * (jlong) OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK;
  workInstant = [((OrgJodaTimeDateTimeField *) nil_chk([iChronology_ dayOfWeek])) setWithLong:workInstant withInt:thisDow];
  return workInstant;
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return nil;
}

- (jboolean)isLeapWithLong:(jlong)instant {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getWeeksInYearWithInt:[iChronology_ getWeekyearWithLong:instant]] > 52;
}

- (jint)getLeapAmountWithLong:(jlong)instant {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getWeeksInYearWithInt:[iChronology_ getWeekyearWithLong:instant]] - 52;
}

- (OrgJodaTimeDurationField *)getLeapDurationField {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) weeks];
}

- (jint)getMinimumValue {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getMinYear];
}

- (jint)getMaximumValue {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) getMaxYear];
}

- (jlong)roundFloorWithLong:(jlong)instant {
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) weekOfWeekyear])) roundFloorWithLong:instant];
  jint wow = [iChronology_ getWeekOfWeekyearWithLong:instant];
  if (wow > 1) {
    instant -= ((jlong) OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK) * (wow - 1);
  }
  return instant;
}

- (jlong)remainderWithLong:(jlong)instant {
  return instant - [self roundFloorWithLong:instant];
}

- (id)readResolve {
  return [((OrgJodaTimeChronoBasicChronology *) nil_chk(iChronology_)) weekyear];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeChronoBasicChronology:);
  methods[1].selector = @selector(isLenient);
  methods[2].selector = @selector(getWithLong:);
  methods[3].selector = @selector(addWithLong:withInt:);
  methods[4].selector = @selector(addWithLong:withLong:);
  methods[5].selector = @selector(addWrapFieldWithLong:withInt:);
  methods[6].selector = @selector(getDifferenceAsLongWithLong:withLong:);
  methods[7].selector = @selector(setWithLong:withInt:);
  methods[8].selector = @selector(getRangeDurationField);
  methods[9].selector = @selector(isLeapWithLong:);
  methods[10].selector = @selector(getLeapAmountWithLong:);
  methods[11].selector = @selector(getLeapDurationField);
  methods[12].selector = @selector(getMinimumValue);
  methods[13].selector = @selector(getMaximumValue);
  methods[14].selector = @selector(roundFloorWithLong:);
  methods[15].selector = @selector(remainderWithLong:);
  methods[16].selector = @selector(readResolve);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeChronoBasicWeekyearDateTimeField_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "WEEK_53", "J", .constantValue.asLong = OrgJodaTimeChronoBasicWeekyearDateTimeField_WEEK_53, 0x1a, -1, -1, -1, -1 },
    { "iChronology_", "LOrgJodaTimeChronoBasicChronology;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeChronoBasicChronology;", "get", "J", "add", "JI", "JJ", "addWrapField", "getDifferenceAsLong", "set", "isLeap", "getLeapAmount", "roundFloor", "remainder" };
  static const J2ObjcClassInfo _OrgJodaTimeChronoBasicWeekyearDateTimeField = { "BasicWeekyearDateTimeField", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0x10, 17, 3, -1, -1, -1, -1, -1 };
  return &_OrgJodaTimeChronoBasicWeekyearDateTimeField;
}

@end

void OrgJodaTimeChronoBasicWeekyearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(OrgJodaTimeChronoBasicWeekyearDateTimeField *self, OrgJodaTimeChronoBasicChronology *chronology) {
  OrgJodaTimeFieldImpreciseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_withLong_(self, OrgJodaTimeDateTimeFieldType_weekyear(), [((OrgJodaTimeChronoBasicChronology *) nil_chk(chronology)) getAverageMillisPerYear]);
  self->iChronology_ = chronology;
}

OrgJodaTimeChronoBasicWeekyearDateTimeField *new_OrgJodaTimeChronoBasicWeekyearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(OrgJodaTimeChronoBasicChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoBasicWeekyearDateTimeField, initWithOrgJodaTimeChronoBasicChronology_, chronology)
}

OrgJodaTimeChronoBasicWeekyearDateTimeField *create_OrgJodaTimeChronoBasicWeekyearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_(OrgJodaTimeChronoBasicChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoBasicWeekyearDateTimeField, initWithOrgJodaTimeChronoBasicChronology_, chronology)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoBasicWeekyearDateTimeField)
