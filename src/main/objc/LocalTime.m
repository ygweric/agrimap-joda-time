//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/LocalTime.java
//

#include "AbstractReadableInstantFieldProperty.h"
#include "BaseLocal.h"
#include "Chronology.h"
#include "ConverterManager.h"
#include "DateTime.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormat.h"
#include "DateTimeFormatter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FromString.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "ISOChronology.h"
#include "ISODateTimeFormat.h"
#include "J2ObjC_source.h"
#include "LocalTime.h"
#include "PartialConverter.h"
#include "ReadablePartial.h"
#include "ReadablePeriod.h"
#include "ToString.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/HashSet.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"

@interface OrgJodaTimeLocalTime () {
 @public
  jlong iLocalMillis_;
  OrgJodaTimeChronology *iChronology_;
}

- (id)readResolve;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeLocalTime, iChronology_, OrgJodaTimeChronology *)

inline jlong OrgJodaTimeLocalTime_get_serialVersionUID();
#define OrgJodaTimeLocalTime_serialVersionUID -12873158713873LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalTime, serialVersionUID, jlong)

inline jint OrgJodaTimeLocalTime_get_HOUR_OF_DAY();
#define OrgJodaTimeLocalTime_HOUR_OF_DAY 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalTime, HOUR_OF_DAY, jint)

inline jint OrgJodaTimeLocalTime_get_MINUTE_OF_HOUR();
#define OrgJodaTimeLocalTime_MINUTE_OF_HOUR 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalTime, MINUTE_OF_HOUR, jint)

inline jint OrgJodaTimeLocalTime_get_SECOND_OF_MINUTE();
#define OrgJodaTimeLocalTime_SECOND_OF_MINUTE 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalTime, SECOND_OF_MINUTE, jint)

inline jint OrgJodaTimeLocalTime_get_MILLIS_OF_SECOND();
#define OrgJodaTimeLocalTime_MILLIS_OF_SECOND 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalTime, MILLIS_OF_SECOND, jint)

inline id<JavaUtilSet> OrgJodaTimeLocalTime_get_TIME_DURATION_TYPES();
static id<JavaUtilSet> OrgJodaTimeLocalTime_TIME_DURATION_TYPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeLocalTime, TIME_DURATION_TYPES, id<JavaUtilSet>)

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeLocalTime__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeLocalTime__Annotations$1();

@interface OrgJodaTimeLocalTime_Property () {
 @public
  OrgJodaTimeLocalTime *iInstant_;
  OrgJodaTimeDateTimeField *iField_;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeLocalTime_Property, iInstant_, OrgJodaTimeLocalTime *)
J2OBJC_FIELD_SETTER(OrgJodaTimeLocalTime_Property, iField_, OrgJodaTimeDateTimeField *)

inline jlong OrgJodaTimeLocalTime_Property_get_serialVersionUID();
#define OrgJodaTimeLocalTime_Property_serialVersionUID -325842547277223LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalTime_Property, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeLocalTime)

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_MIDNIGHT;

@implementation OrgJodaTimeLocalTime

+ (OrgJodaTimeLocalTime *)now {
  return OrgJodaTimeLocalTime_now();
}

+ (OrgJodaTimeLocalTime *)nowWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeLocalTime_nowWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeLocalTime *)nowWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return OrgJodaTimeLocalTime_nowWithOrgJodaTimeChronology_(chronology);
}

+ (OrgJodaTimeLocalTime *)parseWithNSString:(NSString *)str {
  return OrgJodaTimeLocalTime_parseWithNSString_(str);
}

+ (OrgJodaTimeLocalTime *)parseWithNSString:(NSString *)str
     withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter {
  return OrgJodaTimeLocalTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, formatter);
}

+ (OrgJodaTimeLocalTime *)fromMillisOfDayWithLong:(jlong)millisOfDay {
  return OrgJodaTimeLocalTime_fromMillisOfDayWithLong_(millisOfDay);
}

+ (OrgJodaTimeLocalTime *)fromMillisOfDayWithLong:(jlong)millisOfDay
                        withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return OrgJodaTimeLocalTime_fromMillisOfDayWithLong_withOrgJodaTimeChronology_(millisOfDay, chrono);
}

+ (OrgJodaTimeLocalTime *)fromCalendarFieldsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  return OrgJodaTimeLocalTime_fromCalendarFieldsWithJavaUtilCalendar_(calendar);
}

+ (OrgJodaTimeLocalTime *)fromDateFieldsWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgJodaTimeLocalTime_fromDateFieldsWithJavaUtilDate_(date);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeLocalTime_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeLocalTime_initWithOrgJodaTimeDateTimeZone_(self, zone);
  return self;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeLocalTime_initWithOrgJodaTimeChronology_(self, chronology);
  return self;
}

- (instancetype)initWithLong:(jlong)instant {
  OrgJodaTimeLocalTime_initWithLong_(self, instant);
  return self;
}

- (instancetype)initWithLong:(jlong)instant
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeDateTimeZone_(self, instant, zone);
  return self;
}

- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

- (instancetype)initWithId:(id)instant {
  OrgJodaTimeLocalTime_initWithId_(self, instant);
  return self;
}

- (instancetype)initWithId:(id)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeDateTimeZone_(self, instant, zone);
  return self;
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour {
  OrgJodaTimeLocalTime_initWithInt_withInt_(self, hourOfDay, minuteOfHour);
  return self;
}

- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute {
  OrgJodaTimeLocalTime_initWithInt_withInt_withInt_(self, hourOfDay, minuteOfHour, secondOfMinute);
  return self;
}

- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond {
  OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_(self, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
  return self;
}

- (instancetype)initWithInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology);
  return self;
}

- (id)readResolve {
  if (iChronology_ == nil) {
    return new_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(iLocalMillis_, OrgJodaTimeChronoISOChronology_getInstanceUTC());
  }
  if ([((OrgJodaTimeDateTimeZone *) nil_chk(JreLoadStatic(OrgJodaTimeDateTimeZone, UTC))) isEqual:[iChronology_ getZone]] == false) {
    return new_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(iLocalMillis_, [iChronology_ withUTC]);
  }
  return self;
}

- (jint)size {
  return 4;
}

- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  switch (index) {
    case OrgJodaTimeLocalTime_HOUR_OF_DAY:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) hourOfDay];
    case OrgJodaTimeLocalTime_MINUTE_OF_HOUR:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) minuteOfHour];
    case OrgJodaTimeLocalTime_SECOND_OF_MINUTE:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) secondOfMinute];
    case OrgJodaTimeLocalTime_MILLIS_OF_SECOND:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) millisOfSecond];
    default:
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I", @"Invalid index: ", index));
  }
}

- (jint)getValueWithInt:(jint)index {
  switch (index) {
    case OrgJodaTimeLocalTime_HOUR_OF_DAY:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay])) getWithLong:[self getLocalMillis]];
    case OrgJodaTimeLocalTime_MINUTE_OF_HOUR:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour])) getWithLong:[self getLocalMillis]];
    case OrgJodaTimeLocalTime_SECOND_OF_MINUTE:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute])) getWithLong:[self getLocalMillis]];
    case OrgJodaTimeLocalTime_MILLIS_OF_SECOND:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond])) getWithLong:[self getLocalMillis]];
    default:
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I", @"Invalid index: ", index));
  }
}

- (jint)getWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The DateTimeFieldType must not be null");
  }
  if ([self isSupportedWithOrgJodaTimeDateTimeFieldType:fieldType] == false) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Field '", fieldType, @"' is not supported"));
  }
  return [((OrgJodaTimeDateTimeField *) nil_chk([fieldType getFieldWithOrgJodaTimeChronology:[self getChronology]])) getWithLong:[self getLocalMillis]];
}

- (jboolean)isSupportedWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  if (type == nil) {
    return false;
  }
  if ([self isSupportedWithOrgJodaTimeDurationFieldType:[type getDurationType]] == false) {
    return false;
  }
  OrgJodaTimeDurationFieldType *range = [type getRangeDurationType];
  return ([self isSupportedWithOrgJodaTimeDurationFieldType:range] || range == OrgJodaTimeDurationFieldType_days());
}

- (jboolean)isSupportedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type {
  if (type == nil) {
    return false;
  }
  OrgJodaTimeDurationField *field = [type getFieldWithOrgJodaTimeChronology:[self getChronology]];
  if ([((id<JavaUtilSet>) nil_chk(OrgJodaTimeLocalTime_TIME_DURATION_TYPES)) containsWithId:type] || [((OrgJodaTimeDurationField *) nil_chk(field)) getUnitMillis] < [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) getUnitMillis]) {
    return [((OrgJodaTimeDurationField *) nil_chk(field)) isSupported];
  }
  return false;
}

- (jlong)getLocalMillis {
  return iLocalMillis_;
}

- (OrgJodaTimeChronology *)getChronology {
  return iChronology_;
}

- (jboolean)isEqual:(id)partial {
  if (self == partial) {
    return true;
  }
  if ([partial isKindOfClass:[OrgJodaTimeLocalTime class]]) {
    OrgJodaTimeLocalTime *other = (OrgJodaTimeLocalTime *) cast_chk(partial, [OrgJodaTimeLocalTime class]);
    if ([((OrgJodaTimeChronology *) nil_chk(iChronology_)) isEqual:((OrgJodaTimeLocalTime *) nil_chk(other))->iChronology_]) {
      return iLocalMillis_ == other->iLocalMillis_;
    }
  }
  return [super isEqual:partial];
}

- (jint)compareToWithId:(id<OrgJodaTimeReadablePartial>)partial {
  (void) cast_check(partial, OrgJodaTimeReadablePartial_class_());
  if (self == partial) {
    return 0;
  }
  if ([partial isKindOfClass:[OrgJodaTimeLocalTime class]]) {
    OrgJodaTimeLocalTime *other = (OrgJodaTimeLocalTime *) cast_chk(partial, [OrgJodaTimeLocalTime class]);
    if ([((OrgJodaTimeChronology *) nil_chk(iChronology_)) isEqual:((OrgJodaTimeLocalTime *) nil_chk(other))->iChronology_]) {
      return (iLocalMillis_ < other->iLocalMillis_ ? -1 : (iLocalMillis_ == other->iLocalMillis_ ? 0 : 1));
    }
  }
  return [super compareToWithId:partial];
}

- (OrgJodaTimeLocalTime *)withLocalMillisWithLong:(jlong)newMillis {
  return (newMillis == [self getLocalMillis] ? self : new_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(newMillis, [self getChronology]));
}

- (OrgJodaTimeLocalTime *)withFieldsWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  if (partial == nil) {
    return self;
  }
  return [self withLocalMillisWithLong:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) setWithOrgJodaTimeReadablePartial:partial withLong:[self getLocalMillis]]];
}

- (OrgJodaTimeLocalTime *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                            withInt:(jint)value {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field must not be null");
  }
  if ([self isSupportedWithOrgJodaTimeDateTimeFieldType:fieldType] == false) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Field '", fieldType, @"' is not supported"));
  }
  jlong instant = [((OrgJodaTimeDateTimeField *) nil_chk([fieldType getFieldWithOrgJodaTimeChronology:[self getChronology]])) setWithLong:[self getLocalMillis] withInt:value];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                 withInt:(jint)amount {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field must not be null");
  }
  if ([self isSupportedWithOrgJodaTimeDurationFieldType:fieldType] == false) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Field '", fieldType, @"' is not supported"));
  }
  if (amount == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([fieldType getFieldWithOrgJodaTimeChronology:[self getChronology]])) addWithLong:[self getLocalMillis] withInt:amount];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                               withInt:(jint)scalar {
  if (period == nil || scalar == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) addWithOrgJodaTimeReadablePeriod:period withLong:[self getLocalMillis] withInt:scalar];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:1];
}

- (OrgJodaTimeLocalTime *)plusHoursWithInt:(jint)hours {
  if (hours == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hours])) addWithLong:[self getLocalMillis] withInt:hours];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)plusMinutesWithInt:(jint)minutes {
  if (minutes == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minutes])) addWithLong:[self getLocalMillis] withInt:minutes];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)plusSecondsWithInt:(jint)seconds {
  if (seconds == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) seconds])) addWithLong:[self getLocalMillis] withInt:seconds];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)plusMillisWithInt:(jint)millis {
  if (millis == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millis])) addWithLong:[self getLocalMillis] withInt:millis];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:-1];
}

- (OrgJodaTimeLocalTime *)minusHoursWithInt:(jint)hours {
  if (hours == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hours])) subtractWithLong:[self getLocalMillis] withInt:hours];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)minusMinutesWithInt:(jint)minutes {
  if (minutes == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minutes])) subtractWithLong:[self getLocalMillis] withInt:minutes];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)minusSecondsWithInt:(jint)seconds {
  if (seconds == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) seconds])) subtractWithLong:[self getLocalMillis] withInt:seconds];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime *)minusMillisWithInt:(jint)millis {
  if (millis == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millis])) subtractWithLong:[self getLocalMillis] withInt:millis];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalTime_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The DateTimeFieldType must not be null");
  }
  if ([self isSupportedWithOrgJodaTimeDateTimeFieldType:fieldType] == false) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Field '", fieldType, @"' is not supported"));
  }
  return new_OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(self, [fieldType getFieldWithOrgJodaTimeChronology:[self getChronology]]);
}

- (jint)getHourOfDay {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay])) getWithLong:[self getLocalMillis]];
}

- (jint)getMinuteOfHour {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour])) getWithLong:[self getLocalMillis]];
}

- (jint)getSecondOfMinute {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute])) getWithLong:[self getLocalMillis]];
}

- (jint)getMillisOfSecond {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond])) getWithLong:[self getLocalMillis]];
}

- (jint)getMillisOfDay {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) getWithLong:[self getLocalMillis]];
}

- (OrgJodaTimeLocalTime *)withHourOfDayWithInt:(jint)hour {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay])) setWithLong:[self getLocalMillis] withInt:hour]];
}

- (OrgJodaTimeLocalTime *)withMinuteOfHourWithInt:(jint)minute {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour])) setWithLong:[self getLocalMillis] withInt:minute]];
}

- (OrgJodaTimeLocalTime *)withSecondOfMinuteWithInt:(jint)second {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute])) setWithLong:[self getLocalMillis] withInt:second]];
}

- (OrgJodaTimeLocalTime *)withMillisOfSecondWithInt:(jint)millis {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond])) setWithLong:[self getLocalMillis] withInt:millis]];
}

- (OrgJodaTimeLocalTime *)withMillisOfDayWithInt:(jint)millis {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) setWithLong:[self getLocalMillis] withInt:millis]];
}

- (OrgJodaTimeLocalTime_Property *)hourOfDay {
  return new_OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay]);
}

- (OrgJodaTimeLocalTime_Property *)minuteOfHour {
  return new_OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour]);
}

- (OrgJodaTimeLocalTime_Property *)secondOfMinute {
  return new_OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute]);
}

- (OrgJodaTimeLocalTime_Property *)millisOfSecond {
  return new_OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond]);
}

- (OrgJodaTimeLocalTime_Property *)millisOfDay {
  return new_OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay]);
}

- (OrgJodaTimeDateTime *)toDateTimeToday {
  return [self toDateTimeTodayWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeTodayWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  jlong instantMillis = OrgJodaTimeDateTimeUtils_currentTimeMillis();
  jlong resolved = [((OrgJodaTimeChronology *) nil_chk(chrono)) setWithOrgJodaTimeReadablePartial:self withLong:instantMillis];
  return new_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(resolved, chrono);
}

- (NSString *)description {
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatISODateTimeFormat_time())) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern
                withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) withLocaleWithJavaUtilLocale:locale])) printWithOrgJodaTimeReadablePartial:self];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJodaTimeLocalTime;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x9, 3, 4, -1, -1, 5, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x9, 3, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x9, 7, 9, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 14, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 9, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 15, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 16, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 17, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 18, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 19, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 20, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 21, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x4, 22, 23, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 28, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "J", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 30, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x0, 33, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 34, 32, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 35, 36, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 39, 40, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 43, 25, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 44, 25, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 45, 25, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 46, 25, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 47, 42, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 48, 25, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 49, 25, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 50, 25, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 51, 25, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime_Property;", 0x1, 52, 27, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 53, 25, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 54, 25, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 55, 25, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 56, 25, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 57, 25, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 58, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 59, -1, -1, -1, 60, -1 },
    { NULL, "LNSString;", 0x1, 59, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 59, 61, 62, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(now);
  methods[1].selector = @selector(nowWithOrgJodaTimeDateTimeZone:);
  methods[2].selector = @selector(nowWithOrgJodaTimeChronology:);
  methods[3].selector = @selector(parseWithNSString:);
  methods[4].selector = @selector(parseWithNSString:withOrgJodaTimeFormatDateTimeFormatter:);
  methods[5].selector = @selector(fromMillisOfDayWithLong:);
  methods[6].selector = @selector(fromMillisOfDayWithLong:withOrgJodaTimeChronology:);
  methods[7].selector = @selector(fromCalendarFieldsWithJavaUtilCalendar:);
  methods[8].selector = @selector(fromDateFieldsWithJavaUtilDate:);
  methods[9].selector = @selector(init);
  methods[10].selector = @selector(initWithOrgJodaTimeDateTimeZone:);
  methods[11].selector = @selector(initWithOrgJodaTimeChronology:);
  methods[12].selector = @selector(initWithLong:);
  methods[13].selector = @selector(initWithLong:withOrgJodaTimeDateTimeZone:);
  methods[14].selector = @selector(initWithLong:withOrgJodaTimeChronology:);
  methods[15].selector = @selector(initWithId:);
  methods[16].selector = @selector(initWithId:withOrgJodaTimeDateTimeZone:);
  methods[17].selector = @selector(initWithId:withOrgJodaTimeChronology:);
  methods[18].selector = @selector(initWithInt:withInt:);
  methods[19].selector = @selector(initWithInt:withInt:withInt:);
  methods[20].selector = @selector(initWithInt:withInt:withInt:withInt:);
  methods[21].selector = @selector(initWithInt:withInt:withInt:withInt:withOrgJodaTimeChronology:);
  methods[22].selector = @selector(readResolve);
  methods[23].selector = @selector(size);
  methods[24].selector = @selector(getFieldWithInt:withOrgJodaTimeChronology:);
  methods[25].selector = @selector(getValueWithInt:);
  methods[26].selector = @selector(getWithOrgJodaTimeDateTimeFieldType:);
  methods[27].selector = @selector(isSupportedWithOrgJodaTimeDateTimeFieldType:);
  methods[28].selector = @selector(isSupportedWithOrgJodaTimeDurationFieldType:);
  methods[29].selector = @selector(getLocalMillis);
  methods[30].selector = @selector(getChronology);
  methods[31].selector = @selector(isEqual:);
  methods[32].selector = @selector(compareToWithId:);
  methods[33].selector = @selector(withLocalMillisWithLong:);
  methods[34].selector = @selector(withFieldsWithOrgJodaTimeReadablePartial:);
  methods[35].selector = @selector(withFieldWithOrgJodaTimeDateTimeFieldType:withInt:);
  methods[36].selector = @selector(withFieldAddedWithOrgJodaTimeDurationFieldType:withInt:);
  methods[37].selector = @selector(withPeriodAddedWithOrgJodaTimeReadablePeriod:withInt:);
  methods[38].selector = @selector(plusWithOrgJodaTimeReadablePeriod:);
  methods[39].selector = @selector(plusHoursWithInt:);
  methods[40].selector = @selector(plusMinutesWithInt:);
  methods[41].selector = @selector(plusSecondsWithInt:);
  methods[42].selector = @selector(plusMillisWithInt:);
  methods[43].selector = @selector(minusWithOrgJodaTimeReadablePeriod:);
  methods[44].selector = @selector(minusHoursWithInt:);
  methods[45].selector = @selector(minusMinutesWithInt:);
  methods[46].selector = @selector(minusSecondsWithInt:);
  methods[47].selector = @selector(minusMillisWithInt:);
  methods[48].selector = @selector(propertyWithOrgJodaTimeDateTimeFieldType:);
  methods[49].selector = @selector(getHourOfDay);
  methods[50].selector = @selector(getMinuteOfHour);
  methods[51].selector = @selector(getSecondOfMinute);
  methods[52].selector = @selector(getMillisOfSecond);
  methods[53].selector = @selector(getMillisOfDay);
  methods[54].selector = @selector(withHourOfDayWithInt:);
  methods[55].selector = @selector(withMinuteOfHourWithInt:);
  methods[56].selector = @selector(withSecondOfMinuteWithInt:);
  methods[57].selector = @selector(withMillisOfSecondWithInt:);
  methods[58].selector = @selector(withMillisOfDayWithInt:);
  methods[59].selector = @selector(hourOfDay);
  methods[60].selector = @selector(minuteOfHour);
  methods[61].selector = @selector(secondOfMinute);
  methods[62].selector = @selector(millisOfSecond);
  methods[63].selector = @selector(millisOfDay);
  methods[64].selector = @selector(toDateTimeToday);
  methods[65].selector = @selector(toDateTimeTodayWithOrgJodaTimeDateTimeZone:);
  methods[66].selector = @selector(description);
  methods[67].selector = @selector(toStringWithNSString:);
  methods[68].selector = @selector(toStringWithNSString:withJavaUtilLocale:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeLocalTime_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "MIDNIGHT", "LOrgJodaTimeLocalTime;", .constantValue.asLong = 0, 0x19, -1, 63, -1, -1 },
    { "HOUR_OF_DAY", "I", .constantValue.asInt = OrgJodaTimeLocalTime_HOUR_OF_DAY, 0x1a, -1, -1, -1, -1 },
    { "MINUTE_OF_HOUR", "I", .constantValue.asInt = OrgJodaTimeLocalTime_MINUTE_OF_HOUR, 0x1a, -1, -1, -1, -1 },
    { "SECOND_OF_MINUTE", "I", .constantValue.asInt = OrgJodaTimeLocalTime_SECOND_OF_MINUTE, 0x1a, -1, -1, -1, -1 },
    { "MILLIS_OF_SECOND", "I", .constantValue.asInt = OrgJodaTimeLocalTime_MILLIS_OF_SECOND, 0x1a, -1, -1, -1, -1 },
    { "TIME_DURATION_TYPES", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 64, 65, -1 },
    { "iLocalMillis_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iChronology_", "LOrgJodaTimeChronology;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "now", "LOrgJodaTimeDateTimeZone;", "LOrgJodaTimeChronology;", "parse", "LNSString;", (void *)&OrgJodaTimeLocalTime__Annotations$0, "LNSString;LOrgJodaTimeFormatDateTimeFormatter;", "fromMillisOfDay", "J", "JLOrgJodaTimeChronology;", "fromCalendarFields", "LJavaUtilCalendar;", "fromDateFields", "LJavaUtilDate;", "JLOrgJodaTimeDateTimeZone;", "LNSObject;", "LNSObject;LOrgJodaTimeDateTimeZone;", "LNSObject;LOrgJodaTimeChronology;", "II", "III", "IIII", "IIIILOrgJodaTimeChronology;", "getField", "ILOrgJodaTimeChronology;", "getValue", "I", "get", "LOrgJodaTimeDateTimeFieldType;", "isSupported", "LOrgJodaTimeDurationFieldType;", "equals", "compareTo", "LOrgJodaTimeReadablePartial;", "withLocalMillis", "withFields", "withField", "LOrgJodaTimeDateTimeFieldType;I", "withFieldAdded", "LOrgJodaTimeDurationFieldType;I", "withPeriodAdded", "LOrgJodaTimeReadablePeriod;I", "plus", "LOrgJodaTimeReadablePeriod;", "plusHours", "plusMinutes", "plusSeconds", "plusMillis", "minus", "minusHours", "minusMinutes", "minusSeconds", "minusMillis", "property", "withHourOfDay", "withMinuteOfHour", "withSecondOfMinute", "withMillisOfSecond", "withMillisOfDay", "toDateTimeToday", "toString", (void *)&OrgJodaTimeLocalTime__Annotations$1, "LNSString;LJavaUtilLocale;", "LJavaLangIllegalArgumentException;", &OrgJodaTimeLocalTime_MIDNIGHT, &OrgJodaTimeLocalTime_TIME_DURATION_TYPES, "Ljava/util/Set<Lorg/joda/time/DurationFieldType;>;", "LOrgJodaTimeLocalTime_Property;" };
  static const J2ObjcClassInfo _OrgJodaTimeLocalTime = { "LocalTime", "org.joda.time", ptrTable, methods, fields, 7, 0x11, 69, 9, -1, 66, -1, -1, -1 };
  return &_OrgJodaTimeLocalTime;
}

+ (void)initialize {
  if (self == [OrgJodaTimeLocalTime class]) {
    OrgJodaTimeLocalTime_MIDNIGHT = new_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_(0, 0, 0, 0);
    OrgJodaTimeLocalTime_TIME_DURATION_TYPES = new_JavaUtilHashSet_init();
    {
      [OrgJodaTimeLocalTime_TIME_DURATION_TYPES addWithId:OrgJodaTimeDurationFieldType_millis()];
      [OrgJodaTimeLocalTime_TIME_DURATION_TYPES addWithId:OrgJodaTimeDurationFieldType_seconds()];
      [OrgJodaTimeLocalTime_TIME_DURATION_TYPES addWithId:OrgJodaTimeDurationFieldType_minutes()];
      [OrgJodaTimeLocalTime_TIME_DURATION_TYPES addWithId:OrgJodaTimeDurationFieldType_hours()];
    }
    J2OBJC_SET_INITIALIZED(OrgJodaTimeLocalTime)
  }
}

@end

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_now() {
  OrgJodaTimeLocalTime_initialize();
  return new_OrgJodaTimeLocalTime_init();
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_nowWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalTime_initialize();
  if (zone == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Zone must not be null");
  }
  return new_OrgJodaTimeLocalTime_initWithOrgJodaTimeDateTimeZone_(zone);
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_nowWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  OrgJodaTimeLocalTime_initialize();
  if (chronology == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Chronology must not be null");
  }
  return new_OrgJodaTimeLocalTime_initWithOrgJodaTimeChronology_(chronology);
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_parseWithNSString_(NSString *str) {
  OrgJodaTimeLocalTime_initialize();
  return OrgJodaTimeLocalTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, OrgJodaTimeFormatISODateTimeFormat_localTimeParser());
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(NSString *str, OrgJodaTimeFormatDateTimeFormatter *formatter) {
  OrgJodaTimeLocalTime_initialize();
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(formatter)) parseLocalTimeWithNSString:str];
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_fromMillisOfDayWithLong_(jlong millisOfDay) {
  OrgJodaTimeLocalTime_initialize();
  return OrgJodaTimeLocalTime_fromMillisOfDayWithLong_withOrgJodaTimeChronology_(millisOfDay, nil);
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_fromMillisOfDayWithLong_withOrgJodaTimeChronology_(jlong millisOfDay, OrgJodaTimeChronology *chrono) {
  OrgJodaTimeLocalTime_initialize();
  chrono = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono))) withUTC];
  return new_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(millisOfDay, chrono);
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_fromCalendarFieldsWithJavaUtilCalendar_(JavaUtilCalendar *calendar) {
  OrgJodaTimeLocalTime_initialize();
  if (calendar == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The calendar must not be null");
  }
  return new_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_([calendar getWithInt:JavaUtilCalendar_HOUR_OF_DAY], [calendar getWithInt:JavaUtilCalendar_MINUTE], [calendar getWithInt:JavaUtilCalendar_SECOND], [calendar getWithInt:JavaUtilCalendar_MILLISECOND]);
}

OrgJodaTimeLocalTime *OrgJodaTimeLocalTime_fromDateFieldsWithJavaUtilDate_(JavaUtilDate *date) {
  OrgJodaTimeLocalTime_initialize();
  if (date == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  return new_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_([date getHours], [date getMinutes], [date getSeconds], (((jint) ([date getTime] % 1000)) + 1000) % 1000);
}

void OrgJodaTimeLocalTime_init(OrgJodaTimeLocalTime *self) {
  OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(self, OrgJodaTimeDateTimeUtils_currentTimeMillis(), OrgJodaTimeChronoISOChronology_getInstance());
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_init() {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalTime, init)
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_init() {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalTime, init)
}

void OrgJodaTimeLocalTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalTime *self, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(self, OrgJodaTimeDateTimeUtils_currentTimeMillis(), OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone));
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalTime, initWithOrgJodaTimeDateTimeZone_, zone)
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalTime, initWithOrgJodaTimeDateTimeZone_, zone)
}

void OrgJodaTimeLocalTime_initWithOrgJodaTimeChronology_(OrgJodaTimeLocalTime *self, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(self, OrgJodaTimeDateTimeUtils_currentTimeMillis(), chronology);
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalTime, initWithOrgJodaTimeChronology_, chronology)
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalTime, initWithOrgJodaTimeChronology_, chronology)
}

void OrgJodaTimeLocalTime_initWithLong_(OrgJodaTimeLocalTime *self, jlong instant) {
  OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(self, instant, OrgJodaTimeChronoISOChronology_getInstance());
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithLong_(jlong instant) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalTime, initWithLong_, instant)
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithLong_(jlong instant) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalTime, initWithLong_, instant)
}

void OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalTime *self, jlong instant, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(self, instant, OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone));
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeDateTimeZone_(jlong instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalTime, initWithLong_withOrgJodaTimeDateTimeZone_, instant, zone)
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeDateTimeZone_(jlong instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalTime, initWithLong_withOrgJodaTimeDateTimeZone_, instant, zone)
}

void OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(OrgJodaTimeLocalTime *self, jlong instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseLocal_init(self);
  chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
  jlong localMillis = [((OrgJodaTimeDateTimeZone *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chronology)) getZone])) getMillisKeepLocalWithOrgJodaTimeDateTimeZone:JreLoadStatic(OrgJodaTimeDateTimeZone, UTC) withLong:instant];
  chronology = [chronology withUTC];
  self->iLocalMillis_ = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chronology)) millisOfDay])) getWithLong:localMillis];
  self->iChronology_ = chronology;
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalTime, initWithLong_withOrgJodaTimeChronology_, instant, chronology)
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalTime, initWithLong_withOrgJodaTimeChronology_, instant, chronology)
}

void OrgJodaTimeLocalTime_initWithId_(OrgJodaTimeLocalTime *self, id instant) {
  OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeChronology_(self, instant, nil);
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithId_(id instant) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalTime, initWithId_, instant)
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithId_(id instant) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalTime, initWithId_, instant)
}

void OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalTime *self, id instant, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeBaseBaseLocal_init(self);
  id<OrgJodaTimeConvertPartialConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getPartialConverterWithId:instant];
  OrgJodaTimeChronology *chronology = [((id<OrgJodaTimeConvertPartialConverter>) nil_chk(converter)) getChronologyWithId:instant withOrgJodaTimeDateTimeZone:zone];
  chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
  self->iChronology_ = [((OrgJodaTimeChronology *) nil_chk(chronology)) withUTC];
  IOSIntArray *values = [converter getPartialValuesWithOrgJodaTimeReadablePartial:self withId:instant withOrgJodaTimeChronology:chronology withOrgJodaTimeFormatDateTimeFormatter:OrgJodaTimeFormatISODateTimeFormat_localTimeParser()];
  self->iLocalMillis_ = [((OrgJodaTimeChronology *) nil_chk(self->iChronology_)) getDateTimeMillisWithLong:0LL withInt:IOSIntArray_Get(nil_chk(values), 0) withInt:IOSIntArray_Get(values, 1) withInt:IOSIntArray_Get(values, 2) withInt:IOSIntArray_Get(values, 3)];
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeDateTimeZone_(id instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalTime, initWithId_withOrgJodaTimeDateTimeZone_, instant, zone)
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeDateTimeZone_(id instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalTime, initWithId_withOrgJodaTimeDateTimeZone_, instant, zone)
}

void OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeChronology_(OrgJodaTimeLocalTime *self, id instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseLocal_init(self);
  id<OrgJodaTimeConvertPartialConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getPartialConverterWithId:instant];
  chronology = [((id<OrgJodaTimeConvertPartialConverter>) nil_chk(converter)) getChronologyWithId:instant withOrgJodaTimeChronology:chronology];
  chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
  self->iChronology_ = [((OrgJodaTimeChronology *) nil_chk(chronology)) withUTC];
  IOSIntArray *values = [converter getPartialValuesWithOrgJodaTimeReadablePartial:self withId:instant withOrgJodaTimeChronology:chronology withOrgJodaTimeFormatDateTimeFormatter:OrgJodaTimeFormatISODateTimeFormat_localTimeParser()];
  self->iLocalMillis_ = [((OrgJodaTimeChronology *) nil_chk(self->iChronology_)) getDateTimeMillisWithLong:0LL withInt:IOSIntArray_Get(nil_chk(values), 0) withInt:IOSIntArray_Get(values, 1) withInt:IOSIntArray_Get(values, 2) withInt:IOSIntArray_Get(values, 3)];
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalTime, initWithId_withOrgJodaTimeChronology_, instant, chronology)
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalTime, initWithId_withOrgJodaTimeChronology_, instant, chronology)
}

void OrgJodaTimeLocalTime_initWithInt_withInt_(OrgJodaTimeLocalTime *self, jint hourOfDay, jint minuteOfHour) {
  OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, hourOfDay, minuteOfHour, 0, 0, OrgJodaTimeChronoISOChronology_getInstanceUTC());
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithInt_withInt_(jint hourOfDay, jint minuteOfHour) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalTime, initWithInt_withInt_, hourOfDay, minuteOfHour)
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithInt_withInt_(jint hourOfDay, jint minuteOfHour) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalTime, initWithInt_withInt_, hourOfDay, minuteOfHour)
}

void OrgJodaTimeLocalTime_initWithInt_withInt_withInt_(OrgJodaTimeLocalTime *self, jint hourOfDay, jint minuteOfHour, jint secondOfMinute) {
  OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, hourOfDay, minuteOfHour, secondOfMinute, 0, OrgJodaTimeChronoISOChronology_getInstanceUTC());
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalTime, initWithInt_withInt_withInt_, hourOfDay, minuteOfHour, secondOfMinute)
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalTime, initWithInt_withInt_withInt_, hourOfDay, minuteOfHour, secondOfMinute)
}

void OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_(OrgJodaTimeLocalTime *self, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) {
  OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, OrgJodaTimeChronoISOChronology_getInstanceUTC());
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalTime, initWithInt_withInt_withInt_withInt_, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond)
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalTime, initWithInt_withInt_withInt_withInt_, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond)
}

void OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeLocalTime *self, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseLocal_init(self);
  chronology = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology))) withUTC];
  jlong instant = [((OrgJodaTimeChronology *) nil_chk(chronology)) getDateTimeMillisWithLong:0LL withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  self->iChronology_ = chronology;
  self->iLocalMillis_ = instant;
}

OrgJodaTimeLocalTime *new_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalTime, initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology)
}

OrgJodaTimeLocalTime *create_OrgJodaTimeLocalTime_initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalTime, initWithInt_withInt_withInt_withInt_withOrgJodaTimeChronology_, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology)
}

IOSObjectArray *OrgJodaTimeLocalTime__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_OrgJodaConvertFromString() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgJodaTimeLocalTime__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_OrgJodaConvertToString() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeLocalTime)

@implementation OrgJodaTimeLocalTime_Property

- (instancetype)initWithOrgJodaTimeLocalTime:(OrgJodaTimeLocalTime *)instant
                withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(self, instant, field);
  return self;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos {
  [((JavaIoObjectOutputStream *) nil_chk(oos)) writeObjectWithId:iInstant_];
  [oos writeObjectWithId:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getType]];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos {
  iInstant_ = (OrgJodaTimeLocalTime *) cast_chk([((JavaIoObjectInputStream *) nil_chk(oos)) readObject], [OrgJodaTimeLocalTime class]);
  OrgJodaTimeDateTimeFieldType *type = (OrgJodaTimeDateTimeFieldType *) cast_chk([oos readObject], [OrgJodaTimeDateTimeFieldType class]);
  iField_ = [((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getChronology]];
}

- (OrgJodaTimeDateTimeField *)getField {
  return iField_;
}

- (jlong)getMillis {
  return [((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis];
}

- (OrgJodaTimeChronology *)getChronology {
  return [((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getChronology];
}

- (OrgJodaTimeLocalTime *)getLocalTime {
  return iInstant_;
}

- (OrgJodaTimeLocalTime *)addCopyWithInt:(jint)value {
  return [((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:[iInstant_ getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalTime *)addCopyWithLong:(jlong)value {
  return [((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:[iInstant_ getLocalMillis] withLong:value]];
}

- (OrgJodaTimeLocalTime *)addNoWrapToCopyWithInt:(jint)value {
  jlong millis = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:[((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getLocalMillis] withInt:value];
  jlong rounded = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) getChronology])) millisOfDay])) getWithLong:millis];
  if (rounded != millis) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The addition exceeded the boundaries of LocalTime");
  }
  return [((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) withLocalMillisWithLong:millis];
}

- (OrgJodaTimeLocalTime *)addWrapFieldToCopyWithInt:(jint)value {
  return [((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWrapFieldWithLong:[iInstant_ getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalTime *)setCopyWithInt:(jint)value {
  return [((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:[iInstant_ getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalTime *)setCopyWithNSString:(NSString *)text
                           withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:[iInstant_ getLocalMillis] withNSString:text withJavaUtilLocale:locale]];
}

- (OrgJodaTimeLocalTime *)setCopyWithNSString:(NSString *)text {
  return [self setCopyWithNSString:text withJavaUtilLocale:nil];
}

- (OrgJodaTimeLocalTime *)withMaximumValue {
  return [self setCopyWithInt:[self getMaximumValue]];
}

- (OrgJodaTimeLocalTime *)withMinimumValue {
  return [self setCopyWithInt:[self getMinimumValue]];
}

- (OrgJodaTimeLocalTime *)roundFloorCopy {
  return [((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundFloorWithLong:[iInstant_ getLocalMillis]]];
}

- (OrgJodaTimeLocalTime *)roundCeilingCopy {
  return [((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundCeilingWithLong:[iInstant_ getLocalMillis]]];
}

- (OrgJodaTimeLocalTime *)roundHalfFloorCopy {
  return [((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfFloorWithLong:[iInstant_ getLocalMillis]]];
}

- (OrgJodaTimeLocalTime *)roundHalfCeilingCopy {
  return [((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfCeilingWithLong:[iInstant_ getLocalMillis]]];
}

- (OrgJodaTimeLocalTime *)roundHalfEvenCopy {
  return [((OrgJodaTimeLocalTime *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfEvenWithLong:[iInstant_ getLocalMillis]]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, 6, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 7, 9, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 12, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, 12, 14, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeLocalTime:withOrgJodaTimeDateTimeField:);
  methods[1].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[2].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[3].selector = @selector(getField);
  methods[4].selector = @selector(getMillis);
  methods[5].selector = @selector(getChronology);
  methods[6].selector = @selector(getLocalTime);
  methods[7].selector = @selector(addCopyWithInt:);
  methods[8].selector = @selector(addCopyWithLong:);
  methods[9].selector = @selector(addNoWrapToCopyWithInt:);
  methods[10].selector = @selector(addWrapFieldToCopyWithInt:);
  methods[11].selector = @selector(setCopyWithInt:);
  methods[12].selector = @selector(setCopyWithNSString:withJavaUtilLocale:);
  methods[13].selector = @selector(setCopyWithNSString:);
  methods[14].selector = @selector(withMaximumValue);
  methods[15].selector = @selector(withMinimumValue);
  methods[16].selector = @selector(roundFloorCopy);
  methods[17].selector = @selector(roundCeilingCopy);
  methods[18].selector = @selector(roundHalfFloorCopy);
  methods[19].selector = @selector(roundHalfCeilingCopy);
  methods[20].selector = @selector(roundHalfEvenCopy);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeLocalTime_Property_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iInstant_", "LOrgJodaTimeLocalTime;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iField_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeLocalTime;LOrgJodaTimeDateTimeField;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "addCopy", "I", "J", "addNoWrapToCopy", "addWrapFieldToCopy", "setCopy", "LNSString;LJavaUtilLocale;", "LNSString;", "LOrgJodaTimeLocalTime;" };
  static const J2ObjcClassInfo _OrgJodaTimeLocalTime_Property = { "Property", "org.joda.time", ptrTable, methods, fields, 7, 0x19, 21, 3, 15, -1, -1, -1, -1 };
  return &_OrgJodaTimeLocalTime_Property;
}

@end

void OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalTime_Property *self, OrgJodaTimeLocalTime *instant, OrgJodaTimeDateTimeField *field) {
  OrgJodaTimeFieldAbstractReadableInstantFieldProperty_init(self);
  self->iInstant_ = instant;
  self->iField_ = field;
}

OrgJodaTimeLocalTime_Property *new_OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalTime *instant, OrgJodaTimeDateTimeField *field) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalTime_Property, initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_, instant, field)
}

OrgJodaTimeLocalTime_Property *create_OrgJodaTimeLocalTime_Property_initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalTime *instant, OrgJodaTimeDateTimeField *field) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalTime_Property, initWithOrgJodaTimeLocalTime_withOrgJodaTimeDateTimeField_, instant, field)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeLocalTime_Property)
