//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/convert/ReadableInstantConverter.java
//

#include "AbstractConverter.h"
#include "Chronology.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "IOSClass.h"
#include "ISOChronology.h"
#include "J2ObjC_source.h"
#include "ReadableInstant.h"
#include "ReadableInstantConverter.h"

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeConvertReadableInstantConverter)

OrgJodaTimeConvertReadableInstantConverter *OrgJodaTimeConvertReadableInstantConverter_INSTANCE;

@implementation OrgJodaTimeConvertReadableInstantConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeConvertReadableInstantConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgJodaTimeChronology *)getChronologyWithId:(id)object
                   withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronology *chrono = [((id<OrgJodaTimeReadableInstant>) nil_chk(((id<OrgJodaTimeReadableInstant>) cast_check(object, OrgJodaTimeReadableInstant_class_())))) getChronology];
  if (chrono == nil) {
    return OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
  }
  OrgJodaTimeDateTimeZone *chronoZone = [chrono getZone];
  if (chronoZone != zone) {
    chrono = [chrono withZoneWithOrgJodaTimeDateTimeZone:zone];
    if (chrono == nil) {
      return OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
    }
  }
  return chrono;
}

- (OrgJodaTimeChronology *)getChronologyWithId:(id)object
                     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  if (chrono == nil) {
    chrono = [((id<OrgJodaTimeReadableInstant>) nil_chk(((id<OrgJodaTimeReadableInstant>) cast_check(object, OrgJodaTimeReadableInstant_class_())))) getChronology];
    chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono);
  }
  return chrono;
}

- (jlong)getInstantMillisWithId:(id)object
      withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return [((id<OrgJodaTimeReadableInstant>) nil_chk(((id<OrgJodaTimeReadableInstant>) cast_check(object, OrgJodaTimeReadableInstant_class_())))) getMillis];
}

- (IOSClass *)getSupportedType {
  return OrgJodaTimeReadableInstant_class_();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getChronologyWithId:withOrgJodaTimeDateTimeZone:);
  methods[2].selector = @selector(getChronologyWithId:withOrgJodaTimeChronology:);
  methods[3].selector = @selector(getInstantMillisWithId:withOrgJodaTimeChronology:);
  methods[4].selector = @selector(getSupportedType);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgJodaTimeConvertReadableInstantConverter;", .constantValue.asLong = 0, 0x18, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "getChronology", "LNSObject;LOrgJodaTimeDateTimeZone;", "LNSObject;LOrgJodaTimeChronology;", "getInstantMillis", "()Ljava/lang/Class<*>;", &OrgJodaTimeConvertReadableInstantConverter_INSTANCE };
  static const J2ObjcClassInfo _OrgJodaTimeConvertReadableInstantConverter = { "ReadableInstantConverter", "org.joda.time.convert", ptrTable, methods, fields, 7, 0x0, 5, 1, -1, -1, -1, -1, -1 };
  return &_OrgJodaTimeConvertReadableInstantConverter;
}

+ (void)initialize {
  if (self == [OrgJodaTimeConvertReadableInstantConverter class]) {
    OrgJodaTimeConvertReadableInstantConverter_INSTANCE = new_OrgJodaTimeConvertReadableInstantConverter_init();
    J2OBJC_SET_INITIALIZED(OrgJodaTimeConvertReadableInstantConverter)
  }
}

@end

void OrgJodaTimeConvertReadableInstantConverter_init(OrgJodaTimeConvertReadableInstantConverter *self) {
  OrgJodaTimeConvertAbstractConverter_init(self);
}

OrgJodaTimeConvertReadableInstantConverter *new_OrgJodaTimeConvertReadableInstantConverter_init() {
  J2OBJC_NEW_IMPL(OrgJodaTimeConvertReadableInstantConverter, init)
}

OrgJodaTimeConvertReadableInstantConverter *create_OrgJodaTimeConvertReadableInstantConverter_init() {
  J2OBJC_CREATE_IMPL(OrgJodaTimeConvertReadableInstantConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeConvertReadableInstantConverter)
