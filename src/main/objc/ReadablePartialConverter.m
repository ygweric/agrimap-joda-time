//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/convert/ReadablePartialConverter.java
//

#include "AbstractConverter.h"
#include "Chronology.h"
#include "DateTimeFieldType.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ReadablePartial.h"
#include "ReadablePartialConverter.h"

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeConvertReadablePartialConverter)

OrgJodaTimeConvertReadablePartialConverter *OrgJodaTimeConvertReadablePartialConverter_INSTANCE;

@implementation OrgJodaTimeConvertReadablePartialConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeConvertReadablePartialConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgJodaTimeChronology *)getChronologyWithId:(id)object
                   withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return [((OrgJodaTimeChronology *) nil_chk([self getChronologyWithId:object withOrgJodaTimeChronology:nil])) withZoneWithOrgJodaTimeDateTimeZone:zone];
}

- (OrgJodaTimeChronology *)getChronologyWithId:(id)object
                     withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  if (chrono == nil) {
    chrono = [((id<OrgJodaTimeReadablePartial>) nil_chk(((id<OrgJodaTimeReadablePartial>) cast_check(object, OrgJodaTimeReadablePartial_class_())))) getChronology];
    chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono);
  }
  return chrono;
}

- (IOSIntArray *)getPartialValuesWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)fieldSource
                                                         withId:(id)object
                                      withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  id<OrgJodaTimeReadablePartial> input = (id<OrgJodaTimeReadablePartial>) cast_check(object, OrgJodaTimeReadablePartial_class_());
  jint size = [((id<OrgJodaTimeReadablePartial>) nil_chk(fieldSource)) size];
  IOSIntArray *values = [IOSIntArray newArrayWithLength:size];
  for (jint i = 0; i < size; i++) {
    *IOSIntArray_GetRef(values, i) = [((id<OrgJodaTimeReadablePartial>) nil_chk(input)) getWithOrgJodaTimeDateTimeFieldType:[fieldSource getFieldTypeWithInt:i]];
  }
  [((OrgJodaTimeChronology *) nil_chk(chrono)) validateWithOrgJodaTimeReadablePartial:fieldSource withIntArray:values];
  return values;
}

- (IOSClass *)getSupportedType {
  return OrgJodaTimeReadablePartial_class_();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getChronologyWithId:withOrgJodaTimeDateTimeZone:);
  methods[2].selector = @selector(getChronologyWithId:withOrgJodaTimeChronology:);
  methods[3].selector = @selector(getPartialValuesWithOrgJodaTimeReadablePartial:withId:withOrgJodaTimeChronology:);
  methods[4].selector = @selector(getSupportedType);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgJodaTimeConvertReadablePartialConverter;", .constantValue.asLong = 0, 0x18, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "getChronology", "LNSObject;LOrgJodaTimeDateTimeZone;", "LNSObject;LOrgJodaTimeChronology;", "getPartialValues", "LOrgJodaTimeReadablePartial;LNSObject;LOrgJodaTimeChronology;", "()Ljava/lang/Class<*>;", &OrgJodaTimeConvertReadablePartialConverter_INSTANCE };
  static const J2ObjcClassInfo _OrgJodaTimeConvertReadablePartialConverter = { "ReadablePartialConverter", "org.joda.time.convert", ptrTable, methods, fields, 7, 0x0, 5, 1, -1, -1, -1, -1, -1 };
  return &_OrgJodaTimeConvertReadablePartialConverter;
}

+ (void)initialize {
  if (self == [OrgJodaTimeConvertReadablePartialConverter class]) {
    OrgJodaTimeConvertReadablePartialConverter_INSTANCE = new_OrgJodaTimeConvertReadablePartialConverter_init();
    J2OBJC_SET_INITIALIZED(OrgJodaTimeConvertReadablePartialConverter)
  }
}

@end

void OrgJodaTimeConvertReadablePartialConverter_init(OrgJodaTimeConvertReadablePartialConverter *self) {
  OrgJodaTimeConvertAbstractConverter_init(self);
}

OrgJodaTimeConvertReadablePartialConverter *new_OrgJodaTimeConvertReadablePartialConverter_init() {
  J2OBJC_NEW_IMPL(OrgJodaTimeConvertReadablePartialConverter, init)
}

OrgJodaTimeConvertReadablePartialConverter *create_OrgJodaTimeConvertReadablePartialConverter_init() {
  J2OBJC_CREATE_IMPL(OrgJodaTimeConvertReadablePartialConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeConvertReadablePartialConverter)
