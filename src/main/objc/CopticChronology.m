//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/chrono/CopticChronology.java
//

#include "AssembledChronology.h"
#include "BasicFixedMonthChronology.h"
#include "BasicMonthOfYearDateTimeField.h"
#include "BasicSingleEraDateTimeField.h"
#include "Chronology.h"
#include "CopticChronology.h"
#include "DateTime.h"
#include "DateTimeConstants.h"
#include "DateTimeField.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "LimitChronology.h"
#include "SkipDateTimeField.h"
#include "ZonedChronology.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

@interface OrgJodaTimeChronoCopticChronology ()

- (id)readResolve;

@end

inline jlong OrgJodaTimeChronoCopticChronology_get_serialVersionUID();
#define OrgJodaTimeChronoCopticChronology_serialVersionUID -5972804258688333942LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoCopticChronology, serialVersionUID, jlong)

inline OrgJodaTimeDateTimeField *OrgJodaTimeChronoCopticChronology_get_ERA_FIELD();
static OrgJodaTimeDateTimeField *OrgJodaTimeChronoCopticChronology_ERA_FIELD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoCopticChronology, ERA_FIELD, OrgJodaTimeDateTimeField *)

inline jint OrgJodaTimeChronoCopticChronology_get_MIN_YEAR();
#define OrgJodaTimeChronoCopticChronology_MIN_YEAR -292269337
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoCopticChronology, MIN_YEAR, jint)

inline jint OrgJodaTimeChronoCopticChronology_get_MAX_YEAR();
#define OrgJodaTimeChronoCopticChronology_MAX_YEAR 292272708
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoCopticChronology, MAX_YEAR, jint)

inline JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeChronoCopticChronology_get_cCache();
static JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeChronoCopticChronology_cCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoCopticChronology, cCache, JavaUtilConcurrentConcurrentHashMap *)

inline OrgJodaTimeChronoCopticChronology *OrgJodaTimeChronoCopticChronology_get_INSTANCE_UTC();
static OrgJodaTimeChronoCopticChronology *OrgJodaTimeChronoCopticChronology_INSTANCE_UTC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoCopticChronology, INSTANCE_UTC, OrgJodaTimeChronoCopticChronology *)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeChronoCopticChronology)

@implementation OrgJodaTimeChronoCopticChronology

+ (OrgJodaTimeChronoCopticChronology *)getInstanceUTC {
  return OrgJodaTimeChronoCopticChronology_getInstanceUTC();
}

+ (OrgJodaTimeChronoCopticChronology *)getInstance {
  return OrgJodaTimeChronoCopticChronology_getInstance();
}

+ (OrgJodaTimeChronoCopticChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeChronoCopticChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeChronoCopticChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                                                      withInt:(jint)minDaysInFirstWeek {
  return OrgJodaTimeChronoCopticChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(zone, minDaysInFirstWeek);
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
                                      withInt:(jint)minDaysInFirstWeek {
  OrgJodaTimeChronoCopticChronology_initWithOrgJodaTimeChronology_withId_withInt_(self, base, param, minDaysInFirstWeek);
  return self;
}

- (id)readResolve {
  OrgJodaTimeChronology *base = [self getBase];
  jint minDays = [self getMinimumDaysInFirstWeek];
  minDays = (minDays == 0 ? 4 : minDays);
  return base == nil ? OrgJodaTimeChronoCopticChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(JreLoadStatic(OrgJodaTimeDateTimeZone, UTC), minDays) : OrgJodaTimeChronoCopticChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_([base getZone], minDays);
}

- (OrgJodaTimeChronology *)withUTC {
  return OrgJodaTimeChronoCopticChronology_INSTANCE_UTC;
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  if (zone == [self getZone]) {
    return self;
  }
  return OrgJodaTimeChronoCopticChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
}

- (jboolean)isLeapDayWithLong:(jlong)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self dayOfMonth])) getWithLong:instant] == 6 && [((OrgJodaTimeDateTimeField *) nil_chk([self monthOfYear])) isLeapWithLong:instant];
}

- (jlong)calculateFirstDayOfYearMillisWithInt:(jint)year {
  jint relativeYear = year - 1687;
  jint leapYears;
  if (relativeYear <= 0) {
    leapYears = JreRShift32((relativeYear + 3), 2);
  }
  else {
    leapYears = JreRShift32(relativeYear, 2);
    if (![self isLeapYearWithInt:year]) {
      leapYears++;
    }
  }
  jlong millis = (relativeYear * 365LL + leapYears) * (jlong) OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
  return millis + (365LL - 112) * OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
}

- (jint)getMinYear {
  return OrgJodaTimeChronoCopticChronology_MIN_YEAR;
}

- (jint)getMaxYear {
  return OrgJodaTimeChronoCopticChronology_MAX_YEAR;
}

- (jlong)getApproxMillisAtEpochDividedByTwo {
  return (1686LL * OrgJodaTimeChronoBasicFixedMonthChronology_MILLIS_PER_YEAR + 112LL * OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY) / 2;
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  if ([self getBase] == nil) {
    [super assembleWithOrgJodaTimeChronoAssembledChronology_Fields:fields];
    ((OrgJodaTimeChronoAssembledChronology_Fields *) nil_chk(fields))->year_ = new_OrgJodaTimeFieldSkipDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_(self, fields->year_);
    fields->weekyear_ = new_OrgJodaTimeFieldSkipDateTimeField_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeField_(self, fields->weekyear_);
    fields->era_ = OrgJodaTimeChronoCopticChronology_ERA_FIELD;
    fields->monthOfYear_ = new_OrgJodaTimeChronoBasicMonthOfYearDateTimeField_initWithOrgJodaTimeChronoBasicChronology_withInt_(self, 13);
    fields->months_ = [fields->monthOfYear_ getDurationField];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJodaTimeChronoCopticChronology;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronoCopticChronology;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronoCopticChronology;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronoCopticChronology;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getInstanceUTC);
  methods[1].selector = @selector(getInstance);
  methods[2].selector = @selector(getInstanceWithOrgJodaTimeDateTimeZone:);
  methods[3].selector = @selector(getInstanceWithOrgJodaTimeDateTimeZone:withInt:);
  methods[4].selector = @selector(initWithOrgJodaTimeChronology:withId:withInt:);
  methods[5].selector = @selector(readResolve);
  methods[6].selector = @selector(withUTC);
  methods[7].selector = @selector(withZoneWithOrgJodaTimeDateTimeZone:);
  methods[8].selector = @selector(isLeapDayWithLong:);
  methods[9].selector = @selector(calculateFirstDayOfYearMillisWithInt:);
  methods[10].selector = @selector(getMinYear);
  methods[11].selector = @selector(getMaxYear);
  methods[12].selector = @selector(getApproxMillisAtEpochDividedByTwo);
  methods[13].selector = @selector(assembleWithOrgJodaTimeChronoAssembledChronology_Fields:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeChronoCopticChronology_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "AM", "I", .constantValue.asInt = OrgJodaTimeChronoCopticChronology_AM, 0x19, -1, -1, -1, -1 },
    { "ERA_FIELD", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "MIN_YEAR", "I", .constantValue.asInt = OrgJodaTimeChronoCopticChronology_MIN_YEAR, 0x1a, -1, -1, -1, -1 },
    { "MAX_YEAR", "I", .constantValue.asInt = OrgJodaTimeChronoCopticChronology_MAX_YEAR, 0x1a, -1, -1, -1, -1 },
    { "cCache", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x1a, -1, 12, 13, -1 },
    { "INSTANCE_UTC", "LOrgJodaTimeChronoCopticChronology;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LOrgJodaTimeDateTimeZone;", "LOrgJodaTimeDateTimeZone;I", "LOrgJodaTimeChronology;LNSObject;I", "withZone", "isLeapDay", "J", "calculateFirstDayOfYearMillis", "I", "assemble", "LOrgJodaTimeChronoAssembledChronology_Fields;", &OrgJodaTimeChronoCopticChronology_ERA_FIELD, &OrgJodaTimeChronoCopticChronology_cCache, "Ljava/util/concurrent/ConcurrentHashMap<Lorg/joda/time/DateTimeZone;[Lorg/joda/time/chrono/CopticChronology;>;", &OrgJodaTimeChronoCopticChronology_INSTANCE_UTC };
  static const J2ObjcClassInfo _OrgJodaTimeChronoCopticChronology = { "CopticChronology", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0x11, 14, 7, -1, -1, -1, -1, -1 };
  return &_OrgJodaTimeChronoCopticChronology;
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoCopticChronology class]) {
    OrgJodaTimeChronoCopticChronology_ERA_FIELD = new_OrgJodaTimeChronoBasicSingleEraDateTimeField_initWithNSString_(@"AM");
    OrgJodaTimeChronoCopticChronology_cCache = new_JavaUtilConcurrentConcurrentHashMap_init();
    {
      OrgJodaTimeChronoCopticChronology_INSTANCE_UTC = OrgJodaTimeChronoCopticChronology_getInstanceWithOrgJodaTimeDateTimeZone_(JreLoadStatic(OrgJodaTimeDateTimeZone, UTC));
    }
    J2OBJC_SET_INITIALIZED(OrgJodaTimeChronoCopticChronology)
  }
}

@end

OrgJodaTimeChronoCopticChronology *OrgJodaTimeChronoCopticChronology_getInstanceUTC() {
  OrgJodaTimeChronoCopticChronology_initialize();
  return OrgJodaTimeChronoCopticChronology_INSTANCE_UTC;
}

OrgJodaTimeChronoCopticChronology *OrgJodaTimeChronoCopticChronology_getInstance() {
  OrgJodaTimeChronoCopticChronology_initialize();
  return OrgJodaTimeChronoCopticChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(OrgJodaTimeDateTimeZone_getDefault(), 4);
}

OrgJodaTimeChronoCopticChronology *OrgJodaTimeChronoCopticChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeChronoCopticChronology_initialize();
  return OrgJodaTimeChronoCopticChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(zone, 4);
}

OrgJodaTimeChronoCopticChronology *OrgJodaTimeChronoCopticChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(OrgJodaTimeDateTimeZone *zone, jint minDaysInFirstWeek) {
  OrgJodaTimeChronoCopticChronology_initialize();
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  OrgJodaTimeChronoCopticChronology *chrono;
  IOSObjectArray *chronos = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(OrgJodaTimeChronoCopticChronology_cCache)) getWithId:zone];
  if (chronos == nil) {
    chronos = [IOSObjectArray newArrayWithLength:7 type:OrgJodaTimeChronoCopticChronology_class_()];
    IOSObjectArray *oldChronos = [OrgJodaTimeChronoCopticChronology_cCache putIfAbsentWithId:zone withId:chronos];
    if (oldChronos != nil) {
      chronos = oldChronos;
    }
  }
  @try {
    chrono = IOSObjectArray_Get(chronos, minDaysInFirstWeek - 1);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Invalid min days in first week: ", minDaysInFirstWeek));
  }
  if (chrono == nil) {
    @synchronized(chronos) {
      chrono = IOSObjectArray_Get(chronos, minDaysInFirstWeek - 1);
      if (chrono == nil) {
        if (zone == JreLoadStatic(OrgJodaTimeDateTimeZone, UTC)) {
          chrono = new_OrgJodaTimeChronoCopticChronology_initWithOrgJodaTimeChronology_withId_withInt_(nil, nil, minDaysInFirstWeek);
          OrgJodaTimeDateTime *lowerLimit = new_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(1, 1, 1, 0, 0, 0, 0, chrono);
          chrono = new_OrgJodaTimeChronoCopticChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronoLimitChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeReadableDateTime_withOrgJodaTimeReadableDateTime_(chrono, lowerLimit, nil), nil, minDaysInFirstWeek);
        }
        else {
          chrono = OrgJodaTimeChronoCopticChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(JreLoadStatic(OrgJodaTimeDateTimeZone, UTC), minDaysInFirstWeek);
          chrono = new_OrgJodaTimeChronoCopticChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronoZonedChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(chrono, zone), nil, minDaysInFirstWeek);
        }
        (void) IOSObjectArray_Set(chronos, minDaysInFirstWeek - 1, chrono);
      }
    }
  }
  return chrono;
}

void OrgJodaTimeChronoCopticChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronoCopticChronology *self, OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek) {
  OrgJodaTimeChronoBasicFixedMonthChronology_initWithOrgJodaTimeChronology_withId_withInt_(self, base, param, minDaysInFirstWeek);
}

OrgJodaTimeChronoCopticChronology *new_OrgJodaTimeChronoCopticChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoCopticChronology, initWithOrgJodaTimeChronology_withId_withInt_, base, param, minDaysInFirstWeek)
}

OrgJodaTimeChronoCopticChronology *create_OrgJodaTimeChronoCopticChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoCopticChronology, initWithOrgJodaTimeChronology_withId_withInt_, base, param, minDaysInFirstWeek)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoCopticChronology)
