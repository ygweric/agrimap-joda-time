//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/chrono/ZonedChronology.java
//

#include "AssembledChronology.h"
#include "BaseDateTimeField.h"
#include "BaseDurationField.h"
#include "Chronology.h"
#include "DateTimeConstants.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "IOSPrimitiveArray.h"
#include "IllegalFieldValueException.h"
#include "IllegalInstantException.h"
#include "J2ObjC_source.h"
#include "ReadablePartial.h"
#include "ZonedChronology.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"

@interface OrgJodaTimeChronoZonedChronology ()

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                  withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

- (jlong)localToUTCWithLong:(jlong)localInstant;

- (OrgJodaTimeDurationField *)convertFieldWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted;

- (OrgJodaTimeDateTimeField *)convertFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted;

@end

inline jlong OrgJodaTimeChronoZonedChronology_get_serialVersionUID();
#define OrgJodaTimeChronoZonedChronology_serialVersionUID -1079258847191166848LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoZonedChronology, serialVersionUID, jlong)

inline jlong OrgJodaTimeChronoZonedChronology_get_NEAR_ZERO();
#define OrgJodaTimeChronoZonedChronology_NEAR_ZERO 604800000LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoZonedChronology, NEAR_ZERO, jlong)

__attribute__((unused)) static void OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronoZonedChronology *self, OrgJodaTimeChronology *base, OrgJodaTimeDateTimeZone *zone);

__attribute__((unused)) static OrgJodaTimeChronoZonedChronology *new_OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronology *base, OrgJodaTimeDateTimeZone *zone) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoZonedChronology *create_OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronology *base, OrgJodaTimeDateTimeZone *zone);

__attribute__((unused)) static jlong OrgJodaTimeChronoZonedChronology_localToUTCWithLong_(OrgJodaTimeChronoZonedChronology *self, jlong localInstant);

__attribute__((unused)) static OrgJodaTimeDurationField *OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(OrgJodaTimeChronoZonedChronology *self, OrgJodaTimeDurationField *field, JavaUtilHashMap *converted);

__attribute__((unused)) static OrgJodaTimeDateTimeField *OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(OrgJodaTimeChronoZonedChronology *self, OrgJodaTimeDateTimeField *field, JavaUtilHashMap *converted);

@interface OrgJodaTimeChronoZonedChronology_ZonedDurationField ()

- (jint)getOffsetToAddWithLong:(jlong)instant;

- (jint)getOffsetFromLocalToSubtractWithLong:(jlong)instant;

- (jlong)addOffsetWithLong:(jlong)instant;

@end

inline jlong OrgJodaTimeChronoZonedChronology_ZonedDurationField_get_serialVersionUID();
#define OrgJodaTimeChronoZonedChronology_ZonedDurationField_serialVersionUID -485345310999208286LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoZonedChronology_ZonedDurationField, serialVersionUID, jlong)

__attribute__((unused)) static jint OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetToAddWithLong_(OrgJodaTimeChronoZonedChronology_ZonedDurationField *self, jlong instant);

__attribute__((unused)) static jint OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetFromLocalToSubtractWithLong_(OrgJodaTimeChronoZonedChronology_ZonedDurationField *self, jlong instant);

__attribute__((unused)) static jlong OrgJodaTimeChronoZonedChronology_ZonedDurationField_addOffsetWithLong_(OrgJodaTimeChronoZonedChronology_ZonedDurationField *self, jlong instant);

@interface OrgJodaTimeChronoZonedChronology_ZonedDateTimeField ()

- (jint)getOffsetToAddWithLong:(jlong)instant;

@end

inline jlong OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_get_serialVersionUID();
#define OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_serialVersionUID -3968986277775529794LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField, serialVersionUID, jlong)

__attribute__((unused)) static jint OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *self, jlong instant);

@implementation OrgJodaTimeChronoZonedChronology

+ (OrgJodaTimeChronoZonedChronology *)getInstanceWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                               withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeChronoZonedChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(base, zone);
}

+ (jboolean)useTimeArithmeticWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field {
  return OrgJodaTimeChronoZonedChronology_useTimeArithmeticWithOrgJodaTimeDurationField_(field);
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                  withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(self, base, zone);
  return self;
}

- (OrgJodaTimeDateTimeZone *)getZone {
  return (OrgJodaTimeDateTimeZone *) cast_chk([self getParam], [OrgJodaTimeDateTimeZone class]);
}

- (OrgJodaTimeChronology *)withUTC {
  return [self getBase];
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  if (zone == [self getParam]) {
    return self;
  }
  if (zone == JreLoadStatic(OrgJodaTimeDateTimeZone, UTC)) {
    return [self getBase];
  }
  return new_OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_([self getBase], zone);
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)millisOfDay {
  return OrgJodaTimeChronoZonedChronology_localToUTCWithLong_(self, [((OrgJodaTimeChronology *) nil_chk([self getBase])) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:millisOfDay]);
}

- (jlong)getDateTimeMillisWithInt:(jint)year
                          withInt:(jint)monthOfYear
                          withInt:(jint)dayOfMonth
                          withInt:(jint)hourOfDay
                          withInt:(jint)minuteOfHour
                          withInt:(jint)secondOfMinute
                          withInt:(jint)millisOfSecond {
  return OrgJodaTimeChronoZonedChronology_localToUTCWithLong_(self, [((OrgJodaTimeChronology *) nil_chk([self getBase])) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond]);
}

- (jlong)getDateTimeMillisWithLong:(jlong)instant
                           withInt:(jint)hourOfDay
                           withInt:(jint)minuteOfHour
                           withInt:(jint)secondOfMinute
                           withInt:(jint)millisOfSecond {
  return OrgJodaTimeChronoZonedChronology_localToUTCWithLong_(self, [((OrgJodaTimeChronology *) nil_chk([self getBase])) getDateTimeMillisWithLong:instant + [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) getOffsetWithLong:instant] withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond]);
}

- (jlong)localToUTCWithLong:(jlong)localInstant {
  return OrgJodaTimeChronoZonedChronology_localToUTCWithLong_(self, localInstant);
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  JavaUtilHashMap *converted = new_JavaUtilHashMap_init();
  ((OrgJodaTimeChronoAssembledChronology_Fields *) nil_chk(fields))->eras_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->eras_, converted);
  fields->centuries_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->centuries_, converted);
  fields->years_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->years_, converted);
  fields->months_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->months_, converted);
  fields->weekyears_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->weekyears_, converted);
  fields->weeks_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->weeks_, converted);
  fields->days_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->days_, converted);
  fields->halfdays_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->halfdays_, converted);
  fields->hours_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->hours_, converted);
  fields->minutes_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->minutes_, converted);
  fields->seconds_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->seconds_, converted);
  fields->millis_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, fields->millis_, converted);
  fields->year_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->year_, converted);
  fields->yearOfEra_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->yearOfEra_, converted);
  fields->yearOfCentury_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->yearOfCentury_, converted);
  fields->centuryOfEra_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->centuryOfEra_, converted);
  fields->era_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->era_, converted);
  fields->dayOfWeek_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->dayOfWeek_, converted);
  fields->dayOfMonth_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->dayOfMonth_, converted);
  fields->dayOfYear_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->dayOfYear_, converted);
  fields->monthOfYear_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->monthOfYear_, converted);
  fields->weekOfWeekyear_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->weekOfWeekyear_, converted);
  fields->weekyear_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->weekyear_, converted);
  fields->weekyearOfCentury_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->weekyearOfCentury_, converted);
  fields->millisOfSecond_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->millisOfSecond_, converted);
  fields->millisOfDay_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->millisOfDay_, converted);
  fields->secondOfMinute_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->secondOfMinute_, converted);
  fields->secondOfDay_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->secondOfDay_, converted);
  fields->minuteOfHour_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->minuteOfHour_, converted);
  fields->minuteOfDay_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->minuteOfDay_, converted);
  fields->hourOfDay_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->hourOfDay_, converted);
  fields->hourOfHalfday_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->hourOfHalfday_, converted);
  fields->clockhourOfDay_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->clockhourOfDay_, converted);
  fields->clockhourOfHalfday_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->clockhourOfHalfday_, converted);
  fields->halfdayOfDay_ = OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, fields->halfdayOfDay_, converted);
}

- (OrgJodaTimeDurationField *)convertFieldWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted {
  return OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, field, converted);
}

- (OrgJodaTimeDateTimeField *)convertFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                                                   withJavaUtilHashMap:(JavaUtilHashMap *)converted {
  return OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(self, field, converted);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if ([obj isKindOfClass:[OrgJodaTimeChronoZonedChronology class]] == false) {
    return false;
  }
  OrgJodaTimeChronoZonedChronology *chrono = (OrgJodaTimeChronoZonedChronology *) cast_chk(obj, [OrgJodaTimeChronoZonedChronology class]);
  return [((OrgJodaTimeChronology *) nil_chk([self getBase])) isEqual:[((OrgJodaTimeChronoZonedChronology *) nil_chk(chrono)) getBase]] && [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) isEqual:[chrono getZone]];
}

- (NSUInteger)hash {
  return 326565 + ((jint) [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) hash]) * 11 + ((jint) [((OrgJodaTimeChronology *) nil_chk([self getBase])) hash]) * 7;
}

- (NSString *)description {
  return JreStrcat("$@$$C", @"ZonedChronology[", [self getBase], @", ", [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) getID], ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJodaTimeChronoZonedChronology;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeZone;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "J", 0x1, 6, 9, 8, -1, -1, -1 },
    { NULL, "J", 0x1, 6, 10, 8, -1, -1, -1 },
    { NULL, "J", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 14, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x2, 15, 16, -1, 17, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x2, 15, 18, -1, 19, -1, -1 },
    { NULL, "Z", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 23, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getInstanceWithOrgJodaTimeChronology:withOrgJodaTimeDateTimeZone:);
  methods[1].selector = @selector(useTimeArithmeticWithOrgJodaTimeDurationField:);
  methods[2].selector = @selector(initWithOrgJodaTimeChronology:withOrgJodaTimeDateTimeZone:);
  methods[3].selector = @selector(getZone);
  methods[4].selector = @selector(withUTC);
  methods[5].selector = @selector(withZoneWithOrgJodaTimeDateTimeZone:);
  methods[6].selector = @selector(getDateTimeMillisWithInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(getDateTimeMillisWithInt:withInt:withInt:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(getDateTimeMillisWithLong:withInt:withInt:withInt:withInt:);
  methods[9].selector = @selector(localToUTCWithLong:);
  methods[10].selector = @selector(assembleWithOrgJodaTimeChronoAssembledChronology_Fields:);
  methods[11].selector = @selector(convertFieldWithOrgJodaTimeDurationField:withJavaUtilHashMap:);
  methods[12].selector = @selector(convertFieldWithOrgJodaTimeDateTimeField:withJavaUtilHashMap:);
  methods[13].selector = @selector(isEqual:);
  methods[14].selector = @selector(hash);
  methods[15].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeChronoZonedChronology_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "NEAR_ZERO", "J", .constantValue.asLong = OrgJodaTimeChronoZonedChronology_NEAR_ZERO, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LOrgJodaTimeChronology;LOrgJodaTimeDateTimeZone;", "useTimeArithmetic", "LOrgJodaTimeDurationField;", "withZone", "LOrgJodaTimeDateTimeZone;", "getDateTimeMillis", "IIII", "LJavaLangIllegalArgumentException;", "IIIIIII", "JIIII", "localToUTC", "J", "assemble", "LOrgJodaTimeChronoAssembledChronology_Fields;", "convertField", "LOrgJodaTimeDurationField;LJavaUtilHashMap;", "(Lorg/joda/time/DurationField;Ljava/util/HashMap<Ljava/lang/Object;Ljava/lang/Object;>;)Lorg/joda/time/DurationField;", "LOrgJodaTimeDateTimeField;LJavaUtilHashMap;", "(Lorg/joda/time/DateTimeField;Ljava/util/HashMap<Ljava/lang/Object;Ljava/lang/Object;>;)Lorg/joda/time/DateTimeField;", "equals", "LNSObject;", "hashCode", "toString", "LOrgJodaTimeChronoZonedChronology_ZonedDurationField;LOrgJodaTimeChronoZonedChronology_ZonedDateTimeField;" };
  static const J2ObjcClassInfo _OrgJodaTimeChronoZonedChronology = { "ZonedChronology", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0x11, 16, 2, -1, 24, -1, -1, -1 };
  return &_OrgJodaTimeChronoZonedChronology;
}

@end

OrgJodaTimeChronoZonedChronology *OrgJodaTimeChronoZonedChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronology *base, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeChronoZonedChronology_initialize();
  if (base == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Must supply a chronology");
  }
  base = [base withUTC];
  if (base == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"UTC chronology must not be null");
  }
  if (zone == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"DateTimeZone must not be null");
  }
  return new_OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(base, zone);
}

jboolean OrgJodaTimeChronoZonedChronology_useTimeArithmeticWithOrgJodaTimeDurationField_(OrgJodaTimeDurationField *field) {
  OrgJodaTimeChronoZonedChronology_initialize();
  return field != nil && [field getUnitMillis] < OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR * 12;
}

void OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronoZonedChronology *self, OrgJodaTimeChronology *base, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeChronoAssembledChronology_initWithOrgJodaTimeChronology_withId_(self, base, zone);
}

OrgJodaTimeChronoZonedChronology *new_OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronology *base, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoZonedChronology, initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_, base, zone)
}

OrgJodaTimeChronoZonedChronology *create_OrgJodaTimeChronoZonedChronology_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronology *base, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoZonedChronology, initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_, base, zone)
}

jlong OrgJodaTimeChronoZonedChronology_localToUTCWithLong_(OrgJodaTimeChronoZonedChronology *self, jlong localInstant) {
  if (localInstant == JavaLangLong_MAX_VALUE) {
    return JavaLangLong_MAX_VALUE;
  }
  else if (localInstant == JavaLangLong_MIN_VALUE) {
    return JavaLangLong_MIN_VALUE;
  }
  OrgJodaTimeDateTimeZone *zone = [self getZone];
  jint offset = [((OrgJodaTimeDateTimeZone *) nil_chk(zone)) getOffsetFromLocalWithLong:localInstant];
  jlong utcInstant = localInstant - offset;
  if (localInstant > OrgJodaTimeChronoZonedChronology_NEAR_ZERO && utcInstant < 0) {
    return JavaLangLong_MAX_VALUE;
  }
  else if (localInstant < -OrgJodaTimeChronoZonedChronology_NEAR_ZERO && utcInstant > 0) {
    return JavaLangLong_MIN_VALUE;
  }
  jint offsetBasedOnUtc = [zone getOffsetWithLong:utcInstant];
  if (offset != offsetBasedOnUtc) {
    @throw new_OrgJodaTimeIllegalInstantException_initWithLong_withNSString_(localInstant, [zone getID]);
  }
  return utcInstant;
}

OrgJodaTimeDurationField *OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(OrgJodaTimeChronoZonedChronology *self, OrgJodaTimeDurationField *field, JavaUtilHashMap *converted) {
  if (field == nil || ![field isSupported]) {
    return field;
  }
  if ([((JavaUtilHashMap *) nil_chk(converted)) containsKeyWithId:field]) {
    return (OrgJodaTimeDurationField *) cast_chk([converted getWithId:field], [OrgJodaTimeDurationField class]);
  }
  OrgJodaTimeChronoZonedChronology_ZonedDurationField *zonedField = new_OrgJodaTimeChronoZonedChronology_ZonedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDateTimeZone_(field, [self getZone]);
  (void) [converted putWithId:field withId:zonedField];
  return zonedField;
}

OrgJodaTimeDateTimeField *OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDateTimeField_withJavaUtilHashMap_(OrgJodaTimeChronoZonedChronology *self, OrgJodaTimeDateTimeField *field, JavaUtilHashMap *converted) {
  if (field == nil || ![field isSupported]) {
    return field;
  }
  if ([((JavaUtilHashMap *) nil_chk(converted)) containsKeyWithId:field]) {
    return (OrgJodaTimeDateTimeField *) cast_chk([converted getWithId:field], [OrgJodaTimeDateTimeField class]);
  }
  OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *zonedField = new_OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeZone_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(field, [self getZone], OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, [field getDurationField], converted), OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, [field getRangeDurationField], converted), OrgJodaTimeChronoZonedChronology_convertFieldWithOrgJodaTimeDurationField_withJavaUtilHashMap_(self, [field getLeapDurationField], converted));
  (void) [converted putWithId:field withId:zonedField];
  return zonedField;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoZonedChronology)

@implementation OrgJodaTimeChronoZonedChronology_ZonedDurationField

- (instancetype)initWithOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)field
                     withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronoZonedChronology_ZonedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDateTimeZone_(self, field, zone);
  return self;
}

- (jboolean)isPrecise {
  return iTimeField_ ? [((OrgJodaTimeDurationField *) nil_chk(iField_)) isPrecise] : [((OrgJodaTimeDurationField *) nil_chk(iField_)) isPrecise] && [((OrgJodaTimeDateTimeZone *) nil_chk(self->iZone_)) isFixed];
}

- (jlong)getUnitMillis {
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getUnitMillis];
}

- (jint)getValueWithLong:(jlong)duration
                withLong:(jlong)instant {
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getValueWithLong:duration withLong:OrgJodaTimeChronoZonedChronology_ZonedDurationField_addOffsetWithLong_(self, instant)];
}

- (jlong)getValueAsLongWithLong:(jlong)duration
                       withLong:(jlong)instant {
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getValueAsLongWithLong:duration withLong:OrgJodaTimeChronoZonedChronology_ZonedDurationField_addOffsetWithLong_(self, instant)];
}

- (jlong)getMillisWithInt:(jint)value
                 withLong:(jlong)instant {
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getMillisWithInt:value withLong:OrgJodaTimeChronoZonedChronology_ZonedDurationField_addOffsetWithLong_(self, instant)];
}

- (jlong)getMillisWithLong:(jlong)value
                  withLong:(jlong)instant {
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getMillisWithLong:value withLong:OrgJodaTimeChronoZonedChronology_ZonedDurationField_addOffsetWithLong_(self, instant)];
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value {
  jint offset = OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetToAddWithLong_(self, instant);
  instant = [((OrgJodaTimeDurationField *) nil_chk(iField_)) addWithLong:instant + offset withInt:value];
  return instant - (iTimeField_ ? offset : OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetFromLocalToSubtractWithLong_(self, instant));
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value {
  jint offset = OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetToAddWithLong_(self, instant);
  instant = [((OrgJodaTimeDurationField *) nil_chk(iField_)) addWithLong:instant + offset withLong:value];
  return instant - (iTimeField_ ? offset : OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetFromLocalToSubtractWithLong_(self, instant));
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  jint offset = OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetToAddWithLong_(self, subtrahendInstant);
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getDifferenceWithLong:minuendInstant + (iTimeField_ ? offset : OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetToAddWithLong_(self, minuendInstant)) withLong:subtrahendInstant + offset];
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  jint offset = OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetToAddWithLong_(self, subtrahendInstant);
  return [((OrgJodaTimeDurationField *) nil_chk(iField_)) getDifferenceAsLongWithLong:minuendInstant + (iTimeField_ ? offset : OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetToAddWithLong_(self, minuendInstant)) withLong:subtrahendInstant + offset];
}

- (jint)getOffsetToAddWithLong:(jlong)instant {
  return OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetToAddWithLong_(self, instant);
}

- (jint)getOffsetFromLocalToSubtractWithLong:(jlong)instant {
  return OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetFromLocalToSubtractWithLong_(self, instant);
}

- (jlong)addOffsetWithLong:(jlong)instant {
  return OrgJodaTimeChronoZonedChronology_ZonedDurationField_addOffsetWithLong_(self, instant);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  else if ([obj isKindOfClass:[OrgJodaTimeChronoZonedChronology_ZonedDurationField class]]) {
    OrgJodaTimeChronoZonedChronology_ZonedDurationField *other = (OrgJodaTimeChronoZonedChronology_ZonedDurationField *) cast_chk(obj, [OrgJodaTimeChronoZonedChronology_ZonedDurationField class]);
    return [((OrgJodaTimeDurationField *) nil_chk(iField_)) isEqual:((OrgJodaTimeChronoZonedChronology_ZonedDurationField *) nil_chk(other))->iField_] && [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) isEqual:other->iZone_];
  }
  return false;
}

- (NSUInteger)hash {
  return ((jint) [((OrgJodaTimeDurationField *) nil_chk(iField_)) hash]) ^ ((jint) [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) hash]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 12, 11, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 13, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeDurationField:withOrgJodaTimeDateTimeZone:);
  methods[1].selector = @selector(isPrecise);
  methods[2].selector = @selector(getUnitMillis);
  methods[3].selector = @selector(getValueWithLong:withLong:);
  methods[4].selector = @selector(getValueAsLongWithLong:withLong:);
  methods[5].selector = @selector(getMillisWithInt:withLong:);
  methods[6].selector = @selector(getMillisWithLong:withLong:);
  methods[7].selector = @selector(addWithLong:withInt:);
  methods[8].selector = @selector(addWithLong:withLong:);
  methods[9].selector = @selector(getDifferenceWithLong:withLong:);
  methods[10].selector = @selector(getDifferenceAsLongWithLong:withLong:);
  methods[11].selector = @selector(getOffsetToAddWithLong:);
  methods[12].selector = @selector(getOffsetFromLocalToSubtractWithLong:);
  methods[13].selector = @selector(addOffsetWithLong:);
  methods[14].selector = @selector(isEqual:);
  methods[15].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeChronoZonedChronology_ZonedDurationField_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iField_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "iTimeField_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "iZone_", "LOrgJodaTimeDateTimeZone;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeDurationField;LOrgJodaTimeDateTimeZone;", "getValue", "JJ", "getValueAsLong", "getMillis", "IJ", "add", "JI", "getDifference", "getDifferenceAsLong", "getOffsetToAdd", "J", "getOffsetFromLocalToSubtract", "addOffset", "equals", "LNSObject;", "hashCode", "LOrgJodaTimeChronoZonedChronology;" };
  static const J2ObjcClassInfo _OrgJodaTimeChronoZonedChronology_ZonedDurationField = { "ZonedDurationField", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0x8, 16, 4, 17, -1, -1, -1, -1 };
  return &_OrgJodaTimeChronoZonedChronology_ZonedDurationField;
}

@end

void OrgJodaTimeChronoZonedChronology_ZonedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDateTimeZone_(OrgJodaTimeChronoZonedChronology_ZonedDurationField *self, OrgJodaTimeDurationField *field, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeFieldBaseDurationField_initWithOrgJodaTimeDurationFieldType_(self, [((OrgJodaTimeDurationField *) nil_chk(field)) getType]);
  if (![field isSupported]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  self->iField_ = field;
  self->iTimeField_ = OrgJodaTimeChronoZonedChronology_useTimeArithmeticWithOrgJodaTimeDurationField_(field);
  self->iZone_ = zone;
}

OrgJodaTimeChronoZonedChronology_ZonedDurationField *new_OrgJodaTimeChronoZonedChronology_ZonedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDateTimeZone_(OrgJodaTimeDurationField *field, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoZonedChronology_ZonedDurationField, initWithOrgJodaTimeDurationField_withOrgJodaTimeDateTimeZone_, field, zone)
}

OrgJodaTimeChronoZonedChronology_ZonedDurationField *create_OrgJodaTimeChronoZonedChronology_ZonedDurationField_initWithOrgJodaTimeDurationField_withOrgJodaTimeDateTimeZone_(OrgJodaTimeDurationField *field, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoZonedChronology_ZonedDurationField, initWithOrgJodaTimeDurationField_withOrgJodaTimeDateTimeZone_, field, zone)
}

jint OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetToAddWithLong_(OrgJodaTimeChronoZonedChronology_ZonedDurationField *self, jlong instant) {
  jint offset = [((OrgJodaTimeDateTimeZone *) nil_chk(self->iZone_)) getOffsetWithLong:instant];
  jlong sum = instant + offset;
  if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"Adding time zone offset caused overflow");
  }
  return offset;
}

jint OrgJodaTimeChronoZonedChronology_ZonedDurationField_getOffsetFromLocalToSubtractWithLong_(OrgJodaTimeChronoZonedChronology_ZonedDurationField *self, jlong instant) {
  jint offset = [((OrgJodaTimeDateTimeZone *) nil_chk(self->iZone_)) getOffsetFromLocalWithLong:instant];
  jlong diff = instant - offset;
  if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"Subtracting time zone offset caused overflow");
  }
  return offset;
}

jlong OrgJodaTimeChronoZonedChronology_ZonedDurationField_addOffsetWithLong_(OrgJodaTimeChronoZonedChronology_ZonedDurationField *self, jlong instant) {
  return [((OrgJodaTimeDateTimeZone *) nil_chk(self->iZone_)) convertUTCToLocalWithLong:instant];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoZonedChronology_ZonedDurationField)

@implementation OrgJodaTimeChronoZonedChronology_ZonedDateTimeField

- (instancetype)initWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field
                     withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)durationField
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)rangeDurationField
                    withOrgJodaTimeDurationField:(OrgJodaTimeDurationField *)leapDurationField {
  OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeZone_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(self, field, zone, durationField, rangeDurationField, leapDurationField);
  return self;
}

- (jboolean)isLenient {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) isLenient];
}

- (jint)getWithLong:(jlong)instant {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getWithLong:localInstant];
}

- (NSString *)getAsTextWithLong:(jlong)instant
             withJavaUtilLocale:(JavaUtilLocale *)locale {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getAsTextWithLong:localInstant withJavaUtilLocale:locale];
}

- (NSString *)getAsShortTextWithLong:(jlong)instant
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getAsShortTextWithLong:localInstant withJavaUtilLocale:locale];
}

- (NSString *)getAsTextWithInt:(jint)fieldValue
            withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getAsTextWithInt:fieldValue withJavaUtilLocale:locale];
}

- (NSString *)getAsShortTextWithInt:(jint)fieldValue
                 withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getAsShortTextWithInt:fieldValue withJavaUtilLocale:locale];
}

- (jlong)addWithLong:(jlong)instant
             withInt:(jint)value {
  if (iTimeField_) {
    jint offset = OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, instant);
    jlong localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:instant + offset withInt:value];
    return localInstant - offset;
  }
  else {
    jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
    localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:localInstant withInt:value];
    return [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:false withLong:instant];
  }
}

- (jlong)addWithLong:(jlong)instant
            withLong:(jlong)value {
  if (iTimeField_) {
    jint offset = OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, instant);
    jlong localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:instant + offset withLong:value];
    return localInstant - offset;
  }
  else {
    jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
    localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:localInstant withLong:value];
    return [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:false withLong:instant];
  }
}

- (jlong)addWrapFieldWithLong:(jlong)instant
                      withInt:(jint)value {
  if (iTimeField_) {
    jint offset = OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, instant);
    jlong localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWrapFieldWithLong:instant + offset withInt:value];
    return localInstant - offset;
  }
  else {
    jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
    localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWrapFieldWithLong:localInstant withInt:value];
    return [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:false withLong:instant];
  }
}

- (jlong)setWithLong:(jlong)instant
             withInt:(jint)value {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:localInstant withInt:value];
  jlong result = [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:false withLong:instant];
  if ([self getWithLong:result] != value) {
    OrgJodaTimeIllegalInstantException *cause = new_OrgJodaTimeIllegalInstantException_initWithLong_withNSString_(localInstant, [iZone_ getID]);
    OrgJodaTimeIllegalFieldValueException *ex = new_OrgJodaTimeIllegalFieldValueException_initWithOrgJodaTimeDateTimeFieldType_withNSNumber_withNSString_([iField_ getType], JavaLangInteger_valueOfWithInt_(value), [cause getMessage]);
    (void) [ex initCauseWithNSException:cause];
    @throw ex;
  }
  return result;
}

- (jlong)setWithLong:(jlong)instant
        withNSString:(NSString *)text
  withJavaUtilLocale:(JavaUtilLocale *)locale {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:localInstant withNSString:text withJavaUtilLocale:locale];
  return [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:false withLong:instant];
}

- (jint)getDifferenceWithLong:(jlong)minuendInstant
                     withLong:(jlong)subtrahendInstant {
  jint offset = OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, subtrahendInstant);
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getDifferenceWithLong:minuendInstant + (iTimeField_ ? offset : OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, minuendInstant)) withLong:subtrahendInstant + offset];
}

- (jlong)getDifferenceAsLongWithLong:(jlong)minuendInstant
                            withLong:(jlong)subtrahendInstant {
  jint offset = OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, subtrahendInstant);
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getDifferenceAsLongWithLong:minuendInstant + (iTimeField_ ? offset : OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, minuendInstant)) withLong:subtrahendInstant + offset];
}

- (OrgJodaTimeDurationField *)getDurationField {
  return iDurationField_;
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return iRangeDurationField_;
}

- (jboolean)isLeapWithLong:(jlong)instant {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) isLeapWithLong:localInstant];
}

- (jint)getLeapAmountWithLong:(jlong)instant {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getLeapAmountWithLong:localInstant];
}

- (OrgJodaTimeDurationField *)getLeapDurationField {
  return iLeapDurationField_;
}

- (jlong)roundFloorWithLong:(jlong)instant {
  if (iTimeField_) {
    jint offset = OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, instant);
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundFloorWithLong:instant + offset];
    return instant - offset;
  }
  else {
    jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
    localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundFloorWithLong:localInstant];
    return [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:false withLong:instant];
  }
}

- (jlong)roundCeilingWithLong:(jlong)instant {
  if (iTimeField_) {
    jint offset = OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, instant);
    instant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundCeilingWithLong:instant + offset];
    return instant - offset;
  }
  else {
    jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
    localInstant = [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundCeilingWithLong:localInstant];
    return [iZone_ convertLocalToUTCWithLong:localInstant withBoolean:false withLong:instant];
  }
}

- (jlong)remainderWithLong:(jlong)instant {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) remainderWithLong:localInstant];
}

- (jint)getMinimumValue {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMinimumValue];
}

- (jint)getMinimumValueWithLong:(jlong)instant {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMinimumValueWithLong:localInstant];
}

- (jint)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMinimumValueWithOrgJodaTimeReadablePartial:instant];
}

- (jint)getMinimumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant
                                         withIntArray:(IOSIntArray *)values {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMinimumValueWithOrgJodaTimeReadablePartial:instant withIntArray:values];
}

- (jint)getMaximumValue {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMaximumValue];
}

- (jint)getMaximumValueWithLong:(jlong)instant {
  jlong localInstant = [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) convertUTCToLocalWithLong:instant];
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMaximumValueWithLong:localInstant];
}

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMaximumValueWithOrgJodaTimeReadablePartial:instant];
}

- (jint)getMaximumValueWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)instant
                                         withIntArray:(IOSIntArray *)values {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMaximumValueWithOrgJodaTimeReadablePartial:instant withIntArray:values];
}

- (jint)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMaximumTextLengthWithJavaUtilLocale:locale];
}

- (jint)getMaximumShortTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getMaximumShortTextLengthWithJavaUtilLocale:locale];
}

- (jint)getOffsetToAddWithLong:(jlong)instant {
  return OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(self, instant);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  else if ([obj isKindOfClass:[OrgJodaTimeChronoZonedChronology_ZonedDateTimeField class]]) {
    OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *other = (OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *) cast_chk(obj, [OrgJodaTimeChronoZonedChronology_ZonedDateTimeField class]);
    return [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) isEqual:((OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *) nil_chk(other))->iField_] && [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) isEqual:other->iZone_] && [((OrgJodaTimeDurationField *) nil_chk(iDurationField_)) isEqual:other->iDurationField_] && [((OrgJodaTimeDurationField *) nil_chk(iRangeDurationField_)) isEqual:other->iRangeDurationField_];
  }
  return false;
}

- (NSUInteger)hash {
  return ((jint) [((OrgJodaTimeDateTimeField *) nil_chk(iField_)) hash]) ^ ((jint) [((OrgJodaTimeDateTimeZone *) nil_chk(iZone_)) hash]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 7, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 14, 9, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 19, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 20, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 20, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 23, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 23, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 23, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 26, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 27, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 30, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeDateTimeField:withOrgJodaTimeDateTimeZone:withOrgJodaTimeDurationField:withOrgJodaTimeDurationField:withOrgJodaTimeDurationField:);
  methods[1].selector = @selector(isLenient);
  methods[2].selector = @selector(getWithLong:);
  methods[3].selector = @selector(getAsTextWithLong:withJavaUtilLocale:);
  methods[4].selector = @selector(getAsShortTextWithLong:withJavaUtilLocale:);
  methods[5].selector = @selector(getAsTextWithInt:withJavaUtilLocale:);
  methods[6].selector = @selector(getAsShortTextWithInt:withJavaUtilLocale:);
  methods[7].selector = @selector(addWithLong:withInt:);
  methods[8].selector = @selector(addWithLong:withLong:);
  methods[9].selector = @selector(addWrapFieldWithLong:withInt:);
  methods[10].selector = @selector(setWithLong:withInt:);
  methods[11].selector = @selector(setWithLong:withNSString:withJavaUtilLocale:);
  methods[12].selector = @selector(getDifferenceWithLong:withLong:);
  methods[13].selector = @selector(getDifferenceAsLongWithLong:withLong:);
  methods[14].selector = @selector(getDurationField);
  methods[15].selector = @selector(getRangeDurationField);
  methods[16].selector = @selector(isLeapWithLong:);
  methods[17].selector = @selector(getLeapAmountWithLong:);
  methods[18].selector = @selector(getLeapDurationField);
  methods[19].selector = @selector(roundFloorWithLong:);
  methods[20].selector = @selector(roundCeilingWithLong:);
  methods[21].selector = @selector(remainderWithLong:);
  methods[22].selector = @selector(getMinimumValue);
  methods[23].selector = @selector(getMinimumValueWithLong:);
  methods[24].selector = @selector(getMinimumValueWithOrgJodaTimeReadablePartial:);
  methods[25].selector = @selector(getMinimumValueWithOrgJodaTimeReadablePartial:withIntArray:);
  methods[26].selector = @selector(getMaximumValue);
  methods[27].selector = @selector(getMaximumValueWithLong:);
  methods[28].selector = @selector(getMaximumValueWithOrgJodaTimeReadablePartial:);
  methods[29].selector = @selector(getMaximumValueWithOrgJodaTimeReadablePartial:withIntArray:);
  methods[30].selector = @selector(getMaximumTextLengthWithJavaUtilLocale:);
  methods[31].selector = @selector(getMaximumShortTextLengthWithJavaUtilLocale:);
  methods[32].selector = @selector(getOffsetToAddWithLong:);
  methods[33].selector = @selector(isEqual:);
  methods[34].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iField_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "iZone_", "LOrgJodaTimeDateTimeZone;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "iDurationField_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "iTimeField_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "iRangeDurationField_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "iLeapDurationField_", "LOrgJodaTimeDurationField;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeDateTimeField;LOrgJodaTimeDateTimeZone;LOrgJodaTimeDurationField;LOrgJodaTimeDurationField;LOrgJodaTimeDurationField;", "get", "J", "getAsText", "JLJavaUtilLocale;", "getAsShortText", "ILJavaUtilLocale;", "add", "JI", "JJ", "addWrapField", "set", "JLNSString;LJavaUtilLocale;", "getDifference", "getDifferenceAsLong", "isLeap", "getLeapAmount", "roundFloor", "roundCeiling", "remainder", "getMinimumValue", "LOrgJodaTimeReadablePartial;", "LOrgJodaTimeReadablePartial;[I", "getMaximumValue", "getMaximumTextLength", "LJavaUtilLocale;", "getMaximumShortTextLength", "getOffsetToAdd", "equals", "LNSObject;", "hashCode", "LOrgJodaTimeChronoZonedChronology;" };
  static const J2ObjcClassInfo _OrgJodaTimeChronoZonedChronology_ZonedDateTimeField = { "ZonedDateTimeField", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0x18, 35, 7, 31, -1, -1, -1, -1 };
  return &_OrgJodaTimeChronoZonedChronology_ZonedDateTimeField;
}

@end

void OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeZone_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *self, OrgJodaTimeDateTimeField *field, OrgJodaTimeDateTimeZone *zone, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, OrgJodaTimeDurationField *leapDurationField) {
  OrgJodaTimeFieldBaseDateTimeField_initWithOrgJodaTimeDateTimeFieldType_(self, [((OrgJodaTimeDateTimeField *) nil_chk(field)) getType]);
  if (![field isSupported]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  self->iField_ = field;
  self->iZone_ = zone;
  self->iDurationField_ = durationField;
  self->iTimeField_ = OrgJodaTimeChronoZonedChronology_useTimeArithmeticWithOrgJodaTimeDurationField_(durationField);
  self->iRangeDurationField_ = rangeDurationField;
  self->iLeapDurationField_ = leapDurationField;
}

OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *new_OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeZone_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeField *field, OrgJodaTimeDateTimeZone *zone, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, OrgJodaTimeDurationField *leapDurationField) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField, initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeZone_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_, field, zone, durationField, rangeDurationField, leapDurationField)
}

OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *create_OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeZone_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_(OrgJodaTimeDateTimeField *field, OrgJodaTimeDateTimeZone *zone, OrgJodaTimeDurationField *durationField, OrgJodaTimeDurationField *rangeDurationField, OrgJodaTimeDurationField *leapDurationField) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField, initWithOrgJodaTimeDateTimeField_withOrgJodaTimeDateTimeZone_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_withOrgJodaTimeDurationField_, field, zone, durationField, rangeDurationField, leapDurationField)
}

jint OrgJodaTimeChronoZonedChronology_ZonedDateTimeField_getOffsetToAddWithLong_(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField *self, jlong instant) {
  jint offset = [((OrgJodaTimeDateTimeZone *) nil_chk(self->iZone_)) getOffsetWithLong:instant];
  jlong sum = instant + offset;
  if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"Adding time zone offset caused overflow");
  }
  return offset;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoZonedChronology_ZonedDateTimeField)
