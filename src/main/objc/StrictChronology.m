//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/chrono/StrictChronology.java
//

#include "AssembledChronology.h"
#include "Chronology.h"
#include "DateTimeField.h"
#include "DateTimeZone.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "StrictChronology.h"
#include "StrictDateTimeField.h"
#include "java/lang/IllegalArgumentException.h"

@interface OrgJodaTimeChronoStrictChronology () {
 @public
  OrgJodaTimeChronology *iWithUTC_;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base;

+ (OrgJodaTimeDateTimeField *)convertFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeChronoStrictChronology, iWithUTC_, OrgJodaTimeChronology *)

inline jlong OrgJodaTimeChronoStrictChronology_get_serialVersionUID();
#define OrgJodaTimeChronoStrictChronology_serialVersionUID 6633006628097111960LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoStrictChronology, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJodaTimeChronoStrictChronology_initWithOrgJodaTimeChronology_(OrgJodaTimeChronoStrictChronology *self, OrgJodaTimeChronology *base);

__attribute__((unused)) static OrgJodaTimeChronoStrictChronology *new_OrgJodaTimeChronoStrictChronology_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *base) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoStrictChronology *create_OrgJodaTimeChronoStrictChronology_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *base);

__attribute__((unused)) static OrgJodaTimeDateTimeField *OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(OrgJodaTimeDateTimeField *field);

@implementation OrgJodaTimeChronoStrictChronology

+ (OrgJodaTimeChronoStrictChronology *)getInstanceWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base {
  return OrgJodaTimeChronoStrictChronology_getInstanceWithOrgJodaTimeChronology_(base);
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base {
  OrgJodaTimeChronoStrictChronology_initWithOrgJodaTimeChronology_(self, base);
  return self;
}

- (OrgJodaTimeChronology *)withUTC {
  if (iWithUTC_ == nil) {
    if ([self getZone] == JreLoadStatic(OrgJodaTimeDateTimeZone, UTC)) {
      iWithUTC_ = self;
    }
    else {
      iWithUTC_ = OrgJodaTimeChronoStrictChronology_getInstanceWithOrgJodaTimeChronology_([((OrgJodaTimeChronology *) nil_chk([self getBase])) withUTC]);
    }
  }
  return iWithUTC_;
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  if (zone == JreLoadStatic(OrgJodaTimeDateTimeZone, UTC)) {
    return [self withUTC];
  }
  if (zone == [self getZone]) {
    return self;
  }
  return OrgJodaTimeChronoStrictChronology_getInstanceWithOrgJodaTimeChronology_([((OrgJodaTimeChronology *) nil_chk([self getBase])) withZoneWithOrgJodaTimeDateTimeZone:zone]);
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  ((OrgJodaTimeChronoAssembledChronology_Fields *) nil_chk(fields))->year_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->year_);
  fields->yearOfEra_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->yearOfEra_);
  fields->yearOfCentury_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->yearOfCentury_);
  fields->centuryOfEra_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->centuryOfEra_);
  fields->era_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->era_);
  fields->dayOfWeek_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->dayOfWeek_);
  fields->dayOfMonth_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->dayOfMonth_);
  fields->dayOfYear_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->dayOfYear_);
  fields->monthOfYear_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->monthOfYear_);
  fields->weekOfWeekyear_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->weekOfWeekyear_);
  fields->weekyear_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->weekyear_);
  fields->weekyearOfCentury_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->weekyearOfCentury_);
  fields->millisOfSecond_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->millisOfSecond_);
  fields->millisOfDay_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->millisOfDay_);
  fields->secondOfMinute_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->secondOfMinute_);
  fields->secondOfDay_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->secondOfDay_);
  fields->minuteOfHour_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->minuteOfHour_);
  fields->minuteOfDay_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->minuteOfDay_);
  fields->hourOfDay_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->hourOfDay_);
  fields->hourOfHalfday_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->hourOfHalfday_);
  fields->clockhourOfDay_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->clockhourOfDay_);
  fields->clockhourOfHalfday_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->clockhourOfHalfday_);
  fields->halfdayOfDay_ = OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(fields->halfdayOfDay_);
}

+ (OrgJodaTimeDateTimeField *)convertFieldWithOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  return OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(field);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if ([obj isKindOfClass:[OrgJodaTimeChronoStrictChronology class]] == false) {
    return false;
  }
  OrgJodaTimeChronoStrictChronology *chrono = (OrgJodaTimeChronoStrictChronology *) cast_chk(obj, [OrgJodaTimeChronoStrictChronology class]);
  return [((OrgJodaTimeChronology *) nil_chk([self getBase])) isEqual:[((OrgJodaTimeChronoStrictChronology *) nil_chk(chrono)) getBase]];
}

- (NSUInteger)hash {
  return 352831696 + ((jint) [((OrgJodaTimeChronology *) nil_chk([self getBase])) hash]) * 7;
}

- (NSString *)description {
  return JreStrcat("$$C", @"StrictChronology[", [((OrgJodaTimeChronology *) nil_chk([self getBase])) description], ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJodaTimeChronoStrictChronology;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x1a, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getInstanceWithOrgJodaTimeChronology:);
  methods[1].selector = @selector(initWithOrgJodaTimeChronology:);
  methods[2].selector = @selector(withUTC);
  methods[3].selector = @selector(withZoneWithOrgJodaTimeDateTimeZone:);
  methods[4].selector = @selector(assembleWithOrgJodaTimeChronoAssembledChronology_Fields:);
  methods[5].selector = @selector(convertFieldWithOrgJodaTimeDateTimeField:);
  methods[6].selector = @selector(isEqual:);
  methods[7].selector = @selector(hash);
  methods[8].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeChronoStrictChronology_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iWithUTC_", "LOrgJodaTimeChronology;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LOrgJodaTimeChronology;", "withZone", "LOrgJodaTimeDateTimeZone;", "assemble", "LOrgJodaTimeChronoAssembledChronology_Fields;", "convertField", "LOrgJodaTimeDateTimeField;", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _OrgJodaTimeChronoStrictChronology = { "StrictChronology", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0x11, 9, 2, -1, -1, -1, -1, -1 };
  return &_OrgJodaTimeChronoStrictChronology;
}

@end

OrgJodaTimeChronoStrictChronology *OrgJodaTimeChronoStrictChronology_getInstanceWithOrgJodaTimeChronology_(OrgJodaTimeChronology *base) {
  OrgJodaTimeChronoStrictChronology_initialize();
  if (base == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Must supply a chronology");
  }
  return new_OrgJodaTimeChronoStrictChronology_initWithOrgJodaTimeChronology_(base);
}

void OrgJodaTimeChronoStrictChronology_initWithOrgJodaTimeChronology_(OrgJodaTimeChronoStrictChronology *self, OrgJodaTimeChronology *base) {
  OrgJodaTimeChronoAssembledChronology_initWithOrgJodaTimeChronology_withId_(self, base, nil);
}

OrgJodaTimeChronoStrictChronology *new_OrgJodaTimeChronoStrictChronology_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *base) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoStrictChronology, initWithOrgJodaTimeChronology_, base)
}

OrgJodaTimeChronoStrictChronology *create_OrgJodaTimeChronoStrictChronology_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *base) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoStrictChronology, initWithOrgJodaTimeChronology_, base)
}

OrgJodaTimeDateTimeField *OrgJodaTimeChronoStrictChronology_convertFieldWithOrgJodaTimeDateTimeField_(OrgJodaTimeDateTimeField *field) {
  OrgJodaTimeChronoStrictChronology_initialize();
  return OrgJodaTimeFieldStrictDateTimeField_getInstanceWithOrgJodaTimeDateTimeField_(field);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoStrictChronology)
