//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/chrono/GregorianChronology.java
//

#include "AssembledChronology.h"
#include "BasicGJChronology.h"
#include "Chronology.h"
#include "DateTimeConstants.h"
#include "DateTimeZone.h"
#include "GregorianChronology.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "ZonedChronology.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

@interface OrgJodaTimeChronoGregorianChronology ()

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
                                      withInt:(jint)minDaysInFirstWeek;

- (id)readResolve;

@end

inline jlong OrgJodaTimeChronoGregorianChronology_get_serialVersionUID();
#define OrgJodaTimeChronoGregorianChronology_serialVersionUID -861407383323710522LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoGregorianChronology, serialVersionUID, jlong)

inline jlong OrgJodaTimeChronoGregorianChronology_get_MILLIS_PER_YEAR();
#define OrgJodaTimeChronoGregorianChronology_MILLIS_PER_YEAR 31556952000LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoGregorianChronology, MILLIS_PER_YEAR, jlong)

inline jlong OrgJodaTimeChronoGregorianChronology_get_MILLIS_PER_MONTH();
#define OrgJodaTimeChronoGregorianChronology_MILLIS_PER_MONTH 2629746000LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoGregorianChronology, MILLIS_PER_MONTH, jlong)

inline jint OrgJodaTimeChronoGregorianChronology_get_DAYS_0000_TO_1970();
#define OrgJodaTimeChronoGregorianChronology_DAYS_0000_TO_1970 719527
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoGregorianChronology, DAYS_0000_TO_1970, jint)

inline jint OrgJodaTimeChronoGregorianChronology_get_MIN_YEAR();
#define OrgJodaTimeChronoGregorianChronology_MIN_YEAR -292275054
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoGregorianChronology, MIN_YEAR, jint)

inline jint OrgJodaTimeChronoGregorianChronology_get_MAX_YEAR();
#define OrgJodaTimeChronoGregorianChronology_MAX_YEAR 292278993
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeChronoGregorianChronology, MAX_YEAR, jint)

inline OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_get_INSTANCE_UTC();
static OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_INSTANCE_UTC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoGregorianChronology, INSTANCE_UTC, OrgJodaTimeChronoGregorianChronology *)

inline JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeChronoGregorianChronology_get_cCache();
static JavaUtilConcurrentConcurrentHashMap *OrgJodaTimeChronoGregorianChronology_cCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeChronoGregorianChronology, cCache, JavaUtilConcurrentConcurrentHashMap *)

__attribute__((unused)) static void OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronoGregorianChronology *self, OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek);

__attribute__((unused)) static OrgJodaTimeChronoGregorianChronology *new_OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeChronoGregorianChronology *create_OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek);

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeChronoGregorianChronology)

@implementation OrgJodaTimeChronoGregorianChronology

+ (OrgJodaTimeChronoGregorianChronology *)getInstanceUTC {
  return OrgJodaTimeChronoGregorianChronology_getInstanceUTC();
}

+ (OrgJodaTimeChronoGregorianChronology *)getInstance {
  return OrgJodaTimeChronoGregorianChronology_getInstance();
}

+ (OrgJodaTimeChronoGregorianChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeChronoGregorianChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                                                         withInt:(jint)minDaysInFirstWeek {
  return OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(zone, minDaysInFirstWeek);
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
                                      withInt:(jint)minDaysInFirstWeek {
  OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(self, base, param, minDaysInFirstWeek);
  return self;
}

- (id)readResolve {
  OrgJodaTimeChronology *base = [self getBase];
  jint minDays = [self getMinimumDaysInFirstWeek];
  minDays = (minDays == 0 ? 4 : minDays);
  return base == nil ? OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(JreLoadStatic(OrgJodaTimeDateTimeZone, UTC), minDays) : OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_([base getZone], minDays);
}

- (OrgJodaTimeChronology *)withUTC {
  return OrgJodaTimeChronoGregorianChronology_INSTANCE_UTC;
}

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  if (zone == [self getZone]) {
    return self;
  }
  return OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone);
}

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields {
  if ([self getBase] == nil) {
    [super assembleWithOrgJodaTimeChronoAssembledChronology_Fields:fields];
  }
}

- (jboolean)isLeapYearWithInt:(jint)year {
  return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);
}

- (jlong)calculateFirstDayOfYearMillisWithInt:(jint)year {
  jint leapYears = year / 100;
  if (year < 0) {
    leapYears = (JreRShift32((year + 3), 2)) - leapYears + (JreRShift32((leapYears + 3), 2)) - 1;
  }
  else {
    leapYears = (JreRShift32(year, 2)) - leapYears + (JreRShift32(leapYears, 2));
    if ([self isLeapYearWithInt:year]) {
      leapYears--;
    }
  }
  return (year * 365LL + (leapYears - OrgJodaTimeChronoGregorianChronology_DAYS_0000_TO_1970)) * OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY;
}

- (jint)getMinYear {
  return OrgJodaTimeChronoGregorianChronology_MIN_YEAR;
}

- (jint)getMaxYear {
  return OrgJodaTimeChronoGregorianChronology_MAX_YEAR;
}

- (jlong)getAverageMillisPerYear {
  return OrgJodaTimeChronoGregorianChronology_MILLIS_PER_YEAR;
}

- (jlong)getAverageMillisPerYearDividedByTwo {
  return OrgJodaTimeChronoGregorianChronology_MILLIS_PER_YEAR / 2;
}

- (jlong)getAverageMillisPerMonth {
  return OrgJodaTimeChronoGregorianChronology_MILLIS_PER_MONTH;
}

- (jlong)getApproxMillisAtEpochDividedByTwo {
  return (1970LL * OrgJodaTimeChronoGregorianChronology_MILLIS_PER_YEAR) / 2;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJodaTimeChronoGregorianChronology;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronoGregorianChronology;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronoGregorianChronology;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronoGregorianChronology;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 9, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getInstanceUTC);
  methods[1].selector = @selector(getInstance);
  methods[2].selector = @selector(getInstanceWithOrgJodaTimeDateTimeZone:);
  methods[3].selector = @selector(getInstanceWithOrgJodaTimeDateTimeZone:withInt:);
  methods[4].selector = @selector(initWithOrgJodaTimeChronology:withId:withInt:);
  methods[5].selector = @selector(readResolve);
  methods[6].selector = @selector(withUTC);
  methods[7].selector = @selector(withZoneWithOrgJodaTimeDateTimeZone:);
  methods[8].selector = @selector(assembleWithOrgJodaTimeChronoAssembledChronology_Fields:);
  methods[9].selector = @selector(isLeapYearWithInt:);
  methods[10].selector = @selector(calculateFirstDayOfYearMillisWithInt:);
  methods[11].selector = @selector(getMinYear);
  methods[12].selector = @selector(getMaxYear);
  methods[13].selector = @selector(getAverageMillisPerYear);
  methods[14].selector = @selector(getAverageMillisPerYearDividedByTwo);
  methods[15].selector = @selector(getAverageMillisPerMonth);
  methods[16].selector = @selector(getApproxMillisAtEpochDividedByTwo);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeChronoGregorianChronology_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "MILLIS_PER_YEAR", "J", .constantValue.asLong = OrgJodaTimeChronoGregorianChronology_MILLIS_PER_YEAR, 0x1a, -1, -1, -1, -1 },
    { "MILLIS_PER_MONTH", "J", .constantValue.asLong = OrgJodaTimeChronoGregorianChronology_MILLIS_PER_MONTH, 0x1a, -1, -1, -1, -1 },
    { "DAYS_0000_TO_1970", "I", .constantValue.asInt = OrgJodaTimeChronoGregorianChronology_DAYS_0000_TO_1970, 0x1a, -1, -1, -1, -1 },
    { "MIN_YEAR", "I", .constantValue.asInt = OrgJodaTimeChronoGregorianChronology_MIN_YEAR, 0x1a, -1, -1, -1, -1 },
    { "MAX_YEAR", "I", .constantValue.asInt = OrgJodaTimeChronoGregorianChronology_MAX_YEAR, 0x1a, -1, -1, -1, -1 },
    { "INSTANCE_UTC", "LOrgJodaTimeChronoGregorianChronology;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "cCache", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x1a, -1, 11, 12, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LOrgJodaTimeDateTimeZone;", "LOrgJodaTimeDateTimeZone;I", "LOrgJodaTimeChronology;LNSObject;I", "withZone", "assemble", "LOrgJodaTimeChronoAssembledChronology_Fields;", "isLeapYear", "I", "calculateFirstDayOfYearMillis", &OrgJodaTimeChronoGregorianChronology_INSTANCE_UTC, &OrgJodaTimeChronoGregorianChronology_cCache, "Ljava/util/concurrent/ConcurrentHashMap<Lorg/joda/time/DateTimeZone;[Lorg/joda/time/chrono/GregorianChronology;>;" };
  static const J2ObjcClassInfo _OrgJodaTimeChronoGregorianChronology = { "GregorianChronology", "org.joda.time.chrono", ptrTable, methods, fields, 7, 0x11, 17, 8, -1, -1, -1, -1, -1 };
  return &_OrgJodaTimeChronoGregorianChronology;
}

+ (void)initialize {
  if (self == [OrgJodaTimeChronoGregorianChronology class]) {
    OrgJodaTimeChronoGregorianChronology_cCache = new_JavaUtilConcurrentConcurrentHashMap_init();
    {
      OrgJodaTimeChronoGregorianChronology_INSTANCE_UTC = OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_(JreLoadStatic(OrgJodaTimeDateTimeZone, UTC));
    }
    J2OBJC_SET_INITIALIZED(OrgJodaTimeChronoGregorianChronology)
  }
}

@end

OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_getInstanceUTC() {
  OrgJodaTimeChronoGregorianChronology_initialize();
  return OrgJodaTimeChronoGregorianChronology_INSTANCE_UTC;
}

OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_getInstance() {
  OrgJodaTimeChronoGregorianChronology_initialize();
  return OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(OrgJodaTimeDateTimeZone_getDefault(), 4);
}

OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeChronoGregorianChronology_initialize();
  return OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(zone, 4);
}

OrgJodaTimeChronoGregorianChronology *OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(OrgJodaTimeDateTimeZone *zone, jint minDaysInFirstWeek) {
  OrgJodaTimeChronoGregorianChronology_initialize();
  if (zone == nil) {
    zone = OrgJodaTimeDateTimeZone_getDefault();
  }
  OrgJodaTimeChronoGregorianChronology *chrono;
  IOSObjectArray *chronos = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(OrgJodaTimeChronoGregorianChronology_cCache)) getWithId:zone];
  if (chronos == nil) {
    chronos = [IOSObjectArray newArrayWithLength:7 type:OrgJodaTimeChronoGregorianChronology_class_()];
    IOSObjectArray *oldChronos = [OrgJodaTimeChronoGregorianChronology_cCache putIfAbsentWithId:zone withId:chronos];
    if (oldChronos != nil) {
      chronos = oldChronos;
    }
  }
  @try {
    chrono = IOSObjectArray_Get(chronos, minDaysInFirstWeek - 1);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Invalid min days in first week: ", minDaysInFirstWeek));
  }
  if (chrono == nil) {
    @synchronized(chronos) {
      chrono = IOSObjectArray_Get(chronos, minDaysInFirstWeek - 1);
      if (chrono == nil) {
        if (zone == JreLoadStatic(OrgJodaTimeDateTimeZone, UTC)) {
          chrono = new_OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(nil, nil, minDaysInFirstWeek);
        }
        else {
          chrono = OrgJodaTimeChronoGregorianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(JreLoadStatic(OrgJodaTimeDateTimeZone, UTC), minDaysInFirstWeek);
          chrono = new_OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronoZonedChronology_getInstanceWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeZone_(chrono, zone), nil, minDaysInFirstWeek);
        }
        (void) IOSObjectArray_Set(chronos, minDaysInFirstWeek - 1, chrono);
      }
    }
  }
  return chrono;
}

void OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronoGregorianChronology *self, OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek) {
  OrgJodaTimeChronoBasicGJChronology_initWithOrgJodaTimeChronology_withId_withInt_(self, base, param, minDaysInFirstWeek);
}

OrgJodaTimeChronoGregorianChronology *new_OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek) {
  J2OBJC_NEW_IMPL(OrgJodaTimeChronoGregorianChronology, initWithOrgJodaTimeChronology_withId_withInt_, base, param, minDaysInFirstWeek)
}

OrgJodaTimeChronoGregorianChronology *create_OrgJodaTimeChronoGregorianChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeChronoGregorianChronology, initWithOrgJodaTimeChronology_withId_withInt_, base, param, minDaysInFirstWeek)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeChronoGregorianChronology)
