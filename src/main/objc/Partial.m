//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/Partial.java
//

#include "AbstractPartial.h"
#include "AbstractPartialFieldProperty.h"
#include "Chronology.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormat.h"
#include "DateTimeFormatter.h"
#include "DateTimeUtils.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "ISODateTimeFormat.h"
#include "J2ObjC_source.h"
#include "Partial.h"
#include "ReadableInstant.h"
#include "ReadablePartial.h"
#include "ReadablePeriod.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Locale.h"

@interface OrgJodaTimePartial () {
 @public
  OrgJodaTimeChronology *iChronology_;
  IOSObjectArray *iTypes_;
  IOSIntArray *iValues_;
  IOSObjectArray *iFormatter_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaTimePartial, iChronology_, OrgJodaTimeChronology *)
J2OBJC_FIELD_SETTER(OrgJodaTimePartial, iTypes_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgJodaTimePartial, iValues_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgJodaTimePartial, iFormatter_, IOSObjectArray *)

inline jlong OrgJodaTimePartial_get_serialVersionUID();
#define OrgJodaTimePartial_serialVersionUID 12324121189002LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimePartial, serialVersionUID, jlong)

@interface OrgJodaTimePartial_Property () {
 @public
  OrgJodaTimePartial *iPartial_;
  jint iFieldIndex_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaTimePartial_Property, iPartial_, OrgJodaTimePartial *)

inline jlong OrgJodaTimePartial_Property_get_serialVersionUID();
#define OrgJodaTimePartial_Property_serialVersionUID 53278362873888LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimePartial_Property, serialVersionUID, jlong)

@implementation OrgJodaTimePartial

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimePartial_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  OrgJodaTimePartial_initWithOrgJodaTimeChronology_(self, chrono);
  return self;
}

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                             withInt:(jint)value {
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_(self, type, value);
  return self;
}

- (instancetype)initWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type
                                             withInt:(jint)value
                           withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_withOrgJodaTimeChronology_(self, type, value, chronology);
  return self;
}

- (instancetype)initWithOrgJodaTimeDateTimeFieldTypeArray:(IOSObjectArray *)types
                                             withIntArray:(IOSIntArray *)values {
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(self, types, values);
  return self;
}

- (instancetype)initWithOrgJodaTimeDateTimeFieldTypeArray:(IOSObjectArray *)types
                                             withIntArray:(IOSIntArray *)values
                                withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_withOrgJodaTimeChronology_(self, types, values, chronology);
  return self;
}

- (instancetype)initWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  OrgJodaTimePartial_initWithOrgJodaTimeReadablePartial_(self, partial);
  return self;
}

- (instancetype)initWithOrgJodaTimePartial:(OrgJodaTimePartial *)partial
                              withIntArray:(IOSIntArray *)values {
  OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(self, partial, values);
  return self;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology
        withOrgJodaTimeDateTimeFieldTypeArray:(IOSObjectArray *)types
                                 withIntArray:(IOSIntArray *)values {
  OrgJodaTimePartial_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(self, chronology, types, values);
  return self;
}

- (jint)size {
  return ((IOSObjectArray *) nil_chk(iTypes_))->size_;
}

- (OrgJodaTimeChronology *)getChronology {
  return iChronology_;
}

- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  return [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(nil_chk(iTypes_), index))) getFieldWithOrgJodaTimeChronology:chrono];
}

- (OrgJodaTimeDateTimeFieldType *)getFieldTypeWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(iTypes_), index);
}

- (IOSObjectArray *)getFieldTypes {
  return [((IOSObjectArray *) nil_chk(iTypes_)) clone];
}

- (jint)getValueWithInt:(jint)index {
  return IOSIntArray_Get(nil_chk(iValues_), index);
}

- (IOSIntArray *)getValues {
  return [((IOSIntArray *) nil_chk(iValues_)) clone];
}

- (OrgJodaTimePartial *)withChronologyRetainFieldsWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)newChronology {
  newChronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(newChronology);
  newChronology = [((OrgJodaTimeChronology *) nil_chk(newChronology)) withUTC];
  if (newChronology == [self getChronology]) {
    return self;
  }
  else {
    OrgJodaTimePartial *newPartial = new_OrgJodaTimePartial_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(newChronology, iTypes_, iValues_);
    [((OrgJodaTimeChronology *) nil_chk(newChronology)) validateWithOrgJodaTimeReadablePartial:newPartial withIntArray:iValues_];
    return newPartial;
  }
}

- (OrgJodaTimePartial *)withWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                     withInt:(jint)value {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The field type must not be null");
  }
  jint index = [self indexOfWithOrgJodaTimeDateTimeFieldType:fieldType];
  if (index == -1) {
    IOSObjectArray *newTypes = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(iTypes_))->size_ + 1 type:OrgJodaTimeDateTimeFieldType_class_()];
    IOSIntArray *newValues = [IOSIntArray newArrayWithLength:newTypes->size_];
    jint i = 0;
    OrgJodaTimeDurationField *unitField = [((OrgJodaTimeDurationFieldType *) nil_chk([fieldType getDurationType])) getFieldWithOrgJodaTimeChronology:iChronology_];
    if ([((OrgJodaTimeDurationField *) nil_chk(unitField)) isSupported]) {
      for (; i < iTypes_->size_; i++) {
        OrgJodaTimeDateTimeFieldType *loopType = IOSObjectArray_Get(iTypes_, i);
        OrgJodaTimeDurationField *loopUnitField = [((OrgJodaTimeDurationFieldType *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(loopType)) getDurationType])) getFieldWithOrgJodaTimeChronology:iChronology_];
        if ([((OrgJodaTimeDurationField *) nil_chk(loopUnitField)) isSupported]) {
          jint compare = [unitField compareToWithId:loopUnitField];
          if (compare > 0) {
            break;
          }
          else if (compare == 0) {
            if ([fieldType getRangeDurationType] == nil) {
              break;
            }
            if ([loopType getRangeDurationType] == nil) {
              continue;
            }
            OrgJodaTimeDurationField *rangeField = [((OrgJodaTimeDurationFieldType *) nil_chk([fieldType getRangeDurationType])) getFieldWithOrgJodaTimeChronology:iChronology_];
            OrgJodaTimeDurationField *loopRangeField = [((OrgJodaTimeDurationFieldType *) nil_chk([loopType getRangeDurationType])) getFieldWithOrgJodaTimeChronology:iChronology_];
            if ([((OrgJodaTimeDurationField *) nil_chk(rangeField)) compareToWithId:loopRangeField] > 0) {
              break;
            }
          }
        }
      }
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iTypes_, 0, newTypes, 0, i);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iValues_, 0, newValues, 0, i);
    (void) IOSObjectArray_Set(newTypes, i, fieldType);
    *IOSIntArray_GetRef(newValues, i) = value;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iTypes_, i, newTypes, i + 1, newTypes->size_ - i - 1);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iValues_, i, newValues, i + 1, newValues->size_ - i - 1);
    OrgJodaTimePartial *newPartial = new_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_withOrgJodaTimeChronology_(newTypes, newValues, iChronology_);
    [((OrgJodaTimeChronology *) nil_chk(iChronology_)) validateWithOrgJodaTimeReadablePartial:newPartial withIntArray:newValues];
    return newPartial;
  }
  if (value == [self getValueWithInt:index]) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) setWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:value];
  return new_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(self, newValues);
}

- (OrgJodaTimePartial *)withoutWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType {
  jint index = [self indexOfWithOrgJodaTimeDateTimeFieldType:fieldType];
  if (index != -1) {
    IOSObjectArray *newTypes = [IOSObjectArray newArrayWithLength:[self size] - 1 type:OrgJodaTimeDateTimeFieldType_class_()];
    IOSIntArray *newValues = [IOSIntArray newArrayWithLength:[self size] - 1];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iTypes_, 0, newTypes, 0, index);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iTypes_, index + 1, newTypes, index, newTypes->size_ - index);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iValues_, 0, newValues, 0, index);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iValues_, index + 1, newValues, index, newValues->size_ - index);
    OrgJodaTimePartial *newPartial = new_OrgJodaTimePartial_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(iChronology_, newTypes, newValues);
    [((OrgJodaTimeChronology *) nil_chk(iChronology_)) validateWithOrgJodaTimeReadablePartial:newPartial withIntArray:newValues];
    return newPartial;
  }
  return self;
}

- (OrgJodaTimePartial *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                          withInt:(jint)value {
  jint index = [self indexOfSupportedWithOrgJodaTimeDateTimeFieldType:fieldType];
  if (value == [self getValueWithInt:index]) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) setWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:value];
  return new_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(self, newValues);
}

- (OrgJodaTimePartial *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                               withInt:(jint)amount {
  jint index = [self indexOfSupportedWithOrgJodaTimeDurationFieldType:fieldType];
  if (amount == 0) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) addWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:amount];
  return new_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(self, newValues);
}

- (OrgJodaTimePartial *)withFieldAddWrappedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                    withInt:(jint)amount {
  jint index = [self indexOfSupportedWithOrgJodaTimeDurationFieldType:fieldType];
  if (amount == 0) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) addWrapPartialWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:amount];
  return new_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(self, newValues);
}

- (OrgJodaTimePartial *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                             withInt:(jint)scalar {
  if (period == nil || scalar == 0) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  for (jint i = 0; i < [period size]; i++) {
    OrgJodaTimeDurationFieldType *fieldType = [period getFieldTypeWithInt:i];
    jint index = [self indexOfWithOrgJodaTimeDurationFieldType:fieldType];
    if (index >= 0) {
      newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) addWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:OrgJodaTimeFieldFieldUtils_safeMultiplyWithInt_withInt_([period getValueWithInt:i], scalar)];
    }
  }
  return new_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(self, newValues);
}

- (OrgJodaTimePartial *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:1];
}

- (OrgJodaTimePartial *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:-1];
}

- (OrgJodaTimePartial_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  return new_OrgJodaTimePartial_Property_initWithOrgJodaTimePartial_withInt_(self, [self indexOfSupportedWithOrgJodaTimeDateTimeFieldType:type]);
}

- (jboolean)isMatchWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  jlong millis = OrgJodaTimeDateTimeUtils_getInstantMillisWithOrgJodaTimeReadableInstant_(instant);
  OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getInstantChronologyWithOrgJodaTimeReadableInstant_(instant);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(iTypes_))->size_; i++) {
    jint value = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(iTypes_, i))) getFieldWithOrgJodaTimeChronology:chrono])) getWithLong:millis];
    if (value != IOSIntArray_Get(nil_chk(iValues_), i)) {
      return false;
    }
  }
  return true;
}

- (jboolean)isMatchWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  if (partial == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The partial must not be null");
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(iTypes_))->size_; i++) {
    jint value = [partial getWithOrgJodaTimeDateTimeFieldType:IOSObjectArray_Get(iTypes_, i)];
    if (value != IOSIntArray_Get(nil_chk(iValues_), i)) {
      return false;
    }
  }
  return true;
}

- (OrgJodaTimeFormatDateTimeFormatter *)getFormatter {
  IOSObjectArray *f = iFormatter_;
  if (f == nil) {
    if ([self size] == 0) {
      return nil;
    }
    f = [IOSObjectArray newArrayWithLength:2 type:OrgJodaTimeFormatDateTimeFormatter_class_()];
    @try {
      id<JavaUtilList> list = new_JavaUtilArrayList_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(iTypes_));
      (void) IOSObjectArray_Set(f, 0, OrgJodaTimeFormatISODateTimeFormat_forFieldsWithJavaUtilCollection_withBoolean_withBoolean_(list, true, false));
      if ([list size] == 0) {
        (void) IOSObjectArray_Set(f, 1, IOSObjectArray_Get(f, 0));
      }
    }
    @catch (JavaLangIllegalArgumentException *ex) {
    }
    iFormatter_ = f;
  }
  return IOSObjectArray_Get(f, 0);
}

- (NSString *)description {
  IOSObjectArray *f = iFormatter_;
  if (f == nil) {
    (void) [self getFormatter];
    f = iFormatter_;
    if (f == nil) {
      return [self toStringList];
    }
  }
  OrgJodaTimeFormatDateTimeFormatter *f1 = IOSObjectArray_Get(f, 1);
  if (f1 == nil) {
    return [self toStringList];
  }
  return [f1 printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringList {
  jint size = [self size];
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_initWithInt_(20 * size);
  (void) [buf appendWithChar:'['];
  for (jint i = 0; i < size; i++) {
    if (i > 0) {
      (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:','])) appendWithChar:' '];
    }
    (void) [buf appendWithNSString:[((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(nil_chk(iTypes_), i))) getName]];
    (void) [buf appendWithChar:'='];
    (void) [buf appendWithInt:IOSIntArray_Get(nil_chk(iValues_), i)];
  }
  (void) [buf appendWithChar:']'];
  return [buf description];
}

- (NSString *)toStringWithNSString:(NSString *)pattern {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern
                withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) withLocaleWithJavaUtilLocale:locale])) printWithOrgJodaTimeReadablePartial:self];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeFieldType;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "[LOrgJodaTimeDateTimeFieldType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 11, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePartial;", 0x1, 13, 0, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePartial;", 0x1, 14, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePartial;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePartial;", 0x1, 17, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePartial;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePartial;", 0x1, 20, 19, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePartial;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePartial;", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePartial;", 0x1, 25, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePartial_Property;", 0x1, 26, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 27, 5, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeFormatDateTimeFormatter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 29, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 29, 31, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgJodaTimeChronology:);
  methods[2].selector = @selector(initWithOrgJodaTimeDateTimeFieldType:withInt:);
  methods[3].selector = @selector(initWithOrgJodaTimeDateTimeFieldType:withInt:withOrgJodaTimeChronology:);
  methods[4].selector = @selector(initWithOrgJodaTimeDateTimeFieldTypeArray:withIntArray:);
  methods[5].selector = @selector(initWithOrgJodaTimeDateTimeFieldTypeArray:withIntArray:withOrgJodaTimeChronology:);
  methods[6].selector = @selector(initWithOrgJodaTimeReadablePartial:);
  methods[7].selector = @selector(initWithOrgJodaTimePartial:withIntArray:);
  methods[8].selector = @selector(initWithOrgJodaTimeChronology:withOrgJodaTimeDateTimeFieldTypeArray:withIntArray:);
  methods[9].selector = @selector(size);
  methods[10].selector = @selector(getChronology);
  methods[11].selector = @selector(getFieldWithInt:withOrgJodaTimeChronology:);
  methods[12].selector = @selector(getFieldTypeWithInt:);
  methods[13].selector = @selector(getFieldTypes);
  methods[14].selector = @selector(getValueWithInt:);
  methods[15].selector = @selector(getValues);
  methods[16].selector = @selector(withChronologyRetainFieldsWithOrgJodaTimeChronology:);
  methods[17].selector = @selector(withWithOrgJodaTimeDateTimeFieldType:withInt:);
  methods[18].selector = @selector(withoutWithOrgJodaTimeDateTimeFieldType:);
  methods[19].selector = @selector(withFieldWithOrgJodaTimeDateTimeFieldType:withInt:);
  methods[20].selector = @selector(withFieldAddedWithOrgJodaTimeDurationFieldType:withInt:);
  methods[21].selector = @selector(withFieldAddWrappedWithOrgJodaTimeDurationFieldType:withInt:);
  methods[22].selector = @selector(withPeriodAddedWithOrgJodaTimeReadablePeriod:withInt:);
  methods[23].selector = @selector(plusWithOrgJodaTimeReadablePeriod:);
  methods[24].selector = @selector(minusWithOrgJodaTimeReadablePeriod:);
  methods[25].selector = @selector(propertyWithOrgJodaTimeDateTimeFieldType:);
  methods[26].selector = @selector(isMatchWithOrgJodaTimeReadableInstant:);
  methods[27].selector = @selector(isMatchWithOrgJodaTimeReadablePartial:);
  methods[28].selector = @selector(getFormatter);
  methods[29].selector = @selector(description);
  methods[30].selector = @selector(toStringList);
  methods[31].selector = @selector(toStringWithNSString:);
  methods[32].selector = @selector(toStringWithNSString:withJavaUtilLocale:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimePartial_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iChronology_", "LOrgJodaTimeChronology;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iTypes_", "[LOrgJodaTimeDateTimeFieldType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iValues_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iFormatter_", "[LOrgJodaTimeFormatDateTimeFormatter;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeChronology;", "LOrgJodaTimeDateTimeFieldType;I", "LOrgJodaTimeDateTimeFieldType;ILOrgJodaTimeChronology;", "[LOrgJodaTimeDateTimeFieldType;[I", "[LOrgJodaTimeDateTimeFieldType;[ILOrgJodaTimeChronology;", "LOrgJodaTimeReadablePartial;", "LOrgJodaTimePartial;[I", "LOrgJodaTimeChronology;[LOrgJodaTimeDateTimeFieldType;[I", "getField", "ILOrgJodaTimeChronology;", "getFieldType", "I", "getValue", "withChronologyRetainFields", "with", "without", "LOrgJodaTimeDateTimeFieldType;", "withField", "withFieldAdded", "LOrgJodaTimeDurationFieldType;I", "withFieldAddWrapped", "withPeriodAdded", "LOrgJodaTimeReadablePeriod;I", "plus", "LOrgJodaTimeReadablePeriod;", "minus", "property", "isMatch", "LOrgJodaTimeReadableInstant;", "toString", "LNSString;", "LNSString;LJavaUtilLocale;", "LOrgJodaTimePartial_Property;" };
  static const J2ObjcClassInfo _OrgJodaTimePartial = { "Partial", "org.joda.time", ptrTable, methods, fields, 7, 0x11, 33, 5, -1, 32, -1, -1, -1 };
  return &_OrgJodaTimePartial;
}

@end

void OrgJodaTimePartial_init(OrgJodaTimePartial *self) {
  OrgJodaTimePartial_initWithOrgJodaTimeChronology_(self, nil);
}

OrgJodaTimePartial *new_OrgJodaTimePartial_init() {
  J2OBJC_NEW_IMPL(OrgJodaTimePartial, init)
}

OrgJodaTimePartial *create_OrgJodaTimePartial_init() {
  J2OBJC_CREATE_IMPL(OrgJodaTimePartial, init)
}

void OrgJodaTimePartial_initWithOrgJodaTimeChronology_(OrgJodaTimePartial *self, OrgJodaTimeChronology *chrono) {
  OrgJodaTimeBaseAbstractPartial_init(self);
  self->iChronology_ = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chrono))) withUTC];
  self->iTypes_ = [IOSObjectArray newArrayWithLength:0 type:OrgJodaTimeDateTimeFieldType_class_()];
  self->iValues_ = [IOSIntArray newArrayWithLength:0];
}

OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chrono) {
  J2OBJC_NEW_IMPL(OrgJodaTimePartial, initWithOrgJodaTimeChronology_, chrono)
}

OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chrono) {
  J2OBJC_CREATE_IMPL(OrgJodaTimePartial, initWithOrgJodaTimeChronology_, chrono)
}

void OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimePartial *self, OrgJodaTimeDateTimeFieldType *type, jint value) {
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_withOrgJodaTimeChronology_(self, type, value, nil);
}

OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimeDateTimeFieldType *type, jint value) {
  J2OBJC_NEW_IMPL(OrgJodaTimePartial, initWithOrgJodaTimeDateTimeFieldType_withInt_, type, value)
}

OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_(OrgJodaTimeDateTimeFieldType *type, jint value) {
  J2OBJC_CREATE_IMPL(OrgJodaTimePartial, initWithOrgJodaTimeDateTimeFieldType_withInt_, type, value)
}

void OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_withOrgJodaTimeChronology_(OrgJodaTimePartial *self, OrgJodaTimeDateTimeFieldType *type, jint value, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseAbstractPartial_init(self);
  chronology = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology))) withUTC];
  self->iChronology_ = chronology;
  if (type == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The field type must not be null");
  }
  self->iTypes_ = [IOSObjectArray newArrayWithObjects:(id[]){ type } count:1 type:OrgJodaTimeDateTimeFieldType_class_()];
  self->iValues_ = [IOSIntArray newArrayWithInts:(jint[]){ value } count:1];
  [((OrgJodaTimeChronology *) nil_chk(chronology)) validateWithOrgJodaTimeReadablePartial:self withIntArray:self->iValues_];
}

OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_withOrgJodaTimeChronology_(OrgJodaTimeDateTimeFieldType *type, jint value, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimePartial, initWithOrgJodaTimeDateTimeFieldType_withInt_withOrgJodaTimeChronology_, type, value, chronology)
}

OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldType_withInt_withOrgJodaTimeChronology_(OrgJodaTimeDateTimeFieldType *type, jint value, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimePartial, initWithOrgJodaTimeDateTimeFieldType_withInt_withOrgJodaTimeChronology_, type, value, chronology)
}

void OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(OrgJodaTimePartial *self, IOSObjectArray *types, IOSIntArray *values) {
  OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_withOrgJodaTimeChronology_(self, types, values, nil);
}

OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(IOSObjectArray *types, IOSIntArray *values) {
  J2OBJC_NEW_IMPL(OrgJodaTimePartial, initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_, types, values)
}

OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(IOSObjectArray *types, IOSIntArray *values) {
  J2OBJC_CREATE_IMPL(OrgJodaTimePartial, initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_, types, values)
}

void OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_withOrgJodaTimeChronology_(OrgJodaTimePartial *self, IOSObjectArray *types, IOSIntArray *values, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseAbstractPartial_init(self);
  chronology = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology))) withUTC];
  self->iChronology_ = chronology;
  if (types == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Types array must not be null");
  }
  if (values == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Values array must not be null");
  }
  if (values->size_ != types->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Values array must be the same length as the types array");
  }
  if (types->size_ == 0) {
    self->iTypes_ = types;
    self->iValues_ = values;
    return;
  }
  for (jint i = 0; i < types->size_; i++) {
    if (IOSObjectArray_Get(types, i) == nil) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Types array must not contain null: index ", i));
    }
  }
  OrgJodaTimeDurationField *lastUnitField = nil;
  for (jint i = 0; i < types->size_; i++) {
    OrgJodaTimeDateTimeFieldType *loopType = IOSObjectArray_Get(types, i);
    OrgJodaTimeDurationField *loopUnitField = [((OrgJodaTimeDurationFieldType *) nil_chk([((OrgJodaTimeDateTimeFieldType *) nil_chk(loopType)) getDurationType])) getFieldWithOrgJodaTimeChronology:self->iChronology_];
    if (i > 0) {
      if ([((OrgJodaTimeDurationField *) nil_chk(loopUnitField)) isSupported] == false) {
        if ([((OrgJodaTimeDurationField *) nil_chk(lastUnitField)) isSupported]) {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Types array must be in order largest-smallest: ", [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(types, i - 1))) getName], @" < ", [loopType getName]));
        }
        else {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Types array must not contain duplicate unsupported: ", [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(types, i - 1))) getName], @" and ", [loopType getName]));
        }
      }
      jint compare = [((OrgJodaTimeDurationField *) nil_chk(lastUnitField)) compareToWithId:loopUnitField];
      if (compare < 0) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Types array must be in order largest-smallest: ", [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(types, i - 1))) getName], @" < ", [loopType getName]));
      }
      else if (compare == 0) {
        if ([lastUnitField isEqual:loopUnitField]) {
          OrgJodaTimeDurationFieldType *lastRangeType = [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(types, i - 1))) getRangeDurationType];
          OrgJodaTimeDurationFieldType *loopRangeType = [loopType getRangeDurationType];
          if (lastRangeType == nil) {
            if (loopRangeType == nil) {
              @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Types array must not contain duplicate: ", [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(types, i - 1))) getName], @" and ", [loopType getName]));
            }
          }
          else {
            if (loopRangeType == nil) {
              @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Types array must be in order largest-smallest: ", [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(types, i - 1))) getName], @" < ", [loopType getName]));
            }
            OrgJodaTimeDurationField *lastRangeField = [lastRangeType getFieldWithOrgJodaTimeChronology:self->iChronology_];
            OrgJodaTimeDurationField *loopRangeField = [loopRangeType getFieldWithOrgJodaTimeChronology:self->iChronology_];
            if ([((OrgJodaTimeDurationField *) nil_chk(lastRangeField)) compareToWithId:loopRangeField] < 0) {
              @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Types array must be in order largest-smallest: ", [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(types, i - 1))) getName], @" < ", [loopType getName]));
            }
            if ([lastRangeField compareToWithId:loopRangeField] == 0) {
              @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Types array must not contain duplicate: ", [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(types, i - 1))) getName], @" and ", [loopType getName]));
            }
          }
        }
        else {
          if ([lastUnitField isSupported] && [lastUnitField getType] != JreLoadStatic(OrgJodaTimeDurationFieldType, YEARS_TYPE)) {
            @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Types array must be in order largest-smallest, for year-based fields, years is defined as being largest: ", [((OrgJodaTimeDateTimeFieldType *) nil_chk(IOSObjectArray_Get(types, i - 1))) getName], @" < ", [loopType getName]));
          }
        }
      }
    }
    lastUnitField = loopUnitField;
  }
  self->iTypes_ = [types clone];
  [((OrgJodaTimeChronology *) nil_chk(chronology)) validateWithOrgJodaTimeReadablePartial:self withIntArray:values];
  self->iValues_ = [values clone];
}

OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_withOrgJodaTimeChronology_(IOSObjectArray *types, IOSIntArray *values, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimePartial, initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_withOrgJodaTimeChronology_, types, values, chronology)
}

OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_withOrgJodaTimeChronology_(IOSObjectArray *types, IOSIntArray *values, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimePartial, initWithOrgJodaTimeDateTimeFieldTypeArray_withIntArray_withOrgJodaTimeChronology_, types, values, chronology)
}

void OrgJodaTimePartial_initWithOrgJodaTimeReadablePartial_(OrgJodaTimePartial *self, id<OrgJodaTimeReadablePartial> partial) {
  OrgJodaTimeBaseAbstractPartial_init(self);
  if (partial == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The partial must not be null");
  }
  self->iChronology_ = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_([partial getChronology]))) withUTC];
  self->iTypes_ = [IOSObjectArray newArrayWithLength:[partial size] type:OrgJodaTimeDateTimeFieldType_class_()];
  self->iValues_ = [IOSIntArray newArrayWithLength:[partial size]];
  for (jint i = 0; i < [partial size]; i++) {
    (void) IOSObjectArray_Set(self->iTypes_, i, [partial getFieldTypeWithInt:i]);
    *IOSIntArray_GetRef(self->iValues_, i) = [partial getValueWithInt:i];
  }
}

OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeReadablePartial_(id<OrgJodaTimeReadablePartial> partial) {
  J2OBJC_NEW_IMPL(OrgJodaTimePartial, initWithOrgJodaTimeReadablePartial_, partial)
}

OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeReadablePartial_(id<OrgJodaTimeReadablePartial> partial) {
  J2OBJC_CREATE_IMPL(OrgJodaTimePartial, initWithOrgJodaTimeReadablePartial_, partial)
}

void OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(OrgJodaTimePartial *self, OrgJodaTimePartial *partial, IOSIntArray *values) {
  OrgJodaTimeBaseAbstractPartial_init(self);
  self->iChronology_ = ((OrgJodaTimePartial *) nil_chk(partial))->iChronology_;
  self->iTypes_ = partial->iTypes_;
  self->iValues_ = values;
}

OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(OrgJodaTimePartial *partial, IOSIntArray *values) {
  J2OBJC_NEW_IMPL(OrgJodaTimePartial, initWithOrgJodaTimePartial_withIntArray_, partial, values)
}

OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(OrgJodaTimePartial *partial, IOSIntArray *values) {
  J2OBJC_CREATE_IMPL(OrgJodaTimePartial, initWithOrgJodaTimePartial_withIntArray_, partial, values)
}

void OrgJodaTimePartial_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(OrgJodaTimePartial *self, OrgJodaTimeChronology *chronology, IOSObjectArray *types, IOSIntArray *values) {
  OrgJodaTimeBaseAbstractPartial_init(self);
  self->iChronology_ = chronology;
  self->iTypes_ = types;
  self->iValues_ = values;
}

OrgJodaTimePartial *new_OrgJodaTimePartial_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(OrgJodaTimeChronology *chronology, IOSObjectArray *types, IOSIntArray *values) {
  J2OBJC_NEW_IMPL(OrgJodaTimePartial, initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeFieldTypeArray_withIntArray_, chronology, types, values)
}

OrgJodaTimePartial *create_OrgJodaTimePartial_initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeFieldTypeArray_withIntArray_(OrgJodaTimeChronology *chronology, IOSObjectArray *types, IOSIntArray *values) {
  J2OBJC_CREATE_IMPL(OrgJodaTimePartial, initWithOrgJodaTimeChronology_withOrgJodaTimeDateTimeFieldTypeArray_withIntArray_, chronology, types, values)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimePartial)

@implementation OrgJodaTimePartial_Property

- (instancetype)initWithOrgJodaTimePartial:(OrgJodaTimePartial *)partial
                                   withInt:(jint)fieldIndex {
  OrgJodaTimePartial_Property_initWithOrgJodaTimePartial_withInt_(self, partial, fieldIndex);
  return self;
}

- (OrgJodaTimeDateTimeField *)getField {
  return [((OrgJodaTimePartial *) nil_chk(iPartial_)) getFieldWithInt:iFieldIndex_];
}

- (id<OrgJodaTimeReadablePartial>)getReadablePartial {
  return iPartial_;
}

- (OrgJodaTimePartial *)getPartial {
  return iPartial_;
}

- (jint)get {
  return [((OrgJodaTimePartial *) nil_chk(iPartial_)) getValueWithInt:iFieldIndex_];
}

- (OrgJodaTimePartial *)addToCopyWithInt:(jint)valueToAdd {
  IOSIntArray *newValues = [((OrgJodaTimePartial *) nil_chk(iPartial_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWithOrgJodaTimeReadablePartial:iPartial_ withInt:iFieldIndex_ withIntArray:newValues withInt:valueToAdd];
  return new_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(iPartial_, newValues);
}

- (OrgJodaTimePartial *)addWrapFieldToCopyWithInt:(jint)valueToAdd {
  IOSIntArray *newValues = [((OrgJodaTimePartial *) nil_chk(iPartial_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWrapFieldWithOrgJodaTimeReadablePartial:iPartial_ withInt:iFieldIndex_ withIntArray:newValues withInt:valueToAdd];
  return new_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(iPartial_, newValues);
}

- (OrgJodaTimePartial *)setCopyWithInt:(jint)value {
  IOSIntArray *newValues = [((OrgJodaTimePartial *) nil_chk(iPartial_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithOrgJodaTimeReadablePartial:iPartial_ withInt:iFieldIndex_ withIntArray:newValues withInt:value];
  return new_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(iPartial_, newValues);
}

- (OrgJodaTimePartial *)setCopyWithNSString:(NSString *)text
                         withJavaUtilLocale:(JavaUtilLocale *)locale {
  IOSIntArray *newValues = [((OrgJodaTimePartial *) nil_chk(iPartial_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithOrgJodaTimeReadablePartial:iPartial_ withInt:iFieldIndex_ withIntArray:newValues withNSString:text withJavaUtilLocale:locale];
  return new_OrgJodaTimePartial_initWithOrgJodaTimePartial_withIntArray_(iPartial_, newValues);
}

- (OrgJodaTimePartial *)setCopyWithNSString:(NSString *)text {
  return [self setCopyWithNSString:text withJavaUtilLocale:nil];
}

- (OrgJodaTimePartial *)withMaximumValue {
  return [self setCopyWithInt:[self getMaximumValue]];
}

- (OrgJodaTimePartial *)withMinimumValue {
  return [self setCopyWithInt:[self getMinimumValue]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeReadablePartial;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePartial;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePartial;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePartial;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePartial;", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePartial;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePartial;", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePartial;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePartial;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimePartial:withInt:);
  methods[1].selector = @selector(getField);
  methods[2].selector = @selector(getReadablePartial);
  methods[3].selector = @selector(getPartial);
  methods[4].selector = @selector(get);
  methods[5].selector = @selector(addToCopyWithInt:);
  methods[6].selector = @selector(addWrapFieldToCopyWithInt:);
  methods[7].selector = @selector(setCopyWithInt:);
  methods[8].selector = @selector(setCopyWithNSString:withJavaUtilLocale:);
  methods[9].selector = @selector(setCopyWithNSString:);
  methods[10].selector = @selector(withMaximumValue);
  methods[11].selector = @selector(withMinimumValue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimePartial_Property_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iPartial_", "LOrgJodaTimePartial;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iFieldIndex_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimePartial;I", "addToCopy", "I", "addWrapFieldToCopy", "setCopy", "LNSString;LJavaUtilLocale;", "LNSString;", "LOrgJodaTimePartial;" };
  static const J2ObjcClassInfo _OrgJodaTimePartial_Property = { "Property", "org.joda.time", ptrTable, methods, fields, 7, 0x9, 12, 3, 7, -1, -1, -1, -1 };
  return &_OrgJodaTimePartial_Property;
}

@end

void OrgJodaTimePartial_Property_initWithOrgJodaTimePartial_withInt_(OrgJodaTimePartial_Property *self, OrgJodaTimePartial *partial, jint fieldIndex) {
  OrgJodaTimeFieldAbstractPartialFieldProperty_init(self);
  self->iPartial_ = partial;
  self->iFieldIndex_ = fieldIndex;
}

OrgJodaTimePartial_Property *new_OrgJodaTimePartial_Property_initWithOrgJodaTimePartial_withInt_(OrgJodaTimePartial *partial, jint fieldIndex) {
  J2OBJC_NEW_IMPL(OrgJodaTimePartial_Property, initWithOrgJodaTimePartial_withInt_, partial, fieldIndex)
}

OrgJodaTimePartial_Property *create_OrgJodaTimePartial_Property_initWithOrgJodaTimePartial_withInt_(OrgJodaTimePartial *partial, jint fieldIndex) {
  J2OBJC_CREATE_IMPL(OrgJodaTimePartial_Property, initWithOrgJodaTimePartial_withInt_, partial, fieldIndex)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimePartial_Property)
