//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/LocalDate.java
//

#include "AbstractReadableInstantFieldProperty.h"
#include "BaseLocal.h"
#include "Chronology.h"
#include "ConverterManager.h"
#include "DateMidnight.h"
#include "DateTime.h"
#include "DateTimeConstants.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormat.h"
#include "DateTimeFormatter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "FromString.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "ISOChronology.h"
#include "ISODateTimeFormat.h"
#include "Interval.h"
#include "J2ObjC_source.h"
#include "LocalDate.h"
#include "LocalDateTime.h"
#include "LocalTime.h"
#include "PartialConverter.h"
#include "ReadablePartial.h"
#include "ReadablePeriod.h"
#include "ToString.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/HashSet.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"

@interface OrgJodaTimeLocalDate () {
 @public
  jlong iLocalMillis_;
  OrgJodaTimeChronology *iChronology_;
  jint iHash_;
}

- (id)readResolve;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeLocalDate, iChronology_, OrgJodaTimeChronology *)

inline jlong OrgJodaTimeLocalDate_get_serialVersionUID();
#define OrgJodaTimeLocalDate_serialVersionUID -8775358157899LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalDate, serialVersionUID, jlong)

inline jint OrgJodaTimeLocalDate_get_YEAR();
#define OrgJodaTimeLocalDate_YEAR 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalDate, YEAR, jint)

inline jint OrgJodaTimeLocalDate_get_MONTH_OF_YEAR();
#define OrgJodaTimeLocalDate_MONTH_OF_YEAR 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalDate, MONTH_OF_YEAR, jint)

inline jint OrgJodaTimeLocalDate_get_DAY_OF_MONTH();
#define OrgJodaTimeLocalDate_DAY_OF_MONTH 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalDate, DAY_OF_MONTH, jint)

inline id<JavaUtilSet> OrgJodaTimeLocalDate_get_DATE_DURATION_TYPES();
static id<JavaUtilSet> OrgJodaTimeLocalDate_DATE_DURATION_TYPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeLocalDate, DATE_DURATION_TYPES, id<JavaUtilSet>)

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeLocalDate__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeLocalDate__Annotations$1();

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeLocalDate__Annotations$2();

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeLocalDate__Annotations$3();

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeLocalDate__Annotations$4();

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeLocalDate__Annotations$5();

@interface OrgJodaTimeLocalDate_Property () {
 @public
  OrgJodaTimeLocalDate *iInstant_;
  OrgJodaTimeDateTimeField *iField_;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeLocalDate_Property, iInstant_, OrgJodaTimeLocalDate *)
J2OBJC_FIELD_SETTER(OrgJodaTimeLocalDate_Property, iField_, OrgJodaTimeDateTimeField *)

inline jlong OrgJodaTimeLocalDate_Property_get_serialVersionUID();
#define OrgJodaTimeLocalDate_Property_serialVersionUID -3193829732634LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeLocalDate_Property, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeLocalDate)

@implementation OrgJodaTimeLocalDate

+ (OrgJodaTimeLocalDate *)now {
  return OrgJodaTimeLocalDate_now();
}

+ (OrgJodaTimeLocalDate *)nowWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeLocalDate_nowWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeLocalDate *)nowWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return OrgJodaTimeLocalDate_nowWithOrgJodaTimeChronology_(chronology);
}

+ (OrgJodaTimeLocalDate *)parseWithNSString:(NSString *)str {
  return OrgJodaTimeLocalDate_parseWithNSString_(str);
}

+ (OrgJodaTimeLocalDate *)parseWithNSString:(NSString *)str
     withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter {
  return OrgJodaTimeLocalDate_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, formatter);
}

+ (OrgJodaTimeLocalDate *)fromCalendarFieldsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  return OrgJodaTimeLocalDate_fromCalendarFieldsWithJavaUtilCalendar_(calendar);
}

+ (OrgJodaTimeLocalDate *)fromDateFieldsWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgJodaTimeLocalDate_fromDateFieldsWithJavaUtilDate_(date);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeLocalDate_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeLocalDate_initWithOrgJodaTimeDateTimeZone_(self, zone);
  return self;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeLocalDate_initWithOrgJodaTimeChronology_(self, chronology);
  return self;
}

- (instancetype)initWithLong:(jlong)instant {
  OrgJodaTimeLocalDate_initWithLong_(self, instant);
  return self;
}

- (instancetype)initWithLong:(jlong)instant
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeDateTimeZone_(self, instant, zone);
  return self;
}

- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

- (instancetype)initWithId:(id)instant {
  OrgJodaTimeLocalDate_initWithId_(self, instant);
  return self;
}

- (instancetype)initWithId:(id)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeDateTimeZone_(self, instant, zone);
  return self;
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth {
  OrgJodaTimeLocalDate_initWithInt_withInt_withInt_(self, year, monthOfYear, dayOfMonth);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeLocalDate_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(self, year, monthOfYear, dayOfMonth, chronology);
  return self;
}

- (id)readResolve {
  if (iChronology_ == nil) {
    return new_OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_(iLocalMillis_, OrgJodaTimeChronoISOChronology_getInstanceUTC());
  }
  if ([((OrgJodaTimeDateTimeZone *) nil_chk(JreLoadStatic(OrgJodaTimeDateTimeZone, UTC))) isEqual:[iChronology_ getZone]] == false) {
    return new_OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_(iLocalMillis_, [iChronology_ withUTC]);
  }
  return self;
}

- (jint)size {
  return 3;
}

- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  switch (index) {
    case OrgJodaTimeLocalDate_YEAR:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) year];
    case OrgJodaTimeLocalDate_MONTH_OF_YEAR:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) monthOfYear];
    case OrgJodaTimeLocalDate_DAY_OF_MONTH:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) dayOfMonth];
    default:
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I", @"Invalid index: ", index));
  }
}

- (jint)getValueWithInt:(jint)index {
  switch (index) {
    case OrgJodaTimeLocalDate_YEAR:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) year])) getWithLong:[self getLocalMillis]];
    case OrgJodaTimeLocalDate_MONTH_OF_YEAR:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) getWithLong:[self getLocalMillis]];
    case OrgJodaTimeLocalDate_DAY_OF_MONTH:
    return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) getWithLong:[self getLocalMillis]];
    default:
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I", @"Invalid index: ", index));
  }
}

- (jint)getWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The DateTimeFieldType must not be null");
  }
  if ([self isSupportedWithOrgJodaTimeDateTimeFieldType:fieldType] == false) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Field '", fieldType, @"' is not supported"));
  }
  return [((OrgJodaTimeDateTimeField *) nil_chk([fieldType getFieldWithOrgJodaTimeChronology:[self getChronology]])) getWithLong:[self getLocalMillis]];
}

- (jboolean)isSupportedWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  if (type == nil) {
    return false;
  }
  OrgJodaTimeDurationFieldType *durType = [type getDurationType];
  if ([((id<JavaUtilSet>) nil_chk(OrgJodaTimeLocalDate_DATE_DURATION_TYPES)) containsWithId:durType] || [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDurationFieldType *) nil_chk(durType)) getFieldWithOrgJodaTimeChronology:[self getChronology]])) getUnitMillis] >= [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) getUnitMillis]) {
    return [((OrgJodaTimeDateTimeField *) nil_chk([type getFieldWithOrgJodaTimeChronology:[self getChronology]])) isSupported];
  }
  return false;
}

- (jboolean)isSupportedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)type {
  if (type == nil) {
    return false;
  }
  OrgJodaTimeDurationField *field = [type getFieldWithOrgJodaTimeChronology:[self getChronology]];
  if ([((id<JavaUtilSet>) nil_chk(OrgJodaTimeLocalDate_DATE_DURATION_TYPES)) containsWithId:type] || [((OrgJodaTimeDurationField *) nil_chk(field)) getUnitMillis] >= [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) getUnitMillis]) {
    return [((OrgJodaTimeDurationField *) nil_chk(field)) isSupported];
  }
  return false;
}

- (jlong)getLocalMillis {
  return iLocalMillis_;
}

- (OrgJodaTimeChronology *)getChronology {
  return iChronology_;
}

- (jboolean)isEqual:(id)partial {
  if (self == partial) {
    return true;
  }
  if ([partial isKindOfClass:[OrgJodaTimeLocalDate class]]) {
    OrgJodaTimeLocalDate *other = (OrgJodaTimeLocalDate *) cast_chk(partial, [OrgJodaTimeLocalDate class]);
    if ([((OrgJodaTimeChronology *) nil_chk(iChronology_)) isEqual:((OrgJodaTimeLocalDate *) nil_chk(other))->iChronology_]) {
      return iLocalMillis_ == other->iLocalMillis_;
    }
  }
  return [super isEqual:partial];
}

- (NSUInteger)hash {
  jint hash_ = iHash_;
  if (hash_ == 0) {
    hash_ = iHash_ = ((jint) [super hash]);
  }
  return hash_;
}

- (jint)compareToWithId:(id<OrgJodaTimeReadablePartial>)partial {
  (void) cast_check(partial, OrgJodaTimeReadablePartial_class_());
  if (self == partial) {
    return 0;
  }
  if ([partial isKindOfClass:[OrgJodaTimeLocalDate class]]) {
    OrgJodaTimeLocalDate *other = (OrgJodaTimeLocalDate *) cast_chk(partial, [OrgJodaTimeLocalDate class]);
    if ([((OrgJodaTimeChronology *) nil_chk(iChronology_)) isEqual:((OrgJodaTimeLocalDate *) nil_chk(other))->iChronology_]) {
      return (iLocalMillis_ < other->iLocalMillis_ ? -1 : (iLocalMillis_ == other->iLocalMillis_ ? 0 : 1));
    }
  }
  return [super compareToWithId:partial];
}

- (OrgJodaTimeDateTime *)toDateTimeAtStartOfDay {
  return [self toDateTimeAtStartOfDayWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeAtStartOfDayWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  zone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(zone);
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  jlong localMillis = [self getLocalMillis] + 6LL * OrgJodaTimeDateTimeConstants_MILLIS_PER_HOUR;
  jlong instant = [((OrgJodaTimeDateTimeZone *) nil_chk(zone)) convertLocalToUTCWithLong:localMillis withBoolean:false];
  instant = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) dayOfMonth])) roundFloorWithLong:instant];
  return new_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(instant, chrono);
}

- (OrgJodaTimeDateTime *)toDateTimeAtMidnight {
  return [self toDateTimeAtMidnightWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeAtMidnightWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  zone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(zone);
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  return new_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_([self getYear], [self getMonthOfYear], [self getDayOfMonth], 0, 0, 0, 0, chrono);
}

- (OrgJodaTimeDateTime *)toDateTimeAtCurrentTime {
  return [self toDateTimeAtCurrentTimeWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeAtCurrentTimeWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  zone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(zone);
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  jlong instantMillis = OrgJodaTimeDateTimeUtils_currentTimeMillis();
  jlong resolved = [((OrgJodaTimeChronology *) nil_chk(chrono)) setWithOrgJodaTimeReadablePartial:self withLong:instantMillis];
  return new_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(resolved, chrono);
}

- (OrgJodaTimeDateMidnight *)toDateMidnight {
  return [self toDateMidnightWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateMidnight *)toDateMidnightWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  zone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(zone);
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  return new_OrgJodaTimeDateMidnight_initWithInt_withInt_withInt_withOrgJodaTimeChronology_([self getYear], [self getMonthOfYear], [self getDayOfMonth], chrono);
}

- (OrgJodaTimeLocalDateTime *)toLocalDateTimeWithOrgJodaTimeLocalTime:(OrgJodaTimeLocalTime *)time {
  if (time == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The time must not be null");
  }
  if ([self getChronology] != [time getChronology]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The chronology of the time does not match");
  }
  jlong localMillis = [self getLocalMillis] + [time getLocalMillis];
  return new_OrgJodaTimeLocalDateTime_initWithLong_withOrgJodaTimeChronology_(localMillis, [self getChronology]);
}

- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeLocalTime:(OrgJodaTimeLocalTime *)time {
  return [self toDateTimeWithOrgJodaTimeLocalTime:time withOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeLocalTime:(OrgJodaTimeLocalTime *)time
                                withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  if (time == nil) {
    return [self toDateTimeAtCurrentTimeWithOrgJodaTimeDateTimeZone:zone];
  }
  if ([self getChronology] != [time getChronology]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The chronology of the time does not match");
  }
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  return new_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_([self getYear], [self getMonthOfYear], [self getDayOfMonth], [time getHourOfDay], [time getMinuteOfHour], [time getSecondOfMinute], [time getMillisOfSecond], chrono);
}

- (OrgJodaTimeInterval *)toInterval {
  return [self toIntervalWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeInterval *)toIntervalWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  zone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(zone);
  OrgJodaTimeDateTime *start = [self toDateTimeAtStartOfDayWithOrgJodaTimeDateTimeZone:zone];
  OrgJodaTimeDateTime *end = [((OrgJodaTimeLocalDate *) nil_chk([self plusDaysWithInt:1])) toDateTimeAtStartOfDayWithOrgJodaTimeDateTimeZone:zone];
  return new_OrgJodaTimeInterval_initWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(start, end);
}

- (JavaUtilDate *)toDate {
  jint dom = [self getDayOfMonth];
  JavaUtilDate *date = new_JavaUtilDate_initWithInt_withInt_withInt_([self getYear] - 1900, [self getMonthOfYear] - 1, dom);
  OrgJodaTimeLocalDate *check = OrgJodaTimeLocalDate_fromDateFieldsWithJavaUtilDate_(date);
  if ([((OrgJodaTimeLocalDate *) nil_chk(check)) isBeforeWithOrgJodaTimeReadablePartial:self]) {
    while ([((OrgJodaTimeLocalDate *) nil_chk(check)) isEqual:self] == false) {
      [date setTimeWithLong:[date getTime] + 3600000];
      check = OrgJodaTimeLocalDate_fromDateFieldsWithJavaUtilDate_(date);
    }
    while ([date getDate] == dom) {
      [date setTimeWithLong:[date getTime] - 1000];
    }
    [date setTimeWithLong:[date getTime] + 1000];
  }
  else if ([check isEqual:self]) {
    JavaUtilDate *earlier = new_JavaUtilDate_initWithLong_([date getTime] - [((JavaUtilTimeZone *) nil_chk(JavaUtilTimeZone_getDefault())) getDSTSavings]);
    if ([earlier getDate] == dom) {
      date = earlier;
    }
  }
  return date;
}

- (OrgJodaTimeLocalDate *)withLocalMillisWithLong:(jlong)newMillis {
  newMillis = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(iChronology_)) dayOfMonth])) roundFloorWithLong:newMillis];
  return (newMillis == [self getLocalMillis] ? self : new_OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_(newMillis, [self getChronology]));
}

- (OrgJodaTimeLocalDate *)withFieldsWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  if (partial == nil) {
    return self;
  }
  return [self withLocalMillisWithLong:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) setWithOrgJodaTimeReadablePartial:partial withLong:[self getLocalMillis]]];
}

- (OrgJodaTimeLocalDate *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                            withInt:(jint)value {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field must not be null");
  }
  if ([self isSupportedWithOrgJodaTimeDateTimeFieldType:fieldType] == false) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Field '", fieldType, @"' is not supported"));
  }
  jlong instant = [((OrgJodaTimeDateTimeField *) nil_chk([fieldType getFieldWithOrgJodaTimeChronology:[self getChronology]])) setWithLong:[self getLocalMillis] withInt:value];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                 withInt:(jint)amount {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field must not be null");
  }
  if ([self isSupportedWithOrgJodaTimeDurationFieldType:fieldType] == false) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Field '", fieldType, @"' is not supported"));
  }
  if (amount == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([fieldType getFieldWithOrgJodaTimeChronology:[self getChronology]])) addWithLong:[self getLocalMillis] withInt:amount];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                               withInt:(jint)scalar {
  if (period == nil || scalar == 0) {
    return self;
  }
  jlong instant = [self getLocalMillis];
  OrgJodaTimeChronology *chrono = [self getChronology];
  for (jint i = 0; i < [period size]; i++) {
    jlong value = OrgJodaTimeFieldFieldUtils_safeMultiplyWithInt_withInt_([period getValueWithInt:i], scalar);
    OrgJodaTimeDurationFieldType *type = [period getFieldTypeWithInt:i];
    if ([self isSupportedWithOrgJodaTimeDurationFieldType:type]) {
      instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeDurationFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:chrono])) addWithLong:instant withLong:value];
    }
  }
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:1];
}

- (OrgJodaTimeLocalDate *)plusYearsWithInt:(jint)years {
  if (years == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) years])) addWithLong:[self getLocalMillis] withInt:years];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)plusMonthsWithInt:(jint)months {
  if (months == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) months])) addWithLong:[self getLocalMillis] withInt:months];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)plusWeeksWithInt:(jint)weeks {
  if (weeks == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weeks])) addWithLong:[self getLocalMillis] withInt:weeks];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)plusDaysWithInt:(jint)days {
  if (days == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) addWithLong:[self getLocalMillis] withInt:days];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:-1];
}

- (OrgJodaTimeLocalDate *)minusYearsWithInt:(jint)years {
  if (years == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) years])) subtractWithLong:[self getLocalMillis] withInt:years];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)minusMonthsWithInt:(jint)months {
  if (months == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) months])) subtractWithLong:[self getLocalMillis] withInt:months];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)minusWeeksWithInt:(jint)weeks {
  if (weeks == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weeks])) subtractWithLong:[self getLocalMillis] withInt:weeks];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate *)minusDaysWithInt:(jint)days {
  if (days == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) subtractWithLong:[self getLocalMillis] withInt:days];
  return [self withLocalMillisWithLong:instant];
}

- (OrgJodaTimeLocalDate_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The DateTimeFieldType must not be null");
  }
  if ([self isSupportedWithOrgJodaTimeDateTimeFieldType:fieldType] == false) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Field '", fieldType, @"' is not supported"));
  }
  return new_OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(self, [fieldType getFieldWithOrgJodaTimeChronology:[self getChronology]]);
}

- (jint)getEra {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) era])) getWithLong:[self getLocalMillis]];
}

- (jint)getCenturyOfEra {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) centuryOfEra])) getWithLong:[self getLocalMillis]];
}

- (jint)getYearOfEra {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfEra])) getWithLong:[self getLocalMillis]];
}

- (jint)getYearOfCentury {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfCentury])) getWithLong:[self getLocalMillis]];
}

- (jint)getYear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) year])) getWithLong:[self getLocalMillis]];
}

- (jint)getWeekyear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear])) getWithLong:[self getLocalMillis]];
}

- (jint)getMonthOfYear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) getWithLong:[self getLocalMillis]];
}

- (jint)getWeekOfWeekyear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear])) getWithLong:[self getLocalMillis]];
}

- (jint)getDayOfYear {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear])) getWithLong:[self getLocalMillis]];
}

- (jint)getDayOfMonth {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) getWithLong:[self getLocalMillis]];
}

- (jint)getDayOfWeek {
  return [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek])) getWithLong:[self getLocalMillis]];
}

- (OrgJodaTimeLocalDate *)withEraWithInt:(jint)era {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) era])) setWithLong:[self getLocalMillis] withInt:era]];
}

- (OrgJodaTimeLocalDate *)withCenturyOfEraWithInt:(jint)centuryOfEra {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) centuryOfEra])) setWithLong:[self getLocalMillis] withInt:centuryOfEra]];
}

- (OrgJodaTimeLocalDate *)withYearOfEraWithInt:(jint)yearOfEra {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfEra])) setWithLong:[self getLocalMillis] withInt:yearOfEra]];
}

- (OrgJodaTimeLocalDate *)withYearOfCenturyWithInt:(jint)yearOfCentury {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfCentury])) setWithLong:[self getLocalMillis] withInt:yearOfCentury]];
}

- (OrgJodaTimeLocalDate *)withYearWithInt:(jint)year {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) year])) setWithLong:[self getLocalMillis] withInt:year]];
}

- (OrgJodaTimeLocalDate *)withWeekyearWithInt:(jint)weekyear {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear])) setWithLong:[self getLocalMillis] withInt:weekyear]];
}

- (OrgJodaTimeLocalDate *)withMonthOfYearWithInt:(jint)monthOfYear {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) setWithLong:[self getLocalMillis] withInt:monthOfYear]];
}

- (OrgJodaTimeLocalDate *)withWeekOfWeekyearWithInt:(jint)weekOfWeekyear {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear])) setWithLong:[self getLocalMillis] withInt:weekOfWeekyear]];
}

- (OrgJodaTimeLocalDate *)withDayOfYearWithInt:(jint)dayOfYear {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear])) setWithLong:[self getLocalMillis] withInt:dayOfYear]];
}

- (OrgJodaTimeLocalDate *)withDayOfMonthWithInt:(jint)dayOfMonth {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) setWithLong:[self getLocalMillis] withInt:dayOfMonth]];
}

- (OrgJodaTimeLocalDate *)withDayOfWeekWithInt:(jint)dayOfWeek {
  return [self withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek])) setWithLong:[self getLocalMillis] withInt:dayOfWeek]];
}

- (OrgJodaTimeLocalDate_Property *)era {
  return new_OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) era]);
}

- (OrgJodaTimeLocalDate_Property *)centuryOfEra {
  return new_OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) centuryOfEra]);
}

- (OrgJodaTimeLocalDate_Property *)yearOfCentury {
  return new_OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfCentury]);
}

- (OrgJodaTimeLocalDate_Property *)yearOfEra {
  return new_OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfEra]);
}

- (OrgJodaTimeLocalDate_Property *)year {
  return new_OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) year]);
}

- (OrgJodaTimeLocalDate_Property *)weekyear {
  return new_OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear]);
}

- (OrgJodaTimeLocalDate_Property *)monthOfYear {
  return new_OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear]);
}

- (OrgJodaTimeLocalDate_Property *)weekOfWeekyear {
  return new_OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear]);
}

- (OrgJodaTimeLocalDate_Property *)dayOfYear {
  return new_OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear]);
}

- (OrgJodaTimeLocalDate_Property *)dayOfMonth {
  return new_OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth]);
}

- (OrgJodaTimeLocalDate_Property *)dayOfWeek {
  return new_OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek]);
}

- (NSString *)description {
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatISODateTimeFormat_date())) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) printWithOrgJodaTimeReadablePartial:self];
}

- (NSString *)toStringWithNSString:(NSString *)pattern
                withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (pattern == nil) {
    return [self description];
  }
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk([((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatDateTimeFormat_forPatternWithNSString_(pattern))) withLocaleWithJavaUtilLocale:locale])) printWithOrgJodaTimeReadablePartial:self];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJodaTimeLocalDate;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x9, 3, 4, -1, -1, 5, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x9, 3, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 12, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 13, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 14, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 15, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 16, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 17, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 18, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x4, 19, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 25, 24, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "J", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 27, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 28, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 31, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, 32, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 33, 1, -1, -1, 34, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 35, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateMidnight;", 0x1, -1, -1, -1, -1, 36, -1 },
    { NULL, "LOrgJodaTimeDateMidnight;", 0x1, 37, 1, -1, -1, 38, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, 39, 40, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 41, 40, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeInterval;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeInterval;", 0x1, 43, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x0, 44, 11, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 45, 30, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 46, 47, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 48, 49, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 50, 51, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 52, 53, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 54, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 55, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 56, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 57, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 58, 53, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 59, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 60, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 61, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 62, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate_Property;", 0x1, 63, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 64, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 65, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 66, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 67, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 68, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 69, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 70, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 71, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 72, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 73, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 74, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 75, -1, -1, -1, 76, -1 },
    { NULL, "LNSString;", 0x1, 75, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 75, 77, 78, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(now);
  methods[1].selector = @selector(nowWithOrgJodaTimeDateTimeZone:);
  methods[2].selector = @selector(nowWithOrgJodaTimeChronology:);
  methods[3].selector = @selector(parseWithNSString:);
  methods[4].selector = @selector(parseWithNSString:withOrgJodaTimeFormatDateTimeFormatter:);
  methods[5].selector = @selector(fromCalendarFieldsWithJavaUtilCalendar:);
  methods[6].selector = @selector(fromDateFieldsWithJavaUtilDate:);
  methods[7].selector = @selector(init);
  methods[8].selector = @selector(initWithOrgJodaTimeDateTimeZone:);
  methods[9].selector = @selector(initWithOrgJodaTimeChronology:);
  methods[10].selector = @selector(initWithLong:);
  methods[11].selector = @selector(initWithLong:withOrgJodaTimeDateTimeZone:);
  methods[12].selector = @selector(initWithLong:withOrgJodaTimeChronology:);
  methods[13].selector = @selector(initWithId:);
  methods[14].selector = @selector(initWithId:withOrgJodaTimeDateTimeZone:);
  methods[15].selector = @selector(initWithId:withOrgJodaTimeChronology:);
  methods[16].selector = @selector(initWithInt:withInt:withInt:);
  methods[17].selector = @selector(initWithInt:withInt:withInt:withOrgJodaTimeChronology:);
  methods[18].selector = @selector(readResolve);
  methods[19].selector = @selector(size);
  methods[20].selector = @selector(getFieldWithInt:withOrgJodaTimeChronology:);
  methods[21].selector = @selector(getValueWithInt:);
  methods[22].selector = @selector(getWithOrgJodaTimeDateTimeFieldType:);
  methods[23].selector = @selector(isSupportedWithOrgJodaTimeDateTimeFieldType:);
  methods[24].selector = @selector(isSupportedWithOrgJodaTimeDurationFieldType:);
  methods[25].selector = @selector(getLocalMillis);
  methods[26].selector = @selector(getChronology);
  methods[27].selector = @selector(isEqual:);
  methods[28].selector = @selector(hash);
  methods[29].selector = @selector(compareToWithId:);
  methods[30].selector = @selector(toDateTimeAtStartOfDay);
  methods[31].selector = @selector(toDateTimeAtStartOfDayWithOrgJodaTimeDateTimeZone:);
  methods[32].selector = @selector(toDateTimeAtMidnight);
  methods[33].selector = @selector(toDateTimeAtMidnightWithOrgJodaTimeDateTimeZone:);
  methods[34].selector = @selector(toDateTimeAtCurrentTime);
  methods[35].selector = @selector(toDateTimeAtCurrentTimeWithOrgJodaTimeDateTimeZone:);
  methods[36].selector = @selector(toDateMidnight);
  methods[37].selector = @selector(toDateMidnightWithOrgJodaTimeDateTimeZone:);
  methods[38].selector = @selector(toLocalDateTimeWithOrgJodaTimeLocalTime:);
  methods[39].selector = @selector(toDateTimeWithOrgJodaTimeLocalTime:);
  methods[40].selector = @selector(toDateTimeWithOrgJodaTimeLocalTime:withOrgJodaTimeDateTimeZone:);
  methods[41].selector = @selector(toInterval);
  methods[42].selector = @selector(toIntervalWithOrgJodaTimeDateTimeZone:);
  methods[43].selector = @selector(toDate);
  methods[44].selector = @selector(withLocalMillisWithLong:);
  methods[45].selector = @selector(withFieldsWithOrgJodaTimeReadablePartial:);
  methods[46].selector = @selector(withFieldWithOrgJodaTimeDateTimeFieldType:withInt:);
  methods[47].selector = @selector(withFieldAddedWithOrgJodaTimeDurationFieldType:withInt:);
  methods[48].selector = @selector(withPeriodAddedWithOrgJodaTimeReadablePeriod:withInt:);
  methods[49].selector = @selector(plusWithOrgJodaTimeReadablePeriod:);
  methods[50].selector = @selector(plusYearsWithInt:);
  methods[51].selector = @selector(plusMonthsWithInt:);
  methods[52].selector = @selector(plusWeeksWithInt:);
  methods[53].selector = @selector(plusDaysWithInt:);
  methods[54].selector = @selector(minusWithOrgJodaTimeReadablePeriod:);
  methods[55].selector = @selector(minusYearsWithInt:);
  methods[56].selector = @selector(minusMonthsWithInt:);
  methods[57].selector = @selector(minusWeeksWithInt:);
  methods[58].selector = @selector(minusDaysWithInt:);
  methods[59].selector = @selector(propertyWithOrgJodaTimeDateTimeFieldType:);
  methods[60].selector = @selector(getEra);
  methods[61].selector = @selector(getCenturyOfEra);
  methods[62].selector = @selector(getYearOfEra);
  methods[63].selector = @selector(getYearOfCentury);
  methods[64].selector = @selector(getYear);
  methods[65].selector = @selector(getWeekyear);
  methods[66].selector = @selector(getMonthOfYear);
  methods[67].selector = @selector(getWeekOfWeekyear);
  methods[68].selector = @selector(getDayOfYear);
  methods[69].selector = @selector(getDayOfMonth);
  methods[70].selector = @selector(getDayOfWeek);
  methods[71].selector = @selector(withEraWithInt:);
  methods[72].selector = @selector(withCenturyOfEraWithInt:);
  methods[73].selector = @selector(withYearOfEraWithInt:);
  methods[74].selector = @selector(withYearOfCenturyWithInt:);
  methods[75].selector = @selector(withYearWithInt:);
  methods[76].selector = @selector(withWeekyearWithInt:);
  methods[77].selector = @selector(withMonthOfYearWithInt:);
  methods[78].selector = @selector(withWeekOfWeekyearWithInt:);
  methods[79].selector = @selector(withDayOfYearWithInt:);
  methods[80].selector = @selector(withDayOfMonthWithInt:);
  methods[81].selector = @selector(withDayOfWeekWithInt:);
  methods[82].selector = @selector(era);
  methods[83].selector = @selector(centuryOfEra);
  methods[84].selector = @selector(yearOfCentury);
  methods[85].selector = @selector(yearOfEra);
  methods[86].selector = @selector(year);
  methods[87].selector = @selector(weekyear);
  methods[88].selector = @selector(monthOfYear);
  methods[89].selector = @selector(weekOfWeekyear);
  methods[90].selector = @selector(dayOfYear);
  methods[91].selector = @selector(dayOfMonth);
  methods[92].selector = @selector(dayOfWeek);
  methods[93].selector = @selector(description);
  methods[94].selector = @selector(toStringWithNSString:);
  methods[95].selector = @selector(toStringWithNSString:withJavaUtilLocale:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeLocalDate_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "YEAR", "I", .constantValue.asInt = OrgJodaTimeLocalDate_YEAR, 0x1a, -1, -1, -1, -1 },
    { "MONTH_OF_YEAR", "I", .constantValue.asInt = OrgJodaTimeLocalDate_MONTH_OF_YEAR, 0x1a, -1, -1, -1, -1 },
    { "DAY_OF_MONTH", "I", .constantValue.asInt = OrgJodaTimeLocalDate_DAY_OF_MONTH, 0x1a, -1, -1, -1, -1 },
    { "DATE_DURATION_TYPES", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 79, 80, -1 },
    { "iLocalMillis_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iChronology_", "LOrgJodaTimeChronology;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iHash_", "I", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "now", "LOrgJodaTimeDateTimeZone;", "LOrgJodaTimeChronology;", "parse", "LNSString;", (void *)&OrgJodaTimeLocalDate__Annotations$0, "LNSString;LOrgJodaTimeFormatDateTimeFormatter;", "fromCalendarFields", "LJavaUtilCalendar;", "fromDateFields", "LJavaUtilDate;", "J", "JLOrgJodaTimeDateTimeZone;", "JLOrgJodaTimeChronology;", "LNSObject;", "LNSObject;LOrgJodaTimeDateTimeZone;", "LNSObject;LOrgJodaTimeChronology;", "III", "IIILOrgJodaTimeChronology;", "getField", "ILOrgJodaTimeChronology;", "getValue", "I", "get", "LOrgJodaTimeDateTimeFieldType;", "isSupported", "LOrgJodaTimeDurationFieldType;", "equals", "hashCode", "compareTo", "LOrgJodaTimeReadablePartial;", "toDateTimeAtStartOfDay", (void *)&OrgJodaTimeLocalDate__Annotations$1, "toDateTimeAtMidnight", (void *)&OrgJodaTimeLocalDate__Annotations$2, "toDateTimeAtCurrentTime", (void *)&OrgJodaTimeLocalDate__Annotations$3, "toDateMidnight", (void *)&OrgJodaTimeLocalDate__Annotations$4, "toLocalDateTime", "LOrgJodaTimeLocalTime;", "toDateTime", "LOrgJodaTimeLocalTime;LOrgJodaTimeDateTimeZone;", "toInterval", "withLocalMillis", "withFields", "withField", "LOrgJodaTimeDateTimeFieldType;I", "withFieldAdded", "LOrgJodaTimeDurationFieldType;I", "withPeriodAdded", "LOrgJodaTimeReadablePeriod;I", "plus", "LOrgJodaTimeReadablePeriod;", "plusYears", "plusMonths", "plusWeeks", "plusDays", "minus", "minusYears", "minusMonths", "minusWeeks", "minusDays", "property", "withEra", "withCenturyOfEra", "withYearOfEra", "withYearOfCentury", "withYear", "withWeekyear", "withMonthOfYear", "withWeekOfWeekyear", "withDayOfYear", "withDayOfMonth", "withDayOfWeek", "toString", (void *)&OrgJodaTimeLocalDate__Annotations$5, "LNSString;LJavaUtilLocale;", "LJavaLangIllegalArgumentException;", &OrgJodaTimeLocalDate_DATE_DURATION_TYPES, "Ljava/util/Set<Lorg/joda/time/DurationFieldType;>;", "LOrgJodaTimeLocalDate_Property;" };
  static const J2ObjcClassInfo _OrgJodaTimeLocalDate = { "LocalDate", "org.joda.time", ptrTable, methods, fields, 7, 0x11, 96, 8, -1, 81, -1, -1, -1 };
  return &_OrgJodaTimeLocalDate;
}

+ (void)initialize {
  if (self == [OrgJodaTimeLocalDate class]) {
    OrgJodaTimeLocalDate_DATE_DURATION_TYPES = new_JavaUtilHashSet_init();
    {
      [OrgJodaTimeLocalDate_DATE_DURATION_TYPES addWithId:OrgJodaTimeDurationFieldType_days()];
      [OrgJodaTimeLocalDate_DATE_DURATION_TYPES addWithId:OrgJodaTimeDurationFieldType_weeks()];
      [OrgJodaTimeLocalDate_DATE_DURATION_TYPES addWithId:OrgJodaTimeDurationFieldType_months()];
      [OrgJodaTimeLocalDate_DATE_DURATION_TYPES addWithId:OrgJodaTimeDurationFieldType_weekyears()];
      [OrgJodaTimeLocalDate_DATE_DURATION_TYPES addWithId:OrgJodaTimeDurationFieldType_years()];
      [OrgJodaTimeLocalDate_DATE_DURATION_TYPES addWithId:OrgJodaTimeDurationFieldType_centuries()];
      [OrgJodaTimeLocalDate_DATE_DURATION_TYPES addWithId:OrgJodaTimeDurationFieldType_eras()];
    }
    J2OBJC_SET_INITIALIZED(OrgJodaTimeLocalDate)
  }
}

@end

OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_now() {
  OrgJodaTimeLocalDate_initialize();
  return new_OrgJodaTimeLocalDate_init();
}

OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_nowWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalDate_initialize();
  if (zone == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Zone must not be null");
  }
  return new_OrgJodaTimeLocalDate_initWithOrgJodaTimeDateTimeZone_(zone);
}

OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_nowWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  OrgJodaTimeLocalDate_initialize();
  if (chronology == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Chronology must not be null");
  }
  return new_OrgJodaTimeLocalDate_initWithOrgJodaTimeChronology_(chronology);
}

OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_parseWithNSString_(NSString *str) {
  OrgJodaTimeLocalDate_initialize();
  return OrgJodaTimeLocalDate_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, OrgJodaTimeFormatISODateTimeFormat_localDateParser());
}

OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(NSString *str, OrgJodaTimeFormatDateTimeFormatter *formatter) {
  OrgJodaTimeLocalDate_initialize();
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(formatter)) parseLocalDateWithNSString:str];
}

OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_fromCalendarFieldsWithJavaUtilCalendar_(JavaUtilCalendar *calendar) {
  OrgJodaTimeLocalDate_initialize();
  if (calendar == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The calendar must not be null");
  }
  jint era = [calendar getWithInt:JavaUtilCalendar_ERA];
  jint yearOfEra = [calendar getWithInt:JavaUtilCalendar_YEAR];
  return new_OrgJodaTimeLocalDate_initWithInt_withInt_withInt_((era == JavaUtilGregorianCalendar_AD ? yearOfEra : 1 - yearOfEra), [calendar getWithInt:JavaUtilCalendar_MONTH] + 1, [calendar getWithInt:JavaUtilCalendar_DAY_OF_MONTH]);
}

OrgJodaTimeLocalDate *OrgJodaTimeLocalDate_fromDateFieldsWithJavaUtilDate_(JavaUtilDate *date) {
  OrgJodaTimeLocalDate_initialize();
  if (date == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  if ([date getTime] < 0) {
    JavaUtilGregorianCalendar *cal = new_JavaUtilGregorianCalendar_init();
    [cal setTimeWithJavaUtilDate:date];
    return OrgJodaTimeLocalDate_fromCalendarFieldsWithJavaUtilCalendar_(cal);
  }
  return new_OrgJodaTimeLocalDate_initWithInt_withInt_withInt_([date getYear] + 1900, [date getMonth] + 1, [date getDate]);
}

void OrgJodaTimeLocalDate_init(OrgJodaTimeLocalDate *self) {
  OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_(self, OrgJodaTimeDateTimeUtils_currentTimeMillis(), OrgJodaTimeChronoISOChronology_getInstance());
}

OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_init() {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDate, init)
}

OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_init() {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDate, init)
}

void OrgJodaTimeLocalDate_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalDate *self, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_(self, OrgJodaTimeDateTimeUtils_currentTimeMillis(), OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone));
}

OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDate, initWithOrgJodaTimeDateTimeZone_, zone)
}

OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDate, initWithOrgJodaTimeDateTimeZone_, zone)
}

void OrgJodaTimeLocalDate_initWithOrgJodaTimeChronology_(OrgJodaTimeLocalDate *self, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_(self, OrgJodaTimeDateTimeUtils_currentTimeMillis(), chronology);
}

OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDate, initWithOrgJodaTimeChronology_, chronology)
}

OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDate, initWithOrgJodaTimeChronology_, chronology)
}

void OrgJodaTimeLocalDate_initWithLong_(OrgJodaTimeLocalDate *self, jlong instant) {
  OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_(self, instant, OrgJodaTimeChronoISOChronology_getInstance());
}

OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithLong_(jlong instant) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDate, initWithLong_, instant)
}

OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithLong_(jlong instant) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDate, initWithLong_, instant)
}

void OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalDate *self, jlong instant, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_(self, instant, OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone));
}

OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeDateTimeZone_(jlong instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDate, initWithLong_withOrgJodaTimeDateTimeZone_, instant, zone)
}

OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeDateTimeZone_(jlong instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDate, initWithLong_withOrgJodaTimeDateTimeZone_, instant, zone)
}

void OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_(OrgJodaTimeLocalDate *self, jlong instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseLocal_init(self);
  chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
  jlong localMillis = [((OrgJodaTimeDateTimeZone *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chronology)) getZone])) getMillisKeepLocalWithOrgJodaTimeDateTimeZone:JreLoadStatic(OrgJodaTimeDateTimeZone, UTC) withLong:instant];
  chronology = [chronology withUTC];
  self->iLocalMillis_ = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chronology)) dayOfMonth])) roundFloorWithLong:localMillis];
  self->iChronology_ = chronology;
}

OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDate, initWithLong_withOrgJodaTimeChronology_, instant, chronology)
}

OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDate, initWithLong_withOrgJodaTimeChronology_, instant, chronology)
}

void OrgJodaTimeLocalDate_initWithId_(OrgJodaTimeLocalDate *self, id instant) {
  OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeChronology_(self, instant, nil);
}

OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithId_(id instant) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDate, initWithId_, instant)
}

OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithId_(id instant) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDate, initWithId_, instant)
}

void OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeDateTimeZone_(OrgJodaTimeLocalDate *self, id instant, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeBaseBaseLocal_init(self);
  id<OrgJodaTimeConvertPartialConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getPartialConverterWithId:instant];
  OrgJodaTimeChronology *chronology = [((id<OrgJodaTimeConvertPartialConverter>) nil_chk(converter)) getChronologyWithId:instant withOrgJodaTimeDateTimeZone:zone];
  chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
  self->iChronology_ = [((OrgJodaTimeChronology *) nil_chk(chronology)) withUTC];
  IOSIntArray *values = [converter getPartialValuesWithOrgJodaTimeReadablePartial:self withId:instant withOrgJodaTimeChronology:chronology withOrgJodaTimeFormatDateTimeFormatter:OrgJodaTimeFormatISODateTimeFormat_localDateParser()];
  self->iLocalMillis_ = [((OrgJodaTimeChronology *) nil_chk(self->iChronology_)) getDateTimeMillisWithInt:IOSIntArray_Get(nil_chk(values), 0) withInt:IOSIntArray_Get(values, 1) withInt:IOSIntArray_Get(values, 2) withInt:0];
}

OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeDateTimeZone_(id instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDate, initWithId_withOrgJodaTimeDateTimeZone_, instant, zone)
}

OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeDateTimeZone_(id instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDate, initWithId_withOrgJodaTimeDateTimeZone_, instant, zone)
}

void OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeChronology_(OrgJodaTimeLocalDate *self, id instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseLocal_init(self);
  id<OrgJodaTimeConvertPartialConverter> converter = [((OrgJodaTimeConvertConverterManager *) nil_chk(OrgJodaTimeConvertConverterManager_getInstance())) getPartialConverterWithId:instant];
  chronology = [((id<OrgJodaTimeConvertPartialConverter>) nil_chk(converter)) getChronologyWithId:instant withOrgJodaTimeChronology:chronology];
  chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
  self->iChronology_ = [((OrgJodaTimeChronology *) nil_chk(chronology)) withUTC];
  IOSIntArray *values = [converter getPartialValuesWithOrgJodaTimeReadablePartial:self withId:instant withOrgJodaTimeChronology:chronology withOrgJodaTimeFormatDateTimeFormatter:OrgJodaTimeFormatISODateTimeFormat_localDateParser()];
  self->iLocalMillis_ = [((OrgJodaTimeChronology *) nil_chk(self->iChronology_)) getDateTimeMillisWithInt:IOSIntArray_Get(nil_chk(values), 0) withInt:IOSIntArray_Get(values, 1) withInt:IOSIntArray_Get(values, 2) withInt:0];
}

OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDate, initWithId_withOrgJodaTimeChronology_, instant, chronology)
}

OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDate, initWithId_withOrgJodaTimeChronology_, instant, chronology)
}

void OrgJodaTimeLocalDate_initWithInt_withInt_withInt_(OrgJodaTimeLocalDate *self, jint year, jint monthOfYear, jint dayOfMonth) {
  OrgJodaTimeLocalDate_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(self, year, monthOfYear, dayOfMonth, OrgJodaTimeChronoISOChronology_getInstanceUTC());
}

OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDate, initWithInt_withInt_withInt_, year, monthOfYear, dayOfMonth)
}

OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDate, initWithInt_withInt_withInt_, year, monthOfYear, dayOfMonth)
}

void OrgJodaTimeLocalDate_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeLocalDate *self, jint year, jint monthOfYear, jint dayOfMonth, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseLocal_init(self);
  chronology = [((OrgJodaTimeChronology *) nil_chk(OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology))) withUTC];
  jlong instant = [((OrgJodaTimeChronology *) nil_chk(chronology)) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:0];
  self->iChronology_ = chronology;
  self->iLocalMillis_ = instant;
}

OrgJodaTimeLocalDate *new_OrgJodaTimeLocalDate_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDate, initWithInt_withInt_withInt_withOrgJodaTimeChronology_, year, monthOfYear, dayOfMonth, chronology)
}

OrgJodaTimeLocalDate *create_OrgJodaTimeLocalDate_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDate, initWithInt_withInt_withInt_withOrgJodaTimeChronology_, year, monthOfYear, dayOfMonth, chronology)
}

IOSObjectArray *OrgJodaTimeLocalDate__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_OrgJodaConvertFromString() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgJodaTimeLocalDate__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgJodaTimeLocalDate__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgJodaTimeLocalDate__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgJodaTimeLocalDate__Annotations$4() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgJodaTimeLocalDate__Annotations$5() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_OrgJodaConvertToString() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeLocalDate)

@implementation OrgJodaTimeLocalDate_Property

- (instancetype)initWithOrgJodaTimeLocalDate:(OrgJodaTimeLocalDate *)instant
                withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(self, instant, field);
  return self;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos {
  [((JavaIoObjectOutputStream *) nil_chk(oos)) writeObjectWithId:iInstant_];
  [oos writeObjectWithId:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getType]];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos {
  iInstant_ = (OrgJodaTimeLocalDate *) cast_chk([((JavaIoObjectInputStream *) nil_chk(oos)) readObject], [OrgJodaTimeLocalDate class]);
  OrgJodaTimeDateTimeFieldType *type = (OrgJodaTimeDateTimeFieldType *) cast_chk([oos readObject], [OrgJodaTimeDateTimeFieldType class]);
  iField_ = [((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) getChronology]];
}

- (OrgJodaTimeDateTimeField *)getField {
  return iField_;
}

- (jlong)getMillis {
  return [((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) getLocalMillis];
}

- (OrgJodaTimeChronology *)getChronology {
  return [((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) getChronology];
}

- (OrgJodaTimeLocalDate *)getLocalDate {
  return iInstant_;
}

- (OrgJodaTimeLocalDate *)addToCopyWithInt:(jint)value {
  return [((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:[iInstant_ getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalDate *)addWrapFieldToCopyWithInt:(jint)value {
  return [((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWrapFieldWithLong:[iInstant_ getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalDate *)setCopyWithInt:(jint)value {
  return [((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:[iInstant_ getLocalMillis] withInt:value]];
}

- (OrgJodaTimeLocalDate *)setCopyWithNSString:(NSString *)text
                           withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:[iInstant_ getLocalMillis] withNSString:text withJavaUtilLocale:locale]];
}

- (OrgJodaTimeLocalDate *)setCopyWithNSString:(NSString *)text {
  return [self setCopyWithNSString:text withJavaUtilLocale:nil];
}

- (OrgJodaTimeLocalDate *)withMaximumValue {
  return [self setCopyWithInt:[self getMaximumValue]];
}

- (OrgJodaTimeLocalDate *)withMinimumValue {
  return [self setCopyWithInt:[self getMinimumValue]];
}

- (OrgJodaTimeLocalDate *)roundFloorCopy {
  return [((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundFloorWithLong:[iInstant_ getLocalMillis]]];
}

- (OrgJodaTimeLocalDate *)roundCeilingCopy {
  return [((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundCeilingWithLong:[iInstant_ getLocalMillis]]];
}

- (OrgJodaTimeLocalDate *)roundHalfFloorCopy {
  return [((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfFloorWithLong:[iInstant_ getLocalMillis]]];
}

- (OrgJodaTimeLocalDate *)roundHalfCeilingCopy {
  return [((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfCeilingWithLong:[iInstant_ getLocalMillis]]];
}

- (OrgJodaTimeLocalDate *)roundHalfEvenCopy {
  return [((OrgJodaTimeLocalDate *) nil_chk(iInstant_)) withLocalMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfEvenWithLong:[iInstant_ getLocalMillis]]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, 6, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, 10, 12, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeLocalDate:withOrgJodaTimeDateTimeField:);
  methods[1].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[2].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[3].selector = @selector(getField);
  methods[4].selector = @selector(getMillis);
  methods[5].selector = @selector(getChronology);
  methods[6].selector = @selector(getLocalDate);
  methods[7].selector = @selector(addToCopyWithInt:);
  methods[8].selector = @selector(addWrapFieldToCopyWithInt:);
  methods[9].selector = @selector(setCopyWithInt:);
  methods[10].selector = @selector(setCopyWithNSString:withJavaUtilLocale:);
  methods[11].selector = @selector(setCopyWithNSString:);
  methods[12].selector = @selector(withMaximumValue);
  methods[13].selector = @selector(withMinimumValue);
  methods[14].selector = @selector(roundFloorCopy);
  methods[15].selector = @selector(roundCeilingCopy);
  methods[16].selector = @selector(roundHalfFloorCopy);
  methods[17].selector = @selector(roundHalfCeilingCopy);
  methods[18].selector = @selector(roundHalfEvenCopy);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeLocalDate_Property_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iInstant_", "LOrgJodaTimeLocalDate;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "iField_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeLocalDate;LOrgJodaTimeDateTimeField;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "addToCopy", "I", "addWrapFieldToCopy", "setCopy", "LNSString;LJavaUtilLocale;", "LNSString;", "LOrgJodaTimeLocalDate;" };
  static const J2ObjcClassInfo _OrgJodaTimeLocalDate_Property = { "Property", "org.joda.time", ptrTable, methods, fields, 7, 0x19, 19, 3, 13, -1, -1, -1, -1 };
  return &_OrgJodaTimeLocalDate_Property;
}

@end

void OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalDate_Property *self, OrgJodaTimeLocalDate *instant, OrgJodaTimeDateTimeField *field) {
  OrgJodaTimeFieldAbstractReadableInstantFieldProperty_init(self);
  self->iInstant_ = instant;
  self->iField_ = field;
}

OrgJodaTimeLocalDate_Property *new_OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalDate *instant, OrgJodaTimeDateTimeField *field) {
  J2OBJC_NEW_IMPL(OrgJodaTimeLocalDate_Property, initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_, instant, field)
}

OrgJodaTimeLocalDate_Property *create_OrgJodaTimeLocalDate_Property_initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_(OrgJodaTimeLocalDate *instant, OrgJodaTimeDateTimeField *field) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeLocalDate_Property, initWithOrgJodaTimeLocalDate_withOrgJodaTimeDateTimeField_, instant, field)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeLocalDate_Property)
