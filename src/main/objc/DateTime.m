//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/DateTime.java
//

#include "AbstractReadableInstantFieldProperty.h"
#include "BaseDateTime.h"
#include "Chronology.h"
#include "DateMidnight.h"
#include "DateTime.h"
#include "DateTimeConstants.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormatter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FromString.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "ISOChronology.h"
#include "ISODateTimeFormat.h"
#include "IllegalInstantException.h"
#include "J2ObjC_source.h"
#include "LocalDate.h"
#include "LocalDateTime.h"
#include "LocalTime.h"
#include "ReadableDuration.h"
#include "ReadablePartial.h"
#include "ReadablePeriod.h"
#include "TimeOfDay.h"
#include "YearMonthDay.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Locale.h"

inline jlong OrgJodaTimeDateTime_get_serialVersionUID();
#define OrgJodaTimeDateTime_serialVersionUID -5171125899451703815LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTime, serialVersionUID, jlong)

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeDateTime__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeDateTime__Annotations$1();

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeDateTime__Annotations$2();

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeDateTime__Annotations$3();

@interface OrgJodaTimeDateTime_Property () {
 @public
  OrgJodaTimeDateTime *iInstant_;
  OrgJodaTimeDateTimeField *iField_;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos;

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeDateTime_Property, iInstant_, OrgJodaTimeDateTime *)
J2OBJC_FIELD_SETTER(OrgJodaTimeDateTime_Property, iField_, OrgJodaTimeDateTimeField *)

inline jlong OrgJodaTimeDateTime_Property_get_serialVersionUID();
#define OrgJodaTimeDateTime_Property_serialVersionUID -6983323811635733510LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeDateTime_Property, serialVersionUID, jlong)

@implementation OrgJodaTimeDateTime

+ (OrgJodaTimeDateTime *)now {
  return OrgJodaTimeDateTime_now();
}

+ (OrgJodaTimeDateTime *)nowWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  return OrgJodaTimeDateTime_nowWithOrgJodaTimeDateTimeZone_(zone);
}

+ (OrgJodaTimeDateTime *)nowWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  return OrgJodaTimeDateTime_nowWithOrgJodaTimeChronology_(chronology);
}

+ (OrgJodaTimeDateTime *)parseWithNSString:(NSString *)str {
  return OrgJodaTimeDateTime_parseWithNSString_(str);
}

+ (OrgJodaTimeDateTime *)parseWithNSString:(NSString *)str
    withOrgJodaTimeFormatDateTimeFormatter:(OrgJodaTimeFormatDateTimeFormatter *)formatter {
  return OrgJodaTimeDateTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, formatter);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeDateTime_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeDateTime_initWithOrgJodaTimeDateTimeZone_(self, zone);
  return self;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeDateTime_initWithOrgJodaTimeChronology_(self, chronology);
  return self;
}

- (instancetype)initWithLong:(jlong)instant {
  OrgJodaTimeDateTime_initWithLong_(self, instant);
  return self;
}

- (instancetype)initWithLong:(jlong)instant
 withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeDateTimeZone_(self, instant, zone);
  return self;
}

- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

- (instancetype)initWithId:(id)instant {
  OrgJodaTimeDateTime_initWithId_(self, instant);
  return self;
}

- (instancetype)initWithId:(id)instant
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeDateTime_initWithId_withOrgJodaTimeDateTimeZone_(self, instant, zone);
  return self;
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeDateTime_initWithId_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour {
  OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, zone);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, chronology);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute {
  OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, zone);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, chronology);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond {
  OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond
withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, zone);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
                    withInt:(jint)hourOfDay
                    withInt:(jint)minuteOfHour
                    withInt:(jint)secondOfMinute
                    withInt:(jint)millisOfSecond
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology);
  return self;
}

- (OrgJodaTimeDateTime *)toDateTime {
  return self;
}

- (OrgJodaTimeDateTime *)toDateTimeISO {
  if ([self getChronology] == OrgJodaTimeChronoISOChronology_getInstance()) {
    return self;
  }
  return [super toDateTimeISO];
}

- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  zone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(zone);
  if ([self getZone] == zone) {
    return self;
  }
  return [super toDateTimeWithOrgJodaTimeDateTimeZone:zone];
}

- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  chronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology);
  if ([self getChronology] == chronology) {
    return self;
  }
  return [super toDateTimeWithOrgJodaTimeChronology:chronology];
}

- (OrgJodaTimeDateTime *)withMillisWithLong:(jlong)newMillis {
  return (newMillis == [self getMillis] ? self : new_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(newMillis, [self getChronology]));
}

- (OrgJodaTimeDateTime *)withChronologyWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)newChronology {
  newChronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(newChronology);
  return (newChronology == [self getChronology] ? self : new_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_([self getMillis], newChronology));
}

- (OrgJodaTimeDateTime *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)newZone {
  return [self withChronologyWithOrgJodaTimeChronology:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:newZone]];
}

- (OrgJodaTimeDateTime *)withZoneRetainFieldsWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)newZone {
  newZone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(newZone);
  OrgJodaTimeDateTimeZone *originalZone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_([self getZone]);
  if (newZone == originalZone) {
    return self;
  }
  jlong millis = [((OrgJodaTimeDateTimeZone *) nil_chk(originalZone)) getMillisKeepLocalWithOrgJodaTimeDateTimeZone:newZone withLong:[self getMillis]];
  return new_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(millis, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:newZone]);
}

- (OrgJodaTimeDateTime *)withEarlierOffsetAtOverlap {
  jlong newMillis = [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) adjustOffsetWithLong:[self getMillis] withBoolean:false];
  return [self withMillisWithLong:newMillis];
}

- (OrgJodaTimeDateTime *)withLaterOffsetAtOverlap {
  jlong newMillis = [((OrgJodaTimeDateTimeZone *) nil_chk([self getZone])) adjustOffsetWithLong:[self getMillis] withBoolean:true];
  return [self withMillisWithLong:newMillis];
}

- (OrgJodaTimeDateTime *)withDateWithInt:(jint)year
                                 withInt:(jint)monthOfYear
                                 withInt:(jint)dayOfMonth {
  OrgJodaTimeChronology *chrono = [self getChronology];
  jlong localInstant = [((OrgJodaTimeChronology *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) withUTC])) getDateTimeMillisWithInt:year withInt:monthOfYear withInt:dayOfMonth withInt:[self getMillisOfDay]];
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeZone *) nil_chk([chrono getZone])) convertLocalToUTCWithLong:localInstant withBoolean:false withLong:[self getMillis]]];
}

- (OrgJodaTimeDateTime *)withDateWithOrgJodaTimeLocalDate:(OrgJodaTimeLocalDate *)date {
  return [self withDateWithInt:[((OrgJodaTimeLocalDate *) nil_chk(date)) getYear] withInt:[date getMonthOfYear] withInt:[date getDayOfMonth]];
}

- (OrgJodaTimeDateTime *)withTimeWithInt:(jint)hourOfDay
                                 withInt:(jint)minuteOfHour
                                 withInt:(jint)secondOfMinute
                                 withInt:(jint)millisOfSecond {
  OrgJodaTimeChronology *chrono = [self getChronology];
  jlong localInstant = [((OrgJodaTimeChronology *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) withUTC])) getDateTimeMillisWithInt:[self getYear] withInt:[self getMonthOfYear] withInt:[self getDayOfMonth] withInt:hourOfDay withInt:minuteOfHour withInt:secondOfMinute withInt:millisOfSecond];
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeZone *) nil_chk([chrono getZone])) convertLocalToUTCWithLong:localInstant withBoolean:false withLong:[self getMillis]]];
}

- (OrgJodaTimeDateTime *)withTimeWithOrgJodaTimeLocalTime:(OrgJodaTimeLocalTime *)time {
  return [self withTimeWithInt:[((OrgJodaTimeLocalTime *) nil_chk(time)) getHourOfDay] withInt:[time getMinuteOfHour] withInt:[time getSecondOfMinute] withInt:[time getMillisOfSecond]];
}

- (OrgJodaTimeDateTime *)withTimeAtStartOfDay {
  return [((OrgJodaTimeLocalDate *) nil_chk([self toLocalDate])) toDateTimeAtStartOfDayWithOrgJodaTimeDateTimeZone:[self getZone]];
}

- (OrgJodaTimeDateTime *)withFieldsWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  if (partial == nil) {
    return self;
  }
  return [self withMillisWithLong:[((OrgJodaTimeChronology *) nil_chk([self getChronology])) setWithOrgJodaTimeReadablePartial:partial withLong:[self getMillis]]];
}

- (OrgJodaTimeDateTime *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                           withInt:(jint)value {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field must not be null");
  }
  jlong instant = [((OrgJodaTimeDateTimeField *) nil_chk([fieldType getFieldWithOrgJodaTimeChronology:[self getChronology]])) setWithLong:[self getMillis] withInt:value];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                withInt:(jint)amount {
  if (fieldType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field must not be null");
  }
  if (amount == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([fieldType getFieldWithOrgJodaTimeChronology:[self getChronology]])) addWithLong:[self getMillis] withInt:amount];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)withDurationAddedWithLong:(jlong)durationToAdd
                                           withInt:(jint)scalar {
  if (durationToAdd == 0 || scalar == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) addWithLong:[self getMillis] withLong:durationToAdd withInt:scalar];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)withDurationAddedWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)durationToAdd
                                                                  withInt:(jint)scalar {
  if (durationToAdd == nil || scalar == 0) {
    return self;
  }
  return [self withDurationAddedWithLong:[durationToAdd getMillis] withInt:scalar];
}

- (OrgJodaTimeDateTime *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                              withInt:(jint)scalar {
  if (period == nil || scalar == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) addWithOrgJodaTimeReadablePeriod:period withLong:[self getMillis] withInt:scalar];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)plusWithLong:(jlong)duration {
  return [self withDurationAddedWithLong:duration withInt:1];
}

- (OrgJodaTimeDateTime *)plusWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration {
  return [self withDurationAddedWithOrgJodaTimeReadableDuration:duration withInt:1];
}

- (OrgJodaTimeDateTime *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:1];
}

- (OrgJodaTimeDateTime *)plusYearsWithInt:(jint)years {
  if (years == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) years])) addWithLong:[self getMillis] withInt:years];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)plusMonthsWithInt:(jint)months {
  if (months == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) months])) addWithLong:[self getMillis] withInt:months];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)plusWeeksWithInt:(jint)weeks {
  if (weeks == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weeks])) addWithLong:[self getMillis] withInt:weeks];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)plusDaysWithInt:(jint)days {
  if (days == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) addWithLong:[self getMillis] withInt:days];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)plusHoursWithInt:(jint)hours {
  if (hours == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hours])) addWithLong:[self getMillis] withInt:hours];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)plusMinutesWithInt:(jint)minutes {
  if (minutes == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minutes])) addWithLong:[self getMillis] withInt:minutes];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)plusSecondsWithInt:(jint)seconds {
  if (seconds == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) seconds])) addWithLong:[self getMillis] withInt:seconds];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)plusMillisWithInt:(jint)millis {
  if (millis == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millis])) addWithLong:[self getMillis] withInt:millis];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)minusWithLong:(jlong)duration {
  return [self withDurationAddedWithLong:duration withInt:-1];
}

- (OrgJodaTimeDateTime *)minusWithOrgJodaTimeReadableDuration:(id<OrgJodaTimeReadableDuration>)duration {
  return [self withDurationAddedWithOrgJodaTimeReadableDuration:duration withInt:-1];
}

- (OrgJodaTimeDateTime *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:-1];
}

- (OrgJodaTimeDateTime *)minusYearsWithInt:(jint)years {
  if (years == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) years])) subtractWithLong:[self getMillis] withInt:years];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)minusMonthsWithInt:(jint)months {
  if (months == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) months])) subtractWithLong:[self getMillis] withInt:months];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)minusWeeksWithInt:(jint)weeks {
  if (weeks == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weeks])) subtractWithLong:[self getMillis] withInt:weeks];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)minusDaysWithInt:(jint)days {
  if (days == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) days])) subtractWithLong:[self getMillis] withInt:days];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)minusHoursWithInt:(jint)hours {
  if (hours == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hours])) subtractWithLong:[self getMillis] withInt:hours];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)minusMinutesWithInt:(jint)minutes {
  if (minutes == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minutes])) subtractWithLong:[self getMillis] withInt:minutes];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)minusSecondsWithInt:(jint)seconds {
  if (seconds == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) seconds])) subtractWithLong:[self getMillis] withInt:seconds];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime *)minusMillisWithInt:(jint)millis {
  if (millis == 0) {
    return self;
  }
  jlong instant = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millis])) subtractWithLong:[self getMillis] withInt:millis];
  return [self withMillisWithLong:instant];
}

- (OrgJodaTimeDateTime_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  if (type == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The DateTimeFieldType must not be null");
  }
  OrgJodaTimeDateTimeField *field = [type getFieldWithOrgJodaTimeChronology:[self getChronology]];
  if ([((OrgJodaTimeDateTimeField *) nil_chk(field)) isSupported] == false) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Field '", type, @"' is not supported"));
  }
  return new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, field);
}

- (OrgJodaTimeDateMidnight *)toDateMidnight {
  return new_OrgJodaTimeDateMidnight_initWithLong_withOrgJodaTimeChronology_([self getMillis], [self getChronology]);
}

- (OrgJodaTimeYearMonthDay *)toYearMonthDay {
  return new_OrgJodaTimeYearMonthDay_initWithLong_withOrgJodaTimeChronology_([self getMillis], [self getChronology]);
}

- (OrgJodaTimeTimeOfDay *)toTimeOfDay {
  return new_OrgJodaTimeTimeOfDay_initWithLong_withOrgJodaTimeChronology_([self getMillis], [self getChronology]);
}

- (OrgJodaTimeLocalDateTime *)toLocalDateTime {
  return new_OrgJodaTimeLocalDateTime_initWithLong_withOrgJodaTimeChronology_([self getMillis], [self getChronology]);
}

- (OrgJodaTimeLocalDate *)toLocalDate {
  return new_OrgJodaTimeLocalDate_initWithLong_withOrgJodaTimeChronology_([self getMillis], [self getChronology]);
}

- (OrgJodaTimeLocalTime *)toLocalTime {
  return new_OrgJodaTimeLocalTime_initWithLong_withOrgJodaTimeChronology_([self getMillis], [self getChronology]);
}

- (OrgJodaTimeDateTime *)withEraWithInt:(jint)era {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) era])) setWithLong:[self getMillis] withInt:era]];
}

- (OrgJodaTimeDateTime *)withCenturyOfEraWithInt:(jint)centuryOfEra {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) centuryOfEra])) setWithLong:[self getMillis] withInt:centuryOfEra]];
}

- (OrgJodaTimeDateTime *)withYearOfEraWithInt:(jint)yearOfEra {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfEra])) setWithLong:[self getMillis] withInt:yearOfEra]];
}

- (OrgJodaTimeDateTime *)withYearOfCenturyWithInt:(jint)yearOfCentury {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfCentury])) setWithLong:[self getMillis] withInt:yearOfCentury]];
}

- (OrgJodaTimeDateTime *)withYearWithInt:(jint)year {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) year])) setWithLong:[self getMillis] withInt:year]];
}

- (OrgJodaTimeDateTime *)withWeekyearWithInt:(jint)weekyear {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear])) setWithLong:[self getMillis] withInt:weekyear]];
}

- (OrgJodaTimeDateTime *)withMonthOfYearWithInt:(jint)monthOfYear {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) setWithLong:[self getMillis] withInt:monthOfYear]];
}

- (OrgJodaTimeDateTime *)withWeekOfWeekyearWithInt:(jint)weekOfWeekyear {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear])) setWithLong:[self getMillis] withInt:weekOfWeekyear]];
}

- (OrgJodaTimeDateTime *)withDayOfYearWithInt:(jint)dayOfYear {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear])) setWithLong:[self getMillis] withInt:dayOfYear]];
}

- (OrgJodaTimeDateTime *)withDayOfMonthWithInt:(jint)dayOfMonth {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) setWithLong:[self getMillis] withInt:dayOfMonth]];
}

- (OrgJodaTimeDateTime *)withDayOfWeekWithInt:(jint)dayOfWeek {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek])) setWithLong:[self getMillis] withInt:dayOfWeek]];
}

- (OrgJodaTimeDateTime *)withHourOfDayWithInt:(jint)hour {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay])) setWithLong:[self getMillis] withInt:hour]];
}

- (OrgJodaTimeDateTime *)withMinuteOfHourWithInt:(jint)minute {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour])) setWithLong:[self getMillis] withInt:minute]];
}

- (OrgJodaTimeDateTime *)withSecondOfMinuteWithInt:(jint)second {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute])) setWithLong:[self getMillis] withInt:second]];
}

- (OrgJodaTimeDateTime *)withMillisOfSecondWithInt:(jint)millis {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond])) setWithLong:[self getMillis] withInt:millis]];
}

- (OrgJodaTimeDateTime *)withMillisOfDayWithInt:(jint)millis {
  return [self withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay])) setWithLong:[self getMillis] withInt:millis]];
}

- (OrgJodaTimeDateTime_Property *)era {
  return new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) era]);
}

- (OrgJodaTimeDateTime_Property *)centuryOfEra {
  return new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) centuryOfEra]);
}

- (OrgJodaTimeDateTime_Property *)yearOfCentury {
  return new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfCentury]);
}

- (OrgJodaTimeDateTime_Property *)yearOfEra {
  return new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) yearOfEra]);
}

- (OrgJodaTimeDateTime_Property *)year {
  return new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) year]);
}

- (OrgJodaTimeDateTime_Property *)weekyear {
  return new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekyear]);
}

- (OrgJodaTimeDateTime_Property *)monthOfYear {
  return new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear]);
}

- (OrgJodaTimeDateTime_Property *)weekOfWeekyear {
  return new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) weekOfWeekyear]);
}

- (OrgJodaTimeDateTime_Property *)dayOfYear {
  return new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfYear]);
}

- (OrgJodaTimeDateTime_Property *)dayOfMonth {
  return new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth]);
}

- (OrgJodaTimeDateTime_Property *)dayOfWeek {
  return new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfWeek]);
}

- (OrgJodaTimeDateTime_Property *)hourOfDay {
  return new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) hourOfDay]);
}

- (OrgJodaTimeDateTime_Property *)minuteOfDay {
  return new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfDay]);
}

- (OrgJodaTimeDateTime_Property *)minuteOfHour {
  return new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) minuteOfHour]);
}

- (OrgJodaTimeDateTime_Property *)secondOfDay {
  return new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfDay]);
}

- (OrgJodaTimeDateTime_Property *)secondOfMinute {
  return new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) secondOfMinute]);
}

- (OrgJodaTimeDateTime_Property *)millisOfDay {
  return new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfDay]);
}

- (OrgJodaTimeDateTime_Property *)millisOfSecond {
  return new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, [((OrgJodaTimeChronology *) nil_chk([self getChronology])) millisOfSecond]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJodaTimeDateTime;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x9, 3, 4, -1, -1, 5, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x9, 3, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 9, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 10, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 12, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 13, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 14, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 15, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 16, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 17, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 18, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 19, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 20, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 21, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 22, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 22, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 23, 7, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 24, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 26, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 27, 29, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 30, 32, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 33, 34, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 35, 36, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 39, 40, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 39, 41, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 42, 43, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 44, 7, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 44, 45, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 44, 46, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 49, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 50, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 51, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 52, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 53, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 54, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 55, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 56, 7, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 56, 45, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 56, 46, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 57, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 58, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 59, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 60, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 61, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 62, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 63, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 64, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime_Property;", 0x1, 65, 66, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateMidnight;", 0x1, -1, -1, -1, -1, 67, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, -1, -1, -1, -1, 68, -1 },
    { NULL, "LOrgJodaTimeTimeOfDay;", 0x1, -1, -1, -1, -1, 69, -1 },
    { NULL, "LOrgJodaTimeLocalDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 70, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 71, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 72, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 73, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 74, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 75, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 76, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 77, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 78, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 79, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 80, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 81, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 82, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 83, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 84, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 85, 48, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(now);
  methods[1].selector = @selector(nowWithOrgJodaTimeDateTimeZone:);
  methods[2].selector = @selector(nowWithOrgJodaTimeChronology:);
  methods[3].selector = @selector(parseWithNSString:);
  methods[4].selector = @selector(parseWithNSString:withOrgJodaTimeFormatDateTimeFormatter:);
  methods[5].selector = @selector(init);
  methods[6].selector = @selector(initWithOrgJodaTimeDateTimeZone:);
  methods[7].selector = @selector(initWithOrgJodaTimeChronology:);
  methods[8].selector = @selector(initWithLong:);
  methods[9].selector = @selector(initWithLong:withOrgJodaTimeDateTimeZone:);
  methods[10].selector = @selector(initWithLong:withOrgJodaTimeChronology:);
  methods[11].selector = @selector(initWithId:);
  methods[12].selector = @selector(initWithId:withOrgJodaTimeDateTimeZone:);
  methods[13].selector = @selector(initWithId:withOrgJodaTimeChronology:);
  methods[14].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:);
  methods[15].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withOrgJodaTimeDateTimeZone:);
  methods[16].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withOrgJodaTimeChronology:);
  methods[17].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withInt:);
  methods[18].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withInt:withOrgJodaTimeDateTimeZone:);
  methods[19].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withInt:withOrgJodaTimeChronology:);
  methods[20].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:);
  methods[21].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withOrgJodaTimeDateTimeZone:);
  methods[22].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withOrgJodaTimeChronology:);
  methods[23].selector = @selector(toDateTime);
  methods[24].selector = @selector(toDateTimeISO);
  methods[25].selector = @selector(toDateTimeWithOrgJodaTimeDateTimeZone:);
  methods[26].selector = @selector(toDateTimeWithOrgJodaTimeChronology:);
  methods[27].selector = @selector(withMillisWithLong:);
  methods[28].selector = @selector(withChronologyWithOrgJodaTimeChronology:);
  methods[29].selector = @selector(withZoneWithOrgJodaTimeDateTimeZone:);
  methods[30].selector = @selector(withZoneRetainFieldsWithOrgJodaTimeDateTimeZone:);
  methods[31].selector = @selector(withEarlierOffsetAtOverlap);
  methods[32].selector = @selector(withLaterOffsetAtOverlap);
  methods[33].selector = @selector(withDateWithInt:withInt:withInt:);
  methods[34].selector = @selector(withDateWithOrgJodaTimeLocalDate:);
  methods[35].selector = @selector(withTimeWithInt:withInt:withInt:withInt:);
  methods[36].selector = @selector(withTimeWithOrgJodaTimeLocalTime:);
  methods[37].selector = @selector(withTimeAtStartOfDay);
  methods[38].selector = @selector(withFieldsWithOrgJodaTimeReadablePartial:);
  methods[39].selector = @selector(withFieldWithOrgJodaTimeDateTimeFieldType:withInt:);
  methods[40].selector = @selector(withFieldAddedWithOrgJodaTimeDurationFieldType:withInt:);
  methods[41].selector = @selector(withDurationAddedWithLong:withInt:);
  methods[42].selector = @selector(withDurationAddedWithOrgJodaTimeReadableDuration:withInt:);
  methods[43].selector = @selector(withPeriodAddedWithOrgJodaTimeReadablePeriod:withInt:);
  methods[44].selector = @selector(plusWithLong:);
  methods[45].selector = @selector(plusWithOrgJodaTimeReadableDuration:);
  methods[46].selector = @selector(plusWithOrgJodaTimeReadablePeriod:);
  methods[47].selector = @selector(plusYearsWithInt:);
  methods[48].selector = @selector(plusMonthsWithInt:);
  methods[49].selector = @selector(plusWeeksWithInt:);
  methods[50].selector = @selector(plusDaysWithInt:);
  methods[51].selector = @selector(plusHoursWithInt:);
  methods[52].selector = @selector(plusMinutesWithInt:);
  methods[53].selector = @selector(plusSecondsWithInt:);
  methods[54].selector = @selector(plusMillisWithInt:);
  methods[55].selector = @selector(minusWithLong:);
  methods[56].selector = @selector(minusWithOrgJodaTimeReadableDuration:);
  methods[57].selector = @selector(minusWithOrgJodaTimeReadablePeriod:);
  methods[58].selector = @selector(minusYearsWithInt:);
  methods[59].selector = @selector(minusMonthsWithInt:);
  methods[60].selector = @selector(minusWeeksWithInt:);
  methods[61].selector = @selector(minusDaysWithInt:);
  methods[62].selector = @selector(minusHoursWithInt:);
  methods[63].selector = @selector(minusMinutesWithInt:);
  methods[64].selector = @selector(minusSecondsWithInt:);
  methods[65].selector = @selector(minusMillisWithInt:);
  methods[66].selector = @selector(propertyWithOrgJodaTimeDateTimeFieldType:);
  methods[67].selector = @selector(toDateMidnight);
  methods[68].selector = @selector(toYearMonthDay);
  methods[69].selector = @selector(toTimeOfDay);
  methods[70].selector = @selector(toLocalDateTime);
  methods[71].selector = @selector(toLocalDate);
  methods[72].selector = @selector(toLocalTime);
  methods[73].selector = @selector(withEraWithInt:);
  methods[74].selector = @selector(withCenturyOfEraWithInt:);
  methods[75].selector = @selector(withYearOfEraWithInt:);
  methods[76].selector = @selector(withYearOfCenturyWithInt:);
  methods[77].selector = @selector(withYearWithInt:);
  methods[78].selector = @selector(withWeekyearWithInt:);
  methods[79].selector = @selector(withMonthOfYearWithInt:);
  methods[80].selector = @selector(withWeekOfWeekyearWithInt:);
  methods[81].selector = @selector(withDayOfYearWithInt:);
  methods[82].selector = @selector(withDayOfMonthWithInt:);
  methods[83].selector = @selector(withDayOfWeekWithInt:);
  methods[84].selector = @selector(withHourOfDayWithInt:);
  methods[85].selector = @selector(withMinuteOfHourWithInt:);
  methods[86].selector = @selector(withSecondOfMinuteWithInt:);
  methods[87].selector = @selector(withMillisOfSecondWithInt:);
  methods[88].selector = @selector(withMillisOfDayWithInt:);
  methods[89].selector = @selector(era);
  methods[90].selector = @selector(centuryOfEra);
  methods[91].selector = @selector(yearOfCentury);
  methods[92].selector = @selector(yearOfEra);
  methods[93].selector = @selector(year);
  methods[94].selector = @selector(weekyear);
  methods[95].selector = @selector(monthOfYear);
  methods[96].selector = @selector(weekOfWeekyear);
  methods[97].selector = @selector(dayOfYear);
  methods[98].selector = @selector(dayOfMonth);
  methods[99].selector = @selector(dayOfWeek);
  methods[100].selector = @selector(hourOfDay);
  methods[101].selector = @selector(minuteOfDay);
  methods[102].selector = @selector(minuteOfHour);
  methods[103].selector = @selector(secondOfDay);
  methods[104].selector = @selector(secondOfMinute);
  methods[105].selector = @selector(millisOfDay);
  methods[106].selector = @selector(millisOfSecond);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeDateTime_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "now", "LOrgJodaTimeDateTimeZone;", "LOrgJodaTimeChronology;", "parse", "LNSString;", (void *)&OrgJodaTimeDateTime__Annotations$0, "LNSString;LOrgJodaTimeFormatDateTimeFormatter;", "J", "JLOrgJodaTimeDateTimeZone;", "JLOrgJodaTimeChronology;", "LNSObject;", "LNSObject;LOrgJodaTimeDateTimeZone;", "LNSObject;LOrgJodaTimeChronology;", "IIIII", "IIIIILOrgJodaTimeDateTimeZone;", "IIIIILOrgJodaTimeChronology;", "IIIIII", "IIIIIILOrgJodaTimeDateTimeZone;", "IIIIIILOrgJodaTimeChronology;", "IIIIIII", "IIIIIIILOrgJodaTimeDateTimeZone;", "IIIIIIILOrgJodaTimeChronology;", "toDateTime", "withMillis", "withChronology", "withZone", "withZoneRetainFields", "withDate", "III", "LOrgJodaTimeLocalDate;", "withTime", "IIII", "LOrgJodaTimeLocalTime;", "withFields", "LOrgJodaTimeReadablePartial;", "withField", "LOrgJodaTimeDateTimeFieldType;I", "withFieldAdded", "LOrgJodaTimeDurationFieldType;I", "withDurationAdded", "JI", "LOrgJodaTimeReadableDuration;I", "withPeriodAdded", "LOrgJodaTimeReadablePeriod;I", "plus", "LOrgJodaTimeReadableDuration;", "LOrgJodaTimeReadablePeriod;", "plusYears", "I", "plusMonths", "plusWeeks", "plusDays", "plusHours", "plusMinutes", "plusSeconds", "plusMillis", "minus", "minusYears", "minusMonths", "minusWeeks", "minusDays", "minusHours", "minusMinutes", "minusSeconds", "minusMillis", "property", "LOrgJodaTimeDateTimeFieldType;", (void *)&OrgJodaTimeDateTime__Annotations$1, (void *)&OrgJodaTimeDateTime__Annotations$2, (void *)&OrgJodaTimeDateTime__Annotations$3, "withEra", "withCenturyOfEra", "withYearOfEra", "withYearOfCentury", "withYear", "withWeekyear", "withMonthOfYear", "withWeekOfWeekyear", "withDayOfYear", "withDayOfMonth", "withDayOfWeek", "withHourOfDay", "withMinuteOfHour", "withSecondOfMinute", "withMillisOfSecond", "withMillisOfDay", "LOrgJodaTimeDateTime_Property;" };
  static const J2ObjcClassInfo _OrgJodaTimeDateTime = { "DateTime", "org.joda.time", ptrTable, methods, fields, 7, 0x11, 107, 1, -1, 86, -1, -1, -1 };
  return &_OrgJodaTimeDateTime;
}

@end

OrgJodaTimeDateTime *OrgJodaTimeDateTime_now() {
  OrgJodaTimeDateTime_initialize();
  return new_OrgJodaTimeDateTime_init();
}

OrgJodaTimeDateTime *OrgJodaTimeDateTime_nowWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeDateTime_initialize();
  if (zone == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Zone must not be null");
  }
  return new_OrgJodaTimeDateTime_initWithOrgJodaTimeDateTimeZone_(zone);
}

OrgJodaTimeDateTime *OrgJodaTimeDateTime_nowWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  OrgJodaTimeDateTime_initialize();
  if (chronology == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Chronology must not be null");
  }
  return new_OrgJodaTimeDateTime_initWithOrgJodaTimeChronology_(chronology);
}

OrgJodaTimeDateTime *OrgJodaTimeDateTime_parseWithNSString_(NSString *str) {
  OrgJodaTimeDateTime_initialize();
  return OrgJodaTimeDateTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(str, [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatISODateTimeFormat_dateTimeParser())) withOffsetParsed]);
}

OrgJodaTimeDateTime *OrgJodaTimeDateTime_parseWithNSString_withOrgJodaTimeFormatDateTimeFormatter_(NSString *str, OrgJodaTimeFormatDateTimeFormatter *formatter) {
  OrgJodaTimeDateTime_initialize();
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(formatter)) parseDateTimeWithNSString:str];
}

void OrgJodaTimeDateTime_init(OrgJodaTimeDateTime *self) {
  OrgJodaTimeBaseBaseDateTime_init(self);
}

OrgJodaTimeDateTime *new_OrgJodaTimeDateTime_init() {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTime, init)
}

OrgJodaTimeDateTime *create_OrgJodaTimeDateTime_init() {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTime, init)
}

void OrgJodaTimeDateTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTime *self, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeBaseBaseDateTime_initWithOrgJodaTimeDateTimeZone_(self, zone);
}

OrgJodaTimeDateTime *new_OrgJodaTimeDateTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTime, initWithOrgJodaTimeDateTimeZone_, zone)
}

OrgJodaTimeDateTime *create_OrgJodaTimeDateTime_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTime, initWithOrgJodaTimeDateTimeZone_, zone)
}

void OrgJodaTimeDateTime_initWithOrgJodaTimeChronology_(OrgJodaTimeDateTime *self, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseDateTime_initWithOrgJodaTimeChronology_(self, chronology);
}

OrgJodaTimeDateTime *new_OrgJodaTimeDateTime_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTime, initWithOrgJodaTimeChronology_, chronology)
}

OrgJodaTimeDateTime *create_OrgJodaTimeDateTime_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTime, initWithOrgJodaTimeChronology_, chronology)
}

void OrgJodaTimeDateTime_initWithLong_(OrgJodaTimeDateTime *self, jlong instant) {
  OrgJodaTimeBaseBaseDateTime_initWithLong_(self, instant);
}

OrgJodaTimeDateTime *new_OrgJodaTimeDateTime_initWithLong_(jlong instant) {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTime, initWithLong_, instant)
}

OrgJodaTimeDateTime *create_OrgJodaTimeDateTime_initWithLong_(jlong instant) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTime, initWithLong_, instant)
}

void OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTime *self, jlong instant, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeBaseBaseDateTime_initWithLong_withOrgJodaTimeDateTimeZone_(self, instant, zone);
}

OrgJodaTimeDateTime *new_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeDateTimeZone_(jlong instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTime, initWithLong_withOrgJodaTimeDateTimeZone_, instant, zone)
}

OrgJodaTimeDateTime *create_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeDateTimeZone_(jlong instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTime, initWithLong_withOrgJodaTimeDateTimeZone_, instant, zone)
}

void OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(OrgJodaTimeDateTime *self, jlong instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseDateTime_initWithLong_withOrgJodaTimeChronology_(self, instant, chronology);
}

OrgJodaTimeDateTime *new_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTime, initWithLong_withOrgJodaTimeChronology_, instant, chronology)
}

OrgJodaTimeDateTime *create_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTime, initWithLong_withOrgJodaTimeChronology_, instant, chronology)
}

void OrgJodaTimeDateTime_initWithId_(OrgJodaTimeDateTime *self, id instant) {
  OrgJodaTimeBaseBaseDateTime_initWithId_withOrgJodaTimeChronology_(self, instant, nil);
}

OrgJodaTimeDateTime *new_OrgJodaTimeDateTime_initWithId_(id instant) {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTime, initWithId_, instant)
}

OrgJodaTimeDateTime *create_OrgJodaTimeDateTime_initWithId_(id instant) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTime, initWithId_, instant)
}

void OrgJodaTimeDateTime_initWithId_withOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTime *self, id instant, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeBaseBaseDateTime_initWithId_withOrgJodaTimeDateTimeZone_(self, instant, zone);
}

OrgJodaTimeDateTime *new_OrgJodaTimeDateTime_initWithId_withOrgJodaTimeDateTimeZone_(id instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTime, initWithId_withOrgJodaTimeDateTimeZone_, instant, zone)
}

OrgJodaTimeDateTime *create_OrgJodaTimeDateTime_initWithId_withOrgJodaTimeDateTimeZone_(id instant, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTime, initWithId_withOrgJodaTimeDateTimeZone_, instant, zone)
}

void OrgJodaTimeDateTime_initWithId_withOrgJodaTimeChronology_(OrgJodaTimeDateTime *self, id instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseDateTime_initWithId_withOrgJodaTimeChronology_(self, instant, OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology));
}

OrgJodaTimeDateTime *new_OrgJodaTimeDateTime_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTime, initWithId_withOrgJodaTimeChronology_, instant, chronology)
}

OrgJodaTimeDateTime *create_OrgJodaTimeDateTime_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTime, initWithId_withOrgJodaTimeChronology_, instant, chronology)
}

void OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_(OrgJodaTimeDateTime *self, jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour) {
  OrgJodaTimeBaseBaseDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, 0, 0);
}

OrgJodaTimeDateTime *new_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour) {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTime, initWithInt_withInt_withInt_withInt_withInt_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour)
}

OrgJodaTimeDateTime *create_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTime, initWithInt_withInt_withInt_withInt_withInt_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour)
}

void OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTime *self, jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeBaseBaseDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, 0, 0, zone);
}

OrgJodaTimeDateTime *new_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTime, initWithInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, zone)
}

OrgJodaTimeDateTime *create_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTime, initWithInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, zone)
}

void OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeDateTime *self, jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, 0, 0, chronology);
}

OrgJodaTimeDateTime *new_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTime, initWithInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, chronology)
}

OrgJodaTimeDateTime *create_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTime, initWithInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, chronology)
}

void OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_(OrgJodaTimeDateTime *self, jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute) {
  OrgJodaTimeBaseBaseDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, 0);
}

OrgJodaTimeDateTime *new_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute) {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute)
}

OrgJodaTimeDateTime *create_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute)
}

void OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTime *self, jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeBaseBaseDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, 0, zone);
}

OrgJodaTimeDateTime *new_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, zone)
}

OrgJodaTimeDateTime *create_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, zone)
}

void OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeDateTime *self, jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, 0, chronology);
}

OrgJodaTimeDateTime *new_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, chronology)
}

OrgJodaTimeDateTime *create_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, chronology)
}

void OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(OrgJodaTimeDateTime *self, jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) {
  OrgJodaTimeBaseBaseDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
}

OrgJodaTimeDateTime *new_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond)
}

OrgJodaTimeDateTime *create_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond)
}

void OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTime *self, jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeBaseBaseDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, zone);
}

OrgJodaTimeDateTime *new_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, zone)
}

OrgJodaTimeDateTime *create_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeDateTimeZone_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, zone)
}

void OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeDateTime *self, jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBaseDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(self, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology);
}

OrgJodaTimeDateTime *new_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology)
}

OrgJodaTimeDateTime *create_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, jint hourOfDay, jint minuteOfHour, jint secondOfMinute, jint millisOfSecond, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTime, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_, year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology)
}

IOSObjectArray *OrgJodaTimeDateTime__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_OrgJodaConvertFromString() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgJodaTimeDateTime__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgJodaTimeDateTime__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgJodaTimeDateTime__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeDateTime)

@implementation OrgJodaTimeDateTime_Property

- (instancetype)initWithOrgJodaTimeDateTime:(OrgJodaTimeDateTime *)instant
               withOrgJodaTimeDateTimeField:(OrgJodaTimeDateTimeField *)field {
  OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(self, instant, field);
  return self;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos {
  [((JavaIoObjectOutputStream *) nil_chk(oos)) writeObjectWithId:iInstant_];
  [oos writeObjectWithId:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) getType]];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)oos {
  iInstant_ = (OrgJodaTimeDateTime *) cast_chk([((JavaIoObjectInputStream *) nil_chk(oos)) readObject], [OrgJodaTimeDateTime class]);
  OrgJodaTimeDateTimeFieldType *type = (OrgJodaTimeDateTimeFieldType *) cast_chk([oos readObject], [OrgJodaTimeDateTimeFieldType class]);
  iField_ = [((OrgJodaTimeDateTimeFieldType *) nil_chk(type)) getFieldWithOrgJodaTimeChronology:[((OrgJodaTimeDateTime *) nil_chk(iInstant_)) getChronology]];
}

- (OrgJodaTimeDateTimeField *)getField {
  return iField_;
}

- (jlong)getMillis {
  return [((OrgJodaTimeDateTime *) nil_chk(iInstant_)) getMillis];
}

- (OrgJodaTimeChronology *)getChronology {
  return [((OrgJodaTimeDateTime *) nil_chk(iInstant_)) getChronology];
}

- (OrgJodaTimeDateTime *)getDateTime {
  return iInstant_;
}

- (OrgJodaTimeDateTime *)addToCopyWithInt:(jint)value {
  return [((OrgJodaTimeDateTime *) nil_chk(iInstant_)) withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:[iInstant_ getMillis] withInt:value]];
}

- (OrgJodaTimeDateTime *)addToCopyWithLong:(jlong)value {
  return [((OrgJodaTimeDateTime *) nil_chk(iInstant_)) withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWithLong:[iInstant_ getMillis] withLong:value]];
}

- (OrgJodaTimeDateTime *)addWrapFieldToCopyWithInt:(jint)value {
  return [((OrgJodaTimeDateTime *) nil_chk(iInstant_)) withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) addWrapFieldWithLong:[iInstant_ getMillis] withInt:value]];
}

- (OrgJodaTimeDateTime *)setCopyWithInt:(jint)value {
  return [((OrgJodaTimeDateTime *) nil_chk(iInstant_)) withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:[iInstant_ getMillis] withInt:value]];
}

- (OrgJodaTimeDateTime *)setCopyWithNSString:(NSString *)text
                          withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTime *) nil_chk(iInstant_)) withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) setWithLong:[iInstant_ getMillis] withNSString:text withJavaUtilLocale:locale]];
}

- (OrgJodaTimeDateTime *)setCopyWithNSString:(NSString *)text {
  return [self setCopyWithNSString:text withJavaUtilLocale:nil];
}

- (OrgJodaTimeDateTime *)withMaximumValue {
  @try {
    return [self setCopyWithInt:[self getMaximumValue]];
  }
  @catch (JavaLangRuntimeException *ex) {
    if (OrgJodaTimeIllegalInstantException_isIllegalInstantWithNSException_(ex)) {
      jlong beforeGap = [((OrgJodaTimeDateTimeZone *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) getZone])) previousTransitionWithLong:[self getMillis] + OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY];
      return new_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(beforeGap, [self getChronology]);
    }
    @throw ex;
  }
}

- (OrgJodaTimeDateTime *)withMinimumValue {
  @try {
    return [self setCopyWithInt:[self getMinimumValue]];
  }
  @catch (JavaLangRuntimeException *ex) {
    if (OrgJodaTimeIllegalInstantException_isIllegalInstantWithNSException_(ex)) {
      jlong afterGap = [((OrgJodaTimeDateTimeZone *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) getZone])) nextTransitionWithLong:[self getMillis] - OrgJodaTimeDateTimeConstants_MILLIS_PER_DAY];
      return new_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(afterGap, [self getChronology]);
    }
    @throw ex;
  }
}

- (OrgJodaTimeDateTime *)roundFloorCopy {
  return [((OrgJodaTimeDateTime *) nil_chk(iInstant_)) withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundFloorWithLong:[iInstant_ getMillis]]];
}

- (OrgJodaTimeDateTime *)roundCeilingCopy {
  return [((OrgJodaTimeDateTime *) nil_chk(iInstant_)) withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundCeilingWithLong:[iInstant_ getMillis]]];
}

- (OrgJodaTimeDateTime *)roundHalfFloorCopy {
  return [((OrgJodaTimeDateTime *) nil_chk(iInstant_)) withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfFloorWithLong:[iInstant_ getMillis]]];
}

- (OrgJodaTimeDateTime *)roundHalfCeilingCopy {
  return [((OrgJodaTimeDateTime *) nil_chk(iInstant_)) withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfCeilingWithLong:[iInstant_ getMillis]]];
}

- (OrgJodaTimeDateTime *)roundHalfEvenCopy {
  return [((OrgJodaTimeDateTime *) nil_chk(iInstant_)) withMillisWithLong:[((OrgJodaTimeDateTimeField *) nil_chk(iField_)) roundHalfEvenWithLong:[iInstant_ getMillis]]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, 6, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeChronology;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 7, 9, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 11, 13, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeDateTime:withOrgJodaTimeDateTimeField:);
  methods[1].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[2].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[3].selector = @selector(getField);
  methods[4].selector = @selector(getMillis);
  methods[5].selector = @selector(getChronology);
  methods[6].selector = @selector(getDateTime);
  methods[7].selector = @selector(addToCopyWithInt:);
  methods[8].selector = @selector(addToCopyWithLong:);
  methods[9].selector = @selector(addWrapFieldToCopyWithInt:);
  methods[10].selector = @selector(setCopyWithInt:);
  methods[11].selector = @selector(setCopyWithNSString:withJavaUtilLocale:);
  methods[12].selector = @selector(setCopyWithNSString:);
  methods[13].selector = @selector(withMaximumValue);
  methods[14].selector = @selector(withMinimumValue);
  methods[15].selector = @selector(roundFloorCopy);
  methods[16].selector = @selector(roundCeilingCopy);
  methods[17].selector = @selector(roundHalfFloorCopy);
  methods[18].selector = @selector(roundHalfCeilingCopy);
  methods[19].selector = @selector(roundHalfEvenCopy);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeDateTime_Property_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iInstant_", "LOrgJodaTimeDateTime;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iField_", "LOrgJodaTimeDateTimeField;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeDateTime;LOrgJodaTimeDateTimeField;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "addToCopy", "I", "J", "addWrapFieldToCopy", "setCopy", "LNSString;LJavaUtilLocale;", "LNSString;", "LOrgJodaTimeDateTime;" };
  static const J2ObjcClassInfo _OrgJodaTimeDateTime_Property = { "Property", "org.joda.time", ptrTable, methods, fields, 7, 0x19, 20, 3, 14, -1, -1, -1, -1 };
  return &_OrgJodaTimeDateTime_Property;
}

@end

void OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeDateTime_Property *self, OrgJodaTimeDateTime *instant, OrgJodaTimeDateTimeField *field) {
  OrgJodaTimeFieldAbstractReadableInstantFieldProperty_init(self);
  self->iInstant_ = instant;
  self->iField_ = field;
}

OrgJodaTimeDateTime_Property *new_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeDateTime *instant, OrgJodaTimeDateTimeField *field) {
  J2OBJC_NEW_IMPL(OrgJodaTimeDateTime_Property, initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_, instant, field)
}

OrgJodaTimeDateTime_Property *create_OrgJodaTimeDateTime_Property_initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_(OrgJodaTimeDateTime *instant, OrgJodaTimeDateTimeField *field) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeDateTime_Property, initWithOrgJodaTimeDateTime_withOrgJodaTimeDateTimeField_, instant, field)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeDateTime_Property)
