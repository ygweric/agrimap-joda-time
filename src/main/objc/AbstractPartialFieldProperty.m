//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/field/AbstractPartialFieldProperty.java
//

#include "AbstractPartialFieldProperty.h"
#include "Chronology.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DurationField.h"
#include "FieldUtils.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "ReadableInstant.h"
#include "ReadablePartial.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/Locale.h"

@implementation OrgJodaTimeFieldAbstractPartialFieldProperty

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeFieldAbstractPartialFieldProperty_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgJodaTimeDateTimeField *)getField {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgJodaTimeDateTimeFieldType *)getFieldType {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) getType];
}

- (NSString *)getName {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) getName];
}

- (id<OrgJodaTimeReadablePartial>)getReadablePartial {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)get {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getAsString {
  return JavaLangInteger_toStringWithInt_([self get]);
}

- (NSString *)getAsText {
  return [self getAsTextWithJavaUtilLocale:nil];
}

- (NSString *)getAsTextWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) getAsTextWithOrgJodaTimeReadablePartial:[self getReadablePartial] withInt:[self get] withJavaUtilLocale:locale];
}

- (NSString *)getAsShortText {
  return [self getAsShortTextWithJavaUtilLocale:nil];
}

- (NSString *)getAsShortTextWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) getAsShortTextWithOrgJodaTimeReadablePartial:[self getReadablePartial] withInt:[self get] withJavaUtilLocale:locale];
}

- (OrgJodaTimeDurationField *)getDurationField {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) getDurationField];
}

- (OrgJodaTimeDurationField *)getRangeDurationField {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) getRangeDurationField];
}

- (jint)getMinimumValueOverall {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) getMinimumValue];
}

- (jint)getMinimumValue {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) getMinimumValueWithOrgJodaTimeReadablePartial:[self getReadablePartial]];
}

- (jint)getMaximumValueOverall {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) getMaximumValue];
}

- (jint)getMaximumValue {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) getMaximumValueWithOrgJodaTimeReadablePartial:[self getReadablePartial]];
}

- (jint)getMaximumTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) getMaximumTextLengthWithJavaUtilLocale:locale];
}

- (jint)getMaximumShortTextLengthWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) getMaximumShortTextLengthWithJavaUtilLocale:locale];
}

- (jint)compareToWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)instant {
  if (instant == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The instant must not be null");
  }
  jint thisValue = [self get];
  jint otherValue = [instant getWithOrgJodaTimeDateTimeFieldType:[self getFieldType]];
  if (thisValue < otherValue) {
    return -1;
  }
  else if (thisValue > otherValue) {
    return 1;
  }
  else {
    return 0;
  }
}

- (jint)compareToWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)partial {
  if (partial == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The instant must not be null");
  }
  jint thisValue = [self get];
  jint otherValue = [partial getWithOrgJodaTimeDateTimeFieldType:[self getFieldType]];
  if (thisValue < otherValue) {
    return -1;
  }
  else if (thisValue > otherValue) {
    return 1;
  }
  else {
    return 0;
  }
}

- (jboolean)isEqual:(id)object {
  if (self == object) {
    return true;
  }
  if ([object isKindOfClass:[OrgJodaTimeFieldAbstractPartialFieldProperty class]] == false) {
    return false;
  }
  OrgJodaTimeFieldAbstractPartialFieldProperty *other = (OrgJodaTimeFieldAbstractPartialFieldProperty *) cast_chk(object, [OrgJodaTimeFieldAbstractPartialFieldProperty class]);
  return [self get] == [((OrgJodaTimeFieldAbstractPartialFieldProperty *) nil_chk(other)) get] && [self getFieldType] == [other getFieldType] && OrgJodaTimeFieldFieldUtils_equalsWithId_withId_([((id<OrgJodaTimeReadablePartial>) nil_chk([self getReadablePartial])) getChronology], [((id<OrgJodaTimeReadablePartial>) nil_chk([other getReadablePartial])) getChronology]);
}

- (NSUInteger)hash {
  jint hash_ = 19;
  hash_ = 13 * hash_ + [self get];
  hash_ = 13 * hash_ + ((jint) [((OrgJodaTimeDateTimeFieldType *) nil_chk([self getFieldType])) hash]);
  hash_ = 13 * hash_ + ((jint) [((OrgJodaTimeChronology *) nil_chk([((id<OrgJodaTimeReadablePartial>) nil_chk([self getReadablePartial])) getChronology])) hash]);
  return hash_;
}

- (NSString *)description {
  return JreStrcat("$$C", @"Property[", [self getName], ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeFieldType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeReadablePartial;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getField);
  methods[2].selector = @selector(getFieldType);
  methods[3].selector = @selector(getName);
  methods[4].selector = @selector(getReadablePartial);
  methods[5].selector = @selector(get);
  methods[6].selector = @selector(getAsString);
  methods[7].selector = @selector(getAsText);
  methods[8].selector = @selector(getAsTextWithJavaUtilLocale:);
  methods[9].selector = @selector(getAsShortText);
  methods[10].selector = @selector(getAsShortTextWithJavaUtilLocale:);
  methods[11].selector = @selector(getDurationField);
  methods[12].selector = @selector(getRangeDurationField);
  methods[13].selector = @selector(getMinimumValueOverall);
  methods[14].selector = @selector(getMinimumValue);
  methods[15].selector = @selector(getMaximumValueOverall);
  methods[16].selector = @selector(getMaximumValue);
  methods[17].selector = @selector(getMaximumTextLengthWithJavaUtilLocale:);
  methods[18].selector = @selector(getMaximumShortTextLengthWithJavaUtilLocale:);
  methods[19].selector = @selector(compareToWithOrgJodaTimeReadableInstant:);
  methods[20].selector = @selector(compareToWithOrgJodaTimeReadablePartial:);
  methods[21].selector = @selector(isEqual:);
  methods[22].selector = @selector(hash);
  methods[23].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getAsText", "LJavaUtilLocale;", "getAsShortText", "getMaximumTextLength", "getMaximumShortTextLength", "compareTo", "LOrgJodaTimeReadableInstant;", "LOrgJodaTimeReadablePartial;", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _OrgJodaTimeFieldAbstractPartialFieldProperty = { "AbstractPartialFieldProperty", "org.joda.time.field", ptrTable, methods, NULL, 7, 0x401, 24, 0, -1, -1, -1, -1, -1 };
  return &_OrgJodaTimeFieldAbstractPartialFieldProperty;
}

@end

void OrgJodaTimeFieldAbstractPartialFieldProperty_init(OrgJodaTimeFieldAbstractPartialFieldProperty *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeFieldAbstractPartialFieldProperty)
