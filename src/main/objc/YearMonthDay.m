//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/YearMonthDay.java
//

#include "AbstractPartialFieldProperty.h"
#include "BasePartial.h"
#include "Chronology.h"
#include "DateMidnight.h"
#include "DateTime.h"
#include "DateTimeField.h"
#include "DateTimeFieldType.h"
#include "DateTimeFormatter.h"
#include "DateTimeUtils.h"
#include "DateTimeZone.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "ISOChronology.h"
#include "ISODateTimeFormat.h"
#include "Interval.h"
#include "J2ObjC_source.h"
#include "LocalDate.h"
#include "ReadablePartial.h"
#include "ReadablePeriod.h"
#include "TimeOfDay.h"
#include "YearMonthDay.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"

inline jlong OrgJodaTimeYearMonthDay_get_serialVersionUID();
#define OrgJodaTimeYearMonthDay_serialVersionUID 797544782896179LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeYearMonthDay, serialVersionUID, jlong)

inline IOSObjectArray *OrgJodaTimeYearMonthDay_get_FIELD_TYPES();
static IOSObjectArray *OrgJodaTimeYearMonthDay_FIELD_TYPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeYearMonthDay, FIELD_TYPES, IOSObjectArray *)

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeYearMonthDay__Annotations$0();

@interface OrgJodaTimeYearMonthDay_Property () {
 @public
  OrgJodaTimeYearMonthDay *iYearMonthDay_;
  jint iFieldIndex_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaTimeYearMonthDay_Property, iYearMonthDay_, OrgJodaTimeYearMonthDay *)

inline jlong OrgJodaTimeYearMonthDay_Property_get_serialVersionUID();
#define OrgJodaTimeYearMonthDay_Property_serialVersionUID 5727734012190224363LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeYearMonthDay_Property, serialVersionUID, jlong)

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeYearMonthDay_Property__Annotations$0();

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeYearMonthDay)

@implementation OrgJodaTimeYearMonthDay

+ (OrgJodaTimeYearMonthDay *)fromCalendarFieldsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  return OrgJodaTimeYearMonthDay_fromCalendarFieldsWithJavaUtilCalendar_(calendar);
}

+ (OrgJodaTimeYearMonthDay *)fromDateFieldsWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgJodaTimeYearMonthDay_fromDateFieldsWithJavaUtilDate_(date);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaTimeYearMonthDay_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeYearMonthDay_initWithOrgJodaTimeDateTimeZone_(self, zone);
  return self;
}

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeYearMonthDay_initWithOrgJodaTimeChronology_(self, chronology);
  return self;
}

- (instancetype)initWithLong:(jlong)instant {
  OrgJodaTimeYearMonthDay_initWithLong_(self, instant);
  return self;
}

- (instancetype)initWithLong:(jlong)instant
   withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeYearMonthDay_initWithLong_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

- (instancetype)initWithId:(id)instant {
  OrgJodaTimeYearMonthDay_initWithId_(self, instant);
  return self;
}

- (instancetype)initWithId:(id)instant
 withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeYearMonthDay_initWithId_withOrgJodaTimeChronology_(self, instant, chronology);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth {
  OrgJodaTimeYearMonthDay_initWithInt_withInt_withInt_(self, year, monthOfYear, dayOfMonth);
  return self;
}

- (instancetype)initWithInt:(jint)year
                    withInt:(jint)monthOfYear
                    withInt:(jint)dayOfMonth
  withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chronology {
  OrgJodaTimeYearMonthDay_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(self, year, monthOfYear, dayOfMonth, chronology);
  return self;
}

- (instancetype)initWithOrgJodaTimeYearMonthDay:(OrgJodaTimeYearMonthDay *)partial
                                   withIntArray:(IOSIntArray *)values {
  OrgJodaTimeYearMonthDay_initWithOrgJodaTimeYearMonthDay_withIntArray_(self, partial, values);
  return self;
}

- (instancetype)initWithOrgJodaTimeYearMonthDay:(OrgJodaTimeYearMonthDay *)partial
                      withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  OrgJodaTimeYearMonthDay_initWithOrgJodaTimeYearMonthDay_withOrgJodaTimeChronology_(self, partial, chrono);
  return self;
}

- (jint)size {
  return 3;
}

- (OrgJodaTimeDateTimeField *)getFieldWithInt:(jint)index
                    withOrgJodaTimeChronology:(OrgJodaTimeChronology *)chrono {
  switch (index) {
    case OrgJodaTimeYearMonthDay_YEAR:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) year];
    case OrgJodaTimeYearMonthDay_MONTH_OF_YEAR:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) monthOfYear];
    case OrgJodaTimeYearMonthDay_DAY_OF_MONTH:
    return [((OrgJodaTimeChronology *) nil_chk(chrono)) dayOfMonth];
    default:
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I", @"Invalid index: ", index));
  }
}

- (OrgJodaTimeDateTimeFieldType *)getFieldTypeWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(OrgJodaTimeYearMonthDay_FIELD_TYPES), index);
}

- (IOSObjectArray *)getFieldTypes {
  return [((IOSObjectArray *) nil_chk(OrgJodaTimeYearMonthDay_FIELD_TYPES)) clone];
}

- (OrgJodaTimeYearMonthDay *)withChronologyRetainFieldsWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)newChronology {
  newChronology = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(newChronology);
  newChronology = [((OrgJodaTimeChronology *) nil_chk(newChronology)) withUTC];
  if (newChronology == [self getChronology]) {
    return self;
  }
  else {
    OrgJodaTimeYearMonthDay *newYearMonthDay = new_OrgJodaTimeYearMonthDay_initWithOrgJodaTimeYearMonthDay_withOrgJodaTimeChronology_(self, newChronology);
    [((OrgJodaTimeChronology *) nil_chk(newChronology)) validateWithOrgJodaTimeReadablePartial:newYearMonthDay withIntArray:[self getValues]];
    return newYearMonthDay;
  }
}

- (OrgJodaTimeYearMonthDay *)withFieldWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)fieldType
                                                               withInt:(jint)value {
  jint index = [self indexOfSupportedWithOrgJodaTimeDateTimeFieldType:fieldType];
  if (value == [self getValueWithInt:index]) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) setWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:value];
  return new_OrgJodaTimeYearMonthDay_initWithOrgJodaTimeYearMonthDay_withIntArray_(self, newValues);
}

- (OrgJodaTimeYearMonthDay *)withFieldAddedWithOrgJodaTimeDurationFieldType:(OrgJodaTimeDurationFieldType *)fieldType
                                                                    withInt:(jint)amount {
  jint index = [self indexOfSupportedWithOrgJodaTimeDurationFieldType:fieldType];
  if (amount == 0) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) addWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:amount];
  return new_OrgJodaTimeYearMonthDay_initWithOrgJodaTimeYearMonthDay_withIntArray_(self, newValues);
}

- (OrgJodaTimeYearMonthDay *)withPeriodAddedWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period
                                                                  withInt:(jint)scalar {
  if (period == nil || scalar == 0) {
    return self;
  }
  IOSIntArray *newValues = [self getValues];
  for (jint i = 0; i < [period size]; i++) {
    OrgJodaTimeDurationFieldType *fieldType = [period getFieldTypeWithInt:i];
    jint index = [self indexOfWithOrgJodaTimeDurationFieldType:fieldType];
    if (index >= 0) {
      newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getFieldWithInt:index])) addWithOrgJodaTimeReadablePartial:self withInt:index withIntArray:newValues withInt:OrgJodaTimeFieldFieldUtils_safeMultiplyWithInt_withInt_([period getValueWithInt:i], scalar)];
    }
  }
  return new_OrgJodaTimeYearMonthDay_initWithOrgJodaTimeYearMonthDay_withIntArray_(self, newValues);
}

- (OrgJodaTimeYearMonthDay *)plusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:1];
}

- (OrgJodaTimeYearMonthDay *)plusYearsWithInt:(jint)years {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_years() withInt:years];
}

- (OrgJodaTimeYearMonthDay *)plusMonthsWithInt:(jint)months {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_months() withInt:months];
}

- (OrgJodaTimeYearMonthDay *)plusDaysWithInt:(jint)days {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_days() withInt:days];
}

- (OrgJodaTimeYearMonthDay *)minusWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return [self withPeriodAddedWithOrgJodaTimeReadablePeriod:period withInt:-1];
}

- (OrgJodaTimeYearMonthDay *)minusYearsWithInt:(jint)years {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_years() withInt:OrgJodaTimeFieldFieldUtils_safeNegateWithInt_(years)];
}

- (OrgJodaTimeYearMonthDay *)minusMonthsWithInt:(jint)months {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_months() withInt:OrgJodaTimeFieldFieldUtils_safeNegateWithInt_(months)];
}

- (OrgJodaTimeYearMonthDay *)minusDaysWithInt:(jint)days {
  return [self withFieldAddedWithOrgJodaTimeDurationFieldType:OrgJodaTimeDurationFieldType_days() withInt:OrgJodaTimeFieldFieldUtils_safeNegateWithInt_(days)];
}

- (OrgJodaTimeYearMonthDay_Property *)propertyWithOrgJodaTimeDateTimeFieldType:(OrgJodaTimeDateTimeFieldType *)type {
  return new_OrgJodaTimeYearMonthDay_Property_initWithOrgJodaTimeYearMonthDay_withInt_(self, [self indexOfSupportedWithOrgJodaTimeDateTimeFieldType:type]);
}

- (OrgJodaTimeLocalDate *)toLocalDate {
  return new_OrgJodaTimeLocalDate_initWithInt_withInt_withInt_withOrgJodaTimeChronology_([self getYear], [self getMonthOfYear], [self getDayOfMonth], [self getChronology]);
}

- (OrgJodaTimeDateTime *)toDateTimeAtMidnight {
  return [self toDateTimeAtMidnightWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeAtMidnightWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  return new_OrgJodaTimeDateTime_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withOrgJodaTimeChronology_([self getYear], [self getMonthOfYear], [self getDayOfMonth], 0, 0, 0, 0, chrono);
}

- (OrgJodaTimeDateTime *)toDateTimeAtCurrentTime {
  return [self toDateTimeAtCurrentTimeWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeAtCurrentTimeWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  jlong instantMillis = OrgJodaTimeDateTimeUtils_currentTimeMillis();
  jlong resolved = [((OrgJodaTimeChronology *) nil_chk(chrono)) setWithOrgJodaTimeReadablePartial:self withLong:instantMillis];
  return new_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(resolved, chrono);
}

- (OrgJodaTimeDateMidnight *)toDateMidnight {
  return [self toDateMidnightWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateMidnight *)toDateMidnightWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  return new_OrgJodaTimeDateMidnight_initWithInt_withInt_withInt_withOrgJodaTimeChronology_([self getYear], [self getMonthOfYear], [self getDayOfMonth], chrono);
}

- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeTimeOfDay:(OrgJodaTimeTimeOfDay *)time {
  return [self toDateTimeWithOrgJodaTimeTimeOfDay:time withOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeDateTime *)toDateTimeWithOrgJodaTimeTimeOfDay:(OrgJodaTimeTimeOfDay *)time
                                withOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  OrgJodaTimeChronology *chrono = [((OrgJodaTimeChronology *) nil_chk([self getChronology])) withZoneWithOrgJodaTimeDateTimeZone:zone];
  jlong instant = OrgJodaTimeDateTimeUtils_currentTimeMillis();
  instant = [((OrgJodaTimeChronology *) nil_chk(chrono)) setWithOrgJodaTimeReadablePartial:self withLong:instant];
  if (time != nil) {
    instant = [chrono setWithOrgJodaTimeReadablePartial:time withLong:instant];
  }
  return new_OrgJodaTimeDateTime_initWithLong_withOrgJodaTimeChronology_(instant, chrono);
}

- (OrgJodaTimeInterval *)toInterval {
  return [self toIntervalWithOrgJodaTimeDateTimeZone:nil];
}

- (OrgJodaTimeInterval *)toIntervalWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone {
  zone = OrgJodaTimeDateTimeUtils_getZoneWithOrgJodaTimeDateTimeZone_(zone);
  return [((OrgJodaTimeDateMidnight *) nil_chk([self toDateMidnightWithOrgJodaTimeDateTimeZone:zone])) toInterval];
}

- (jint)getYear {
  return [self getValueWithInt:OrgJodaTimeYearMonthDay_YEAR];
}

- (jint)getMonthOfYear {
  return [self getValueWithInt:OrgJodaTimeYearMonthDay_MONTH_OF_YEAR];
}

- (jint)getDayOfMonth {
  return [self getValueWithInt:OrgJodaTimeYearMonthDay_DAY_OF_MONTH];
}

- (OrgJodaTimeYearMonthDay *)withYearWithInt:(jint)year {
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) year])) setWithOrgJodaTimeReadablePartial:self withInt:OrgJodaTimeYearMonthDay_YEAR withIntArray:newValues withInt:year];
  return new_OrgJodaTimeYearMonthDay_initWithOrgJodaTimeYearMonthDay_withIntArray_(self, newValues);
}

- (OrgJodaTimeYearMonthDay *)withMonthOfYearWithInt:(jint)monthOfYear {
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) monthOfYear])) setWithOrgJodaTimeReadablePartial:self withInt:OrgJodaTimeYearMonthDay_MONTH_OF_YEAR withIntArray:newValues withInt:monthOfYear];
  return new_OrgJodaTimeYearMonthDay_initWithOrgJodaTimeYearMonthDay_withIntArray_(self, newValues);
}

- (OrgJodaTimeYearMonthDay *)withDayOfMonthWithInt:(jint)dayOfMonth {
  IOSIntArray *newValues = [self getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([((OrgJodaTimeChronology *) nil_chk([self getChronology])) dayOfMonth])) setWithOrgJodaTimeReadablePartial:self withInt:OrgJodaTimeYearMonthDay_DAY_OF_MONTH withIntArray:newValues withInt:dayOfMonth];
  return new_OrgJodaTimeYearMonthDay_initWithOrgJodaTimeYearMonthDay_withIntArray_(self, newValues);
}

- (OrgJodaTimeYearMonthDay_Property *)year {
  return new_OrgJodaTimeYearMonthDay_Property_initWithOrgJodaTimeYearMonthDay_withInt_(self, OrgJodaTimeYearMonthDay_YEAR);
}

- (OrgJodaTimeYearMonthDay_Property *)monthOfYear {
  return new_OrgJodaTimeYearMonthDay_Property_initWithOrgJodaTimeYearMonthDay_withInt_(self, OrgJodaTimeYearMonthDay_MONTH_OF_YEAR);
}

- (OrgJodaTimeYearMonthDay_Property *)dayOfMonth {
  return new_OrgJodaTimeYearMonthDay_Property_initWithOrgJodaTimeYearMonthDay_withInt_(self, OrgJodaTimeYearMonthDay_DAY_OF_MONTH);
}

- (NSString *)description {
  return [((OrgJodaTimeFormatDateTimeFormatter *) nil_chk(OrgJodaTimeFormatISODateTimeFormat_yearMonthDay())) printWithOrgJodaTimeReadablePartial:self];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 9, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 10, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 12, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x4, 14, 15, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeFieldType;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "[LOrgJodaTimeDateTimeFieldType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 18, 5, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 27, 17, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 28, 17, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 29, 17, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 30, 26, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 31, 17, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 32, 17, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 33, 17, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay_Property;", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeLocalDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 36, 4, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 37, 4, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateMidnight;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateMidnight;", 0x1, 38, 4, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 39, 40, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTime;", 0x1, 39, 41, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeInterval;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeInterval;", 0x1, 42, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 43, 17, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 44, 17, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 45, 17, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay_Property;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 46, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(fromCalendarFieldsWithJavaUtilCalendar:);
  methods[1].selector = @selector(fromDateFieldsWithJavaUtilDate:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(initWithOrgJodaTimeDateTimeZone:);
  methods[4].selector = @selector(initWithOrgJodaTimeChronology:);
  methods[5].selector = @selector(initWithLong:);
  methods[6].selector = @selector(initWithLong:withOrgJodaTimeChronology:);
  methods[7].selector = @selector(initWithId:);
  methods[8].selector = @selector(initWithId:withOrgJodaTimeChronology:);
  methods[9].selector = @selector(initWithInt:withInt:withInt:);
  methods[10].selector = @selector(initWithInt:withInt:withInt:withOrgJodaTimeChronology:);
  methods[11].selector = @selector(initWithOrgJodaTimeYearMonthDay:withIntArray:);
  methods[12].selector = @selector(initWithOrgJodaTimeYearMonthDay:withOrgJodaTimeChronology:);
  methods[13].selector = @selector(size);
  methods[14].selector = @selector(getFieldWithInt:withOrgJodaTimeChronology:);
  methods[15].selector = @selector(getFieldTypeWithInt:);
  methods[16].selector = @selector(getFieldTypes);
  methods[17].selector = @selector(withChronologyRetainFieldsWithOrgJodaTimeChronology:);
  methods[18].selector = @selector(withFieldWithOrgJodaTimeDateTimeFieldType:withInt:);
  methods[19].selector = @selector(withFieldAddedWithOrgJodaTimeDurationFieldType:withInt:);
  methods[20].selector = @selector(withPeriodAddedWithOrgJodaTimeReadablePeriod:withInt:);
  methods[21].selector = @selector(plusWithOrgJodaTimeReadablePeriod:);
  methods[22].selector = @selector(plusYearsWithInt:);
  methods[23].selector = @selector(plusMonthsWithInt:);
  methods[24].selector = @selector(plusDaysWithInt:);
  methods[25].selector = @selector(minusWithOrgJodaTimeReadablePeriod:);
  methods[26].selector = @selector(minusYearsWithInt:);
  methods[27].selector = @selector(minusMonthsWithInt:);
  methods[28].selector = @selector(minusDaysWithInt:);
  methods[29].selector = @selector(propertyWithOrgJodaTimeDateTimeFieldType:);
  methods[30].selector = @selector(toLocalDate);
  methods[31].selector = @selector(toDateTimeAtMidnight);
  methods[32].selector = @selector(toDateTimeAtMidnightWithOrgJodaTimeDateTimeZone:);
  methods[33].selector = @selector(toDateTimeAtCurrentTime);
  methods[34].selector = @selector(toDateTimeAtCurrentTimeWithOrgJodaTimeDateTimeZone:);
  methods[35].selector = @selector(toDateMidnight);
  methods[36].selector = @selector(toDateMidnightWithOrgJodaTimeDateTimeZone:);
  methods[37].selector = @selector(toDateTimeWithOrgJodaTimeTimeOfDay:);
  methods[38].selector = @selector(toDateTimeWithOrgJodaTimeTimeOfDay:withOrgJodaTimeDateTimeZone:);
  methods[39].selector = @selector(toInterval);
  methods[40].selector = @selector(toIntervalWithOrgJodaTimeDateTimeZone:);
  methods[41].selector = @selector(getYear);
  methods[42].selector = @selector(getMonthOfYear);
  methods[43].selector = @selector(getDayOfMonth);
  methods[44].selector = @selector(withYearWithInt:);
  methods[45].selector = @selector(withMonthOfYearWithInt:);
  methods[46].selector = @selector(withDayOfMonthWithInt:);
  methods[47].selector = @selector(year);
  methods[48].selector = @selector(monthOfYear);
  methods[49].selector = @selector(dayOfMonth);
  methods[50].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeYearMonthDay_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "FIELD_TYPES", "[LOrgJodaTimeDateTimeFieldType;", .constantValue.asLong = 0, 0x1a, -1, 47, -1, -1 },
    { "YEAR", "I", .constantValue.asInt = OrgJodaTimeYearMonthDay_YEAR, 0x19, -1, -1, -1, -1 },
    { "MONTH_OF_YEAR", "I", .constantValue.asInt = OrgJodaTimeYearMonthDay_MONTH_OF_YEAR, 0x19, -1, -1, -1, -1 },
    { "DAY_OF_MONTH", "I", .constantValue.asInt = OrgJodaTimeYearMonthDay_DAY_OF_MONTH, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "fromCalendarFields", "LJavaUtilCalendar;", "fromDateFields", "LJavaUtilDate;", "LOrgJodaTimeDateTimeZone;", "LOrgJodaTimeChronology;", "J", "JLOrgJodaTimeChronology;", "LNSObject;", "LNSObject;LOrgJodaTimeChronology;", "III", "IIILOrgJodaTimeChronology;", "LOrgJodaTimeYearMonthDay;[I", "LOrgJodaTimeYearMonthDay;LOrgJodaTimeChronology;", "getField", "ILOrgJodaTimeChronology;", "getFieldType", "I", "withChronologyRetainFields", "withField", "LOrgJodaTimeDateTimeFieldType;I", "withFieldAdded", "LOrgJodaTimeDurationFieldType;I", "withPeriodAdded", "LOrgJodaTimeReadablePeriod;I", "plus", "LOrgJodaTimeReadablePeriod;", "plusYears", "plusMonths", "plusDays", "minus", "minusYears", "minusMonths", "minusDays", "property", "LOrgJodaTimeDateTimeFieldType;", "toDateTimeAtMidnight", "toDateTimeAtCurrentTime", "toDateMidnight", "toDateTime", "LOrgJodaTimeTimeOfDay;", "LOrgJodaTimeTimeOfDay;LOrgJodaTimeDateTimeZone;", "toInterval", "withYear", "withMonthOfYear", "withDayOfMonth", "toString", &OrgJodaTimeYearMonthDay_FIELD_TYPES, "LOrgJodaTimeYearMonthDay_Property;", (void *)&OrgJodaTimeYearMonthDay__Annotations$0 };
  static const J2ObjcClassInfo _OrgJodaTimeYearMonthDay = { "YearMonthDay", "org.joda.time", ptrTable, methods, fields, 7, 0x11, 51, 5, -1, 48, -1, -1, 49 };
  return &_OrgJodaTimeYearMonthDay;
}

+ (void)initialize {
  if (self == [OrgJodaTimeYearMonthDay class]) {
    OrgJodaTimeYearMonthDay_FIELD_TYPES = [IOSObjectArray newArrayWithObjects:(id[]){ OrgJodaTimeDateTimeFieldType_year(), OrgJodaTimeDateTimeFieldType_monthOfYear(), OrgJodaTimeDateTimeFieldType_dayOfMonth() } count:3 type:OrgJodaTimeDateTimeFieldType_class_()];
    J2OBJC_SET_INITIALIZED(OrgJodaTimeYearMonthDay)
  }
}

@end

OrgJodaTimeYearMonthDay *OrgJodaTimeYearMonthDay_fromCalendarFieldsWithJavaUtilCalendar_(JavaUtilCalendar *calendar) {
  OrgJodaTimeYearMonthDay_initialize();
  if (calendar == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The calendar must not be null");
  }
  return new_OrgJodaTimeYearMonthDay_initWithInt_withInt_withInt_([calendar getWithInt:JavaUtilCalendar_YEAR], [calendar getWithInt:JavaUtilCalendar_MONTH] + 1, [calendar getWithInt:JavaUtilCalendar_DAY_OF_MONTH]);
}

OrgJodaTimeYearMonthDay *OrgJodaTimeYearMonthDay_fromDateFieldsWithJavaUtilDate_(JavaUtilDate *date) {
  OrgJodaTimeYearMonthDay_initialize();
  if (date == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  return new_OrgJodaTimeYearMonthDay_initWithInt_withInt_withInt_([date getYear] + 1900, [date getMonth] + 1, [date getDate]);
}

void OrgJodaTimeYearMonthDay_init(OrgJodaTimeYearMonthDay *self) {
  OrgJodaTimeBaseBasePartial_init(self);
}

OrgJodaTimeYearMonthDay *new_OrgJodaTimeYearMonthDay_init() {
  J2OBJC_NEW_IMPL(OrgJodaTimeYearMonthDay, init)
}

OrgJodaTimeYearMonthDay *create_OrgJodaTimeYearMonthDay_init() {
  J2OBJC_CREATE_IMPL(OrgJodaTimeYearMonthDay, init)
}

void OrgJodaTimeYearMonthDay_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeYearMonthDay *self, OrgJodaTimeDateTimeZone *zone) {
  OrgJodaTimeBaseBasePartial_initWithOrgJodaTimeChronology_(self, OrgJodaTimeChronoISOChronology_getInstanceWithOrgJodaTimeDateTimeZone_(zone));
}

OrgJodaTimeYearMonthDay *new_OrgJodaTimeYearMonthDay_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_NEW_IMPL(OrgJodaTimeYearMonthDay, initWithOrgJodaTimeDateTimeZone_, zone)
}

OrgJodaTimeYearMonthDay *create_OrgJodaTimeYearMonthDay_initWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeYearMonthDay, initWithOrgJodaTimeDateTimeZone_, zone)
}

void OrgJodaTimeYearMonthDay_initWithOrgJodaTimeChronology_(OrgJodaTimeYearMonthDay *self, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBasePartial_initWithOrgJodaTimeChronology_(self, chronology);
}

OrgJodaTimeYearMonthDay *new_OrgJodaTimeYearMonthDay_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeYearMonthDay, initWithOrgJodaTimeChronology_, chronology)
}

OrgJodaTimeYearMonthDay *create_OrgJodaTimeYearMonthDay_initWithOrgJodaTimeChronology_(OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeYearMonthDay, initWithOrgJodaTimeChronology_, chronology)
}

void OrgJodaTimeYearMonthDay_initWithLong_(OrgJodaTimeYearMonthDay *self, jlong instant) {
  OrgJodaTimeBaseBasePartial_initWithLong_(self, instant);
}

OrgJodaTimeYearMonthDay *new_OrgJodaTimeYearMonthDay_initWithLong_(jlong instant) {
  J2OBJC_NEW_IMPL(OrgJodaTimeYearMonthDay, initWithLong_, instant)
}

OrgJodaTimeYearMonthDay *create_OrgJodaTimeYearMonthDay_initWithLong_(jlong instant) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeYearMonthDay, initWithLong_, instant)
}

void OrgJodaTimeYearMonthDay_initWithLong_withOrgJodaTimeChronology_(OrgJodaTimeYearMonthDay *self, jlong instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBasePartial_initWithLong_withOrgJodaTimeChronology_(self, instant, chronology);
}

OrgJodaTimeYearMonthDay *new_OrgJodaTimeYearMonthDay_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeYearMonthDay, initWithLong_withOrgJodaTimeChronology_, instant, chronology)
}

OrgJodaTimeYearMonthDay *create_OrgJodaTimeYearMonthDay_initWithLong_withOrgJodaTimeChronology_(jlong instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeYearMonthDay, initWithLong_withOrgJodaTimeChronology_, instant, chronology)
}

void OrgJodaTimeYearMonthDay_initWithId_(OrgJodaTimeYearMonthDay *self, id instant) {
  OrgJodaTimeBaseBasePartial_initWithId_withOrgJodaTimeChronology_withOrgJodaTimeFormatDateTimeFormatter_(self, instant, nil, OrgJodaTimeFormatISODateTimeFormat_dateOptionalTimeParser());
}

OrgJodaTimeYearMonthDay *new_OrgJodaTimeYearMonthDay_initWithId_(id instant) {
  J2OBJC_NEW_IMPL(OrgJodaTimeYearMonthDay, initWithId_, instant)
}

OrgJodaTimeYearMonthDay *create_OrgJodaTimeYearMonthDay_initWithId_(id instant) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeYearMonthDay, initWithId_, instant)
}

void OrgJodaTimeYearMonthDay_initWithId_withOrgJodaTimeChronology_(OrgJodaTimeYearMonthDay *self, id instant, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBasePartial_initWithId_withOrgJodaTimeChronology_withOrgJodaTimeFormatDateTimeFormatter_(self, instant, OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_(chronology), OrgJodaTimeFormatISODateTimeFormat_dateOptionalTimeParser());
}

OrgJodaTimeYearMonthDay *new_OrgJodaTimeYearMonthDay_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeYearMonthDay, initWithId_withOrgJodaTimeChronology_, instant, chronology)
}

OrgJodaTimeYearMonthDay *create_OrgJodaTimeYearMonthDay_initWithId_withOrgJodaTimeChronology_(id instant, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeYearMonthDay, initWithId_withOrgJodaTimeChronology_, instant, chronology)
}

void OrgJodaTimeYearMonthDay_initWithInt_withInt_withInt_(OrgJodaTimeYearMonthDay *self, jint year, jint monthOfYear, jint dayOfMonth) {
  OrgJodaTimeYearMonthDay_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(self, year, monthOfYear, dayOfMonth, nil);
}

OrgJodaTimeYearMonthDay *new_OrgJodaTimeYearMonthDay_initWithInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth) {
  J2OBJC_NEW_IMPL(OrgJodaTimeYearMonthDay, initWithInt_withInt_withInt_, year, monthOfYear, dayOfMonth)
}

OrgJodaTimeYearMonthDay *create_OrgJodaTimeYearMonthDay_initWithInt_withInt_withInt_(jint year, jint monthOfYear, jint dayOfMonth) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeYearMonthDay, initWithInt_withInt_withInt_, year, monthOfYear, dayOfMonth)
}

void OrgJodaTimeYearMonthDay_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(OrgJodaTimeYearMonthDay *self, jint year, jint monthOfYear, jint dayOfMonth, OrgJodaTimeChronology *chronology) {
  OrgJodaTimeBaseBasePartial_initWithIntArray_withOrgJodaTimeChronology_(self, [IOSIntArray newArrayWithInts:(jint[]){ year, monthOfYear, dayOfMonth } count:3], chronology);
}

OrgJodaTimeYearMonthDay *new_OrgJodaTimeYearMonthDay_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, OrgJodaTimeChronology *chronology) {
  J2OBJC_NEW_IMPL(OrgJodaTimeYearMonthDay, initWithInt_withInt_withInt_withOrgJodaTimeChronology_, year, monthOfYear, dayOfMonth, chronology)
}

OrgJodaTimeYearMonthDay *create_OrgJodaTimeYearMonthDay_initWithInt_withInt_withInt_withOrgJodaTimeChronology_(jint year, jint monthOfYear, jint dayOfMonth, OrgJodaTimeChronology *chronology) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeYearMonthDay, initWithInt_withInt_withInt_withOrgJodaTimeChronology_, year, monthOfYear, dayOfMonth, chronology)
}

void OrgJodaTimeYearMonthDay_initWithOrgJodaTimeYearMonthDay_withIntArray_(OrgJodaTimeYearMonthDay *self, OrgJodaTimeYearMonthDay *partial, IOSIntArray *values) {
  OrgJodaTimeBaseBasePartial_initWithOrgJodaTimeBaseBasePartial_withIntArray_(self, partial, values);
}

OrgJodaTimeYearMonthDay *new_OrgJodaTimeYearMonthDay_initWithOrgJodaTimeYearMonthDay_withIntArray_(OrgJodaTimeYearMonthDay *partial, IOSIntArray *values) {
  J2OBJC_NEW_IMPL(OrgJodaTimeYearMonthDay, initWithOrgJodaTimeYearMonthDay_withIntArray_, partial, values)
}

OrgJodaTimeYearMonthDay *create_OrgJodaTimeYearMonthDay_initWithOrgJodaTimeYearMonthDay_withIntArray_(OrgJodaTimeYearMonthDay *partial, IOSIntArray *values) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeYearMonthDay, initWithOrgJodaTimeYearMonthDay_withIntArray_, partial, values)
}

void OrgJodaTimeYearMonthDay_initWithOrgJodaTimeYearMonthDay_withOrgJodaTimeChronology_(OrgJodaTimeYearMonthDay *self, OrgJodaTimeYearMonthDay *partial, OrgJodaTimeChronology *chrono) {
  OrgJodaTimeBaseBasePartial_initWithOrgJodaTimeBaseBasePartial_withOrgJodaTimeChronology_(self, partial, chrono);
}

OrgJodaTimeYearMonthDay *new_OrgJodaTimeYearMonthDay_initWithOrgJodaTimeYearMonthDay_withOrgJodaTimeChronology_(OrgJodaTimeYearMonthDay *partial, OrgJodaTimeChronology *chrono) {
  J2OBJC_NEW_IMPL(OrgJodaTimeYearMonthDay, initWithOrgJodaTimeYearMonthDay_withOrgJodaTimeChronology_, partial, chrono)
}

OrgJodaTimeYearMonthDay *create_OrgJodaTimeYearMonthDay_initWithOrgJodaTimeYearMonthDay_withOrgJodaTimeChronology_(OrgJodaTimeYearMonthDay *partial, OrgJodaTimeChronology *chrono) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeYearMonthDay, initWithOrgJodaTimeYearMonthDay_withOrgJodaTimeChronology_, partial, chrono)
}

IOSObjectArray *OrgJodaTimeYearMonthDay__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeYearMonthDay)

@implementation OrgJodaTimeYearMonthDay_Property

- (instancetype)initWithOrgJodaTimeYearMonthDay:(OrgJodaTimeYearMonthDay *)partial
                                        withInt:(jint)fieldIndex {
  OrgJodaTimeYearMonthDay_Property_initWithOrgJodaTimeYearMonthDay_withInt_(self, partial, fieldIndex);
  return self;
}

- (OrgJodaTimeDateTimeField *)getField {
  return [((OrgJodaTimeYearMonthDay *) nil_chk(iYearMonthDay_)) getFieldWithInt:iFieldIndex_];
}

- (id<OrgJodaTimeReadablePartial>)getReadablePartial {
  return iYearMonthDay_;
}

- (OrgJodaTimeYearMonthDay *)getYearMonthDay {
  return iYearMonthDay_;
}

- (jint)get {
  return [((OrgJodaTimeYearMonthDay *) nil_chk(iYearMonthDay_)) getValueWithInt:iFieldIndex_];
}

- (OrgJodaTimeYearMonthDay *)addToCopyWithInt:(jint)valueToAdd {
  IOSIntArray *newValues = [((OrgJodaTimeYearMonthDay *) nil_chk(iYearMonthDay_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWithOrgJodaTimeReadablePartial:iYearMonthDay_ withInt:iFieldIndex_ withIntArray:newValues withInt:valueToAdd];
  return new_OrgJodaTimeYearMonthDay_initWithOrgJodaTimeYearMonthDay_withIntArray_(iYearMonthDay_, newValues);
}

- (OrgJodaTimeYearMonthDay *)addWrapFieldToCopyWithInt:(jint)valueToAdd {
  IOSIntArray *newValues = [((OrgJodaTimeYearMonthDay *) nil_chk(iYearMonthDay_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) addWrapFieldWithOrgJodaTimeReadablePartial:iYearMonthDay_ withInt:iFieldIndex_ withIntArray:newValues withInt:valueToAdd];
  return new_OrgJodaTimeYearMonthDay_initWithOrgJodaTimeYearMonthDay_withIntArray_(iYearMonthDay_, newValues);
}

- (OrgJodaTimeYearMonthDay *)setCopyWithInt:(jint)value {
  IOSIntArray *newValues = [((OrgJodaTimeYearMonthDay *) nil_chk(iYearMonthDay_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithOrgJodaTimeReadablePartial:iYearMonthDay_ withInt:iFieldIndex_ withIntArray:newValues withInt:value];
  return new_OrgJodaTimeYearMonthDay_initWithOrgJodaTimeYearMonthDay_withIntArray_(iYearMonthDay_, newValues);
}

- (OrgJodaTimeYearMonthDay *)setCopyWithNSString:(NSString *)text
                              withJavaUtilLocale:(JavaUtilLocale *)locale {
  IOSIntArray *newValues = [((OrgJodaTimeYearMonthDay *) nil_chk(iYearMonthDay_)) getValues];
  newValues = [((OrgJodaTimeDateTimeField *) nil_chk([self getField])) setWithOrgJodaTimeReadablePartial:iYearMonthDay_ withInt:iFieldIndex_ withIntArray:newValues withNSString:text withJavaUtilLocale:locale];
  return new_OrgJodaTimeYearMonthDay_initWithOrgJodaTimeYearMonthDay_withIntArray_(iYearMonthDay_, newValues);
}

- (OrgJodaTimeYearMonthDay *)setCopyWithNSString:(NSString *)text {
  return [self setCopyWithNSString:text withJavaUtilLocale:nil];
}

- (OrgJodaTimeYearMonthDay *)withMaximumValue {
  return [self setCopyWithInt:[self getMaximumValue]];
}

- (OrgJodaTimeYearMonthDay *)withMinimumValue {
  return [self setCopyWithInt:[self getMinimumValue]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDateTimeField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeReadablePartial;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeYearMonthDay;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaTimeYearMonthDay:withInt:);
  methods[1].selector = @selector(getField);
  methods[2].selector = @selector(getReadablePartial);
  methods[3].selector = @selector(getYearMonthDay);
  methods[4].selector = @selector(get);
  methods[5].selector = @selector(addToCopyWithInt:);
  methods[6].selector = @selector(addWrapFieldToCopyWithInt:);
  methods[7].selector = @selector(setCopyWithInt:);
  methods[8].selector = @selector(setCopyWithNSString:withJavaUtilLocale:);
  methods[9].selector = @selector(setCopyWithNSString:);
  methods[10].selector = @selector(withMaximumValue);
  methods[11].selector = @selector(withMinimumValue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeYearMonthDay_Property_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "iYearMonthDay_", "LOrgJodaTimeYearMonthDay;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iFieldIndex_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaTimeYearMonthDay;I", "addToCopy", "I", "addWrapFieldToCopy", "setCopy", "LNSString;LJavaUtilLocale;", "LNSString;", "LOrgJodaTimeYearMonthDay;", (void *)&OrgJodaTimeYearMonthDay_Property__Annotations$0 };
  static const J2ObjcClassInfo _OrgJodaTimeYearMonthDay_Property = { "Property", "org.joda.time", ptrTable, methods, fields, 7, 0x9, 12, 3, 7, -1, -1, -1, 8 };
  return &_OrgJodaTimeYearMonthDay_Property;
}

@end

void OrgJodaTimeYearMonthDay_Property_initWithOrgJodaTimeYearMonthDay_withInt_(OrgJodaTimeYearMonthDay_Property *self, OrgJodaTimeYearMonthDay *partial, jint fieldIndex) {
  OrgJodaTimeFieldAbstractPartialFieldProperty_init(self);
  self->iYearMonthDay_ = partial;
  self->iFieldIndex_ = fieldIndex;
}

OrgJodaTimeYearMonthDay_Property *new_OrgJodaTimeYearMonthDay_Property_initWithOrgJodaTimeYearMonthDay_withInt_(OrgJodaTimeYearMonthDay *partial, jint fieldIndex) {
  J2OBJC_NEW_IMPL(OrgJodaTimeYearMonthDay_Property, initWithOrgJodaTimeYearMonthDay_withInt_, partial, fieldIndex)
}

OrgJodaTimeYearMonthDay_Property *create_OrgJodaTimeYearMonthDay_Property_initWithOrgJodaTimeYearMonthDay_withInt_(OrgJodaTimeYearMonthDay *partial, jint fieldIndex) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeYearMonthDay_Property, initWithOrgJodaTimeYearMonthDay_withInt_, partial, fieldIndex)
}

IOSObjectArray *OrgJodaTimeYearMonthDay_Property__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeYearMonthDay_Property)
