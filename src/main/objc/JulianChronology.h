//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/chrono/JulianChronology.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JulianChronology")
#ifdef RESTRICT_JulianChronology
#define INCLUDE_ALL_JulianChronology 0
#else
#define INCLUDE_ALL_JulianChronology 1
#endif
#undef RESTRICT_JulianChronology

#if !defined (OrgJodaTimeChronoJulianChronology_) && (INCLUDE_ALL_JulianChronology || defined(INCLUDE_OrgJodaTimeChronoJulianChronology))
#define OrgJodaTimeChronoJulianChronology_

#define RESTRICT_BasicGJChronology 1
#define INCLUDE_OrgJodaTimeChronoBasicGJChronology 1
#include "BasicGJChronology.h"

@class OrgJodaTimeChronoAssembledChronology_Fields;
@class OrgJodaTimeChronology;
@class OrgJodaTimeDateTimeZone;

@interface OrgJodaTimeChronoJulianChronology : OrgJodaTimeChronoBasicGJChronology

#pragma mark Public

+ (OrgJodaTimeChronoJulianChronology *)getInstance;

+ (OrgJodaTimeChronoJulianChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

+ (OrgJodaTimeChronoJulianChronology *)getInstanceWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone
                                                                      withInt:(jint)minDaysInFirstWeek;

+ (OrgJodaTimeChronoJulianChronology *)getInstanceUTC;

- (OrgJodaTimeChronology *)withUTC;

- (OrgJodaTimeChronology *)withZoneWithOrgJodaTimeDateTimeZone:(OrgJodaTimeDateTimeZone *)zone;

#pragma mark Protected

- (void)assembleWithOrgJodaTimeChronoAssembledChronology_Fields:(OrgJodaTimeChronoAssembledChronology_Fields *)fields;

#pragma mark Package-Private

- (instancetype)initWithOrgJodaTimeChronology:(OrgJodaTimeChronology *)base
                                       withId:(id)param
                                      withInt:(jint)minDaysInFirstWeek;

+ (jint)adjustYearForSetWithInt:(jint)year;

- (jlong)calculateFirstDayOfYearMillisWithInt:(jint)year;

- (jlong)getApproxMillisAtEpochDividedByTwo;

- (jlong)getAverageMillisPerMonth;

- (jlong)getAverageMillisPerYear;

- (jlong)getAverageMillisPerYearDividedByTwo;

- (jlong)getDateMidnightMillisWithInt:(jint)year
                              withInt:(jint)monthOfYear
                              withInt:(jint)dayOfMonth;

- (jint)getMaxYear;

- (jint)getMinYear;

- (jboolean)isLeapYearWithInt:(jint)year;

@end

J2OBJC_STATIC_INIT(OrgJodaTimeChronoJulianChronology)

FOUNDATION_EXPORT jint OrgJodaTimeChronoJulianChronology_adjustYearForSetWithInt_(jint year);

FOUNDATION_EXPORT OrgJodaTimeChronoJulianChronology *OrgJodaTimeChronoJulianChronology_getInstanceUTC();

FOUNDATION_EXPORT OrgJodaTimeChronoJulianChronology *OrgJodaTimeChronoJulianChronology_getInstance();

FOUNDATION_EXPORT OrgJodaTimeChronoJulianChronology *OrgJodaTimeChronoJulianChronology_getInstanceWithOrgJodaTimeDateTimeZone_(OrgJodaTimeDateTimeZone *zone);

FOUNDATION_EXPORT OrgJodaTimeChronoJulianChronology *OrgJodaTimeChronoJulianChronology_getInstanceWithOrgJodaTimeDateTimeZone_withInt_(OrgJodaTimeDateTimeZone *zone, jint minDaysInFirstWeek);

FOUNDATION_EXPORT void OrgJodaTimeChronoJulianChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronoJulianChronology *self, OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek);

FOUNDATION_EXPORT OrgJodaTimeChronoJulianChronology *new_OrgJodaTimeChronoJulianChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJodaTimeChronoJulianChronology *create_OrgJodaTimeChronoJulianChronology_initWithOrgJodaTimeChronology_withId_withInt_(OrgJodaTimeChronology *base, id param, jint minDaysInFirstWeek);

J2OBJC_TYPE_LITERAL_HEADER(OrgJodaTimeChronoJulianChronology)

#endif

#pragma pop_macro("INCLUDE_ALL_JulianChronology")
