//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-time/build/mainTranslationExtraction/org/joda/time/Weeks.java
//

#include "BaseSingleFieldPeriod.h"
#include "Chronology.h"
#include "DateTime.h"
#include "DateTimeConstants.h"
#include "DateTimeUtils.h"
#include "Days.h"
#include "Duration.h"
#include "DurationField.h"
#include "DurationFieldType.h"
#include "FieldUtils.h"
#include "FromString.h"
#include "Hours.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "ISOPeriodFormat.h"
#include "J2ObjC_source.h"
#include "LocalDate.h"
#include "Minutes.h"
#include "Period.h"
#include "PeriodFormatter.h"
#include "PeriodType.h"
#include "ReadableInstant.h"
#include "ReadableInterval.h"
#include "ReadablePartial.h"
#include "ReadablePeriod.h"
#include "Seconds.h"
#include "ToString.h"
#include "Weeks.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"

@interface OrgJodaTimeWeeks ()

- (instancetype)initWithInt:(jint)weeks;

- (id)readResolve;

@end

inline OrgJodaTimeFormatPeriodFormatter *OrgJodaTimeWeeks_get_PARSER();
static OrgJodaTimeFormatPeriodFormatter *OrgJodaTimeWeeks_PARSER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaTimeWeeks, PARSER, OrgJodaTimeFormatPeriodFormatter *)

inline jlong OrgJodaTimeWeeks_get_serialVersionUID();
#define OrgJodaTimeWeeks_serialVersionUID 87525275727380866LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJodaTimeWeeks, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJodaTimeWeeks_initWithInt_(OrgJodaTimeWeeks *self, jint weeks);

__attribute__((unused)) static OrgJodaTimeWeeks *new_OrgJodaTimeWeeks_initWithInt_(jint weeks) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaTimeWeeks *create_OrgJodaTimeWeeks_initWithInt_(jint weeks);

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeWeeks__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgJodaTimeWeeks__Annotations$1();

J2OBJC_INITIALIZED_DEFN(OrgJodaTimeWeeks)

OrgJodaTimeWeeks *OrgJodaTimeWeeks_ZERO;
OrgJodaTimeWeeks *OrgJodaTimeWeeks_ONE;
OrgJodaTimeWeeks *OrgJodaTimeWeeks_TWO;
OrgJodaTimeWeeks *OrgJodaTimeWeeks_THREE;
OrgJodaTimeWeeks *OrgJodaTimeWeeks_MAX_VALUE;
OrgJodaTimeWeeks *OrgJodaTimeWeeks_MIN_VALUE;

@implementation OrgJodaTimeWeeks

+ (OrgJodaTimeWeeks *)weeksWithInt:(jint)weeks {
  return OrgJodaTimeWeeks_weeksWithInt_(weeks);
}

+ (OrgJodaTimeWeeks *)weeksBetweenWithOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)start
                                  withOrgJodaTimeReadableInstant:(id<OrgJodaTimeReadableInstant>)end {
  return OrgJodaTimeWeeks_weeksBetweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(start, end);
}

+ (OrgJodaTimeWeeks *)weeksBetweenWithOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)start
                                  withOrgJodaTimeReadablePartial:(id<OrgJodaTimeReadablePartial>)end {
  return OrgJodaTimeWeeks_weeksBetweenWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_(start, end);
}

+ (OrgJodaTimeWeeks *)weeksInWithOrgJodaTimeReadableInterval:(id<OrgJodaTimeReadableInterval>)interval {
  return OrgJodaTimeWeeks_weeksInWithOrgJodaTimeReadableInterval_(interval);
}

+ (OrgJodaTimeWeeks *)standardWeeksInWithOrgJodaTimeReadablePeriod:(id<OrgJodaTimeReadablePeriod>)period {
  return OrgJodaTimeWeeks_standardWeeksInWithOrgJodaTimeReadablePeriod_(period);
}

+ (OrgJodaTimeWeeks *)parseWeeksWithNSString:(NSString *)periodStr {
  return OrgJodaTimeWeeks_parseWeeksWithNSString_(periodStr);
}

- (instancetype)initWithInt:(jint)weeks {
  OrgJodaTimeWeeks_initWithInt_(self, weeks);
  return self;
}

- (id)readResolve {
  return OrgJodaTimeWeeks_weeksWithInt_([self getValue]);
}

- (OrgJodaTimeDurationFieldType *)getFieldType {
  return OrgJodaTimeDurationFieldType_weeks();
}

- (OrgJodaTimePeriodType *)getPeriodType {
  return OrgJodaTimePeriodType_weeks();
}

- (OrgJodaTimeDays *)toStandardDays {
  return OrgJodaTimeDays_daysWithInt_(OrgJodaTimeFieldFieldUtils_safeMultiplyWithInt_withInt_([self getValue], OrgJodaTimeDateTimeConstants_DAYS_PER_WEEK));
}

- (OrgJodaTimeHours *)toStandardHours {
  return OrgJodaTimeHours_hoursWithInt_(OrgJodaTimeFieldFieldUtils_safeMultiplyWithInt_withInt_([self getValue], OrgJodaTimeDateTimeConstants_HOURS_PER_WEEK));
}

- (OrgJodaTimeMinutes *)toStandardMinutes {
  return OrgJodaTimeMinutes_minutesWithInt_(OrgJodaTimeFieldFieldUtils_safeMultiplyWithInt_withInt_([self getValue], OrgJodaTimeDateTimeConstants_MINUTES_PER_WEEK));
}

- (OrgJodaTimeSeconds *)toStandardSeconds {
  return OrgJodaTimeSeconds_secondsWithInt_(OrgJodaTimeFieldFieldUtils_safeMultiplyWithInt_withInt_([self getValue], OrgJodaTimeDateTimeConstants_SECONDS_PER_WEEK));
}

- (OrgJodaTimeDuration *)toStandardDuration {
  jlong weeks = [self getValue];
  return new_OrgJodaTimeDuration_initWithLong_(weeks * OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK);
}

- (jint)getWeeks {
  return [self getValue];
}

- (OrgJodaTimeWeeks *)plusWithInt:(jint)weeks {
  if (weeks == 0) {
    return self;
  }
  return OrgJodaTimeWeeks_weeksWithInt_(OrgJodaTimeFieldFieldUtils_safeAddWithInt_withInt_([self getValue], weeks));
}

- (OrgJodaTimeWeeks *)plusWithOrgJodaTimeWeeks:(OrgJodaTimeWeeks *)weeks {
  if (weeks == nil) {
    return self;
  }
  return [self plusWithInt:[weeks getValue]];
}

- (OrgJodaTimeWeeks *)minusWithInt:(jint)weeks {
  return [self plusWithInt:OrgJodaTimeFieldFieldUtils_safeNegateWithInt_(weeks)];
}

- (OrgJodaTimeWeeks *)minusWithOrgJodaTimeWeeks:(OrgJodaTimeWeeks *)weeks {
  if (weeks == nil) {
    return self;
  }
  return [self minusWithInt:[weeks getValue]];
}

- (OrgJodaTimeWeeks *)multipliedByWithInt:(jint)scalar {
  return OrgJodaTimeWeeks_weeksWithInt_(OrgJodaTimeFieldFieldUtils_safeMultiplyWithInt_withInt_([self getValue], scalar));
}

- (OrgJodaTimeWeeks *)dividedByWithInt:(jint)divisor {
  if (divisor == 1) {
    return self;
  }
  return OrgJodaTimeWeeks_weeksWithInt_([self getValue] / divisor);
}

- (OrgJodaTimeWeeks *)negated {
  return OrgJodaTimeWeeks_weeksWithInt_(OrgJodaTimeFieldFieldUtils_safeNegateWithInt_([self getValue]));
}

- (jboolean)isGreaterThanWithOrgJodaTimeWeeks:(OrgJodaTimeWeeks *)other {
  if (other == nil) {
    return [self getValue] > 0;
  }
  return [self getValue] > [other getValue];
}

- (jboolean)isLessThanWithOrgJodaTimeWeeks:(OrgJodaTimeWeeks *)other {
  if (other == nil) {
    return [self getValue] < 0;
  }
  return [self getValue] < [other getValue];
}

- (NSString *)description {
  return JreStrcat("C$C", 'P', NSString_valueOfInt_([self getValue]), 'W');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJodaTimeWeeks;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeWeeks;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeWeeks;", 0x9, 2, 4, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeWeeks;", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeWeeks;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeWeeks;", 0x9, 9, 10, -1, -1, 11, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDurationFieldType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimePeriodType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDays;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeHours;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeMinutes;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeSeconds;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeDuration;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeWeeks;", 0x1, 12, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeWeeks;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeWeeks;", 0x1, 14, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeWeeks;", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeWeeks;", 0x1, 15, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeWeeks;", 0x1, 16, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaTimeWeeks;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, -1, -1, -1, 20, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(weeksWithInt:);
  methods[1].selector = @selector(weeksBetweenWithOrgJodaTimeReadableInstant:withOrgJodaTimeReadableInstant:);
  methods[2].selector = @selector(weeksBetweenWithOrgJodaTimeReadablePartial:withOrgJodaTimeReadablePartial:);
  methods[3].selector = @selector(weeksInWithOrgJodaTimeReadableInterval:);
  methods[4].selector = @selector(standardWeeksInWithOrgJodaTimeReadablePeriod:);
  methods[5].selector = @selector(parseWeeksWithNSString:);
  methods[6].selector = @selector(initWithInt:);
  methods[7].selector = @selector(readResolve);
  methods[8].selector = @selector(getFieldType);
  methods[9].selector = @selector(getPeriodType);
  methods[10].selector = @selector(toStandardDays);
  methods[11].selector = @selector(toStandardHours);
  methods[12].selector = @selector(toStandardMinutes);
  methods[13].selector = @selector(toStandardSeconds);
  methods[14].selector = @selector(toStandardDuration);
  methods[15].selector = @selector(getWeeks);
  methods[16].selector = @selector(plusWithInt:);
  methods[17].selector = @selector(plusWithOrgJodaTimeWeeks:);
  methods[18].selector = @selector(minusWithInt:);
  methods[19].selector = @selector(minusWithOrgJodaTimeWeeks:);
  methods[20].selector = @selector(multipliedByWithInt:);
  methods[21].selector = @selector(dividedByWithInt:);
  methods[22].selector = @selector(negated);
  methods[23].selector = @selector(isGreaterThanWithOrgJodaTimeWeeks:);
  methods[24].selector = @selector(isLessThanWithOrgJodaTimeWeeks:);
  methods[25].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ZERO", "LOrgJodaTimeWeeks;", .constantValue.asLong = 0, 0x19, -1, 21, -1, -1 },
    { "ONE", "LOrgJodaTimeWeeks;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "TWO", "LOrgJodaTimeWeeks;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "THREE", "LOrgJodaTimeWeeks;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "MAX_VALUE", "LOrgJodaTimeWeeks;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "MIN_VALUE", "LOrgJodaTimeWeeks;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "PARSER", "LOrgJodaTimeFormatPeriodFormatter;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = OrgJodaTimeWeeks_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "weeks", "I", "weeksBetween", "LOrgJodaTimeReadableInstant;LOrgJodaTimeReadableInstant;", "LOrgJodaTimeReadablePartial;LOrgJodaTimeReadablePartial;", "weeksIn", "LOrgJodaTimeReadableInterval;", "standardWeeksIn", "LOrgJodaTimeReadablePeriod;", "parseWeeks", "LNSString;", (void *)&OrgJodaTimeWeeks__Annotations$0, "plus", "LOrgJodaTimeWeeks;", "minus", "multipliedBy", "dividedBy", "isGreaterThan", "isLessThan", "toString", (void *)&OrgJodaTimeWeeks__Annotations$1, &OrgJodaTimeWeeks_ZERO, &OrgJodaTimeWeeks_ONE, &OrgJodaTimeWeeks_TWO, &OrgJodaTimeWeeks_THREE, &OrgJodaTimeWeeks_MAX_VALUE, &OrgJodaTimeWeeks_MIN_VALUE, &OrgJodaTimeWeeks_PARSER };
  static const J2ObjcClassInfo _OrgJodaTimeWeeks = { "Weeks", "org.joda.time", ptrTable, methods, fields, 7, 0x11, 26, 8, -1, -1, -1, -1, -1 };
  return &_OrgJodaTimeWeeks;
}

+ (void)initialize {
  if (self == [OrgJodaTimeWeeks class]) {
    OrgJodaTimeWeeks_ZERO = new_OrgJodaTimeWeeks_initWithInt_(0);
    OrgJodaTimeWeeks_ONE = new_OrgJodaTimeWeeks_initWithInt_(1);
    OrgJodaTimeWeeks_TWO = new_OrgJodaTimeWeeks_initWithInt_(2);
    OrgJodaTimeWeeks_THREE = new_OrgJodaTimeWeeks_initWithInt_(3);
    OrgJodaTimeWeeks_MAX_VALUE = new_OrgJodaTimeWeeks_initWithInt_(JavaLangInteger_MAX_VALUE);
    OrgJodaTimeWeeks_MIN_VALUE = new_OrgJodaTimeWeeks_initWithInt_(JavaLangInteger_MIN_VALUE);
    OrgJodaTimeWeeks_PARSER = [((OrgJodaTimeFormatPeriodFormatter *) nil_chk(OrgJodaTimeFormatISOPeriodFormat_standard())) withParseTypeWithOrgJodaTimePeriodType:OrgJodaTimePeriodType_weeks()];
    J2OBJC_SET_INITIALIZED(OrgJodaTimeWeeks)
  }
}

@end

OrgJodaTimeWeeks *OrgJodaTimeWeeks_weeksWithInt_(jint weeks) {
  OrgJodaTimeWeeks_initialize();
  switch (weeks) {
    case 0:
    return OrgJodaTimeWeeks_ZERO;
    case 1:
    return OrgJodaTimeWeeks_ONE;
    case 2:
    return OrgJodaTimeWeeks_TWO;
    case 3:
    return OrgJodaTimeWeeks_THREE;
    case JavaLangInteger_MAX_VALUE:
    return OrgJodaTimeWeeks_MAX_VALUE;
    case JavaLangInteger_MIN_VALUE:
    return OrgJodaTimeWeeks_MIN_VALUE;
    default:
    return new_OrgJodaTimeWeeks_initWithInt_(weeks);
  }
}

OrgJodaTimeWeeks *OrgJodaTimeWeeks_weeksBetweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_(id<OrgJodaTimeReadableInstant> start, id<OrgJodaTimeReadableInstant> end) {
  OrgJodaTimeWeeks_initialize();
  jint amount = OrgJodaTimeBaseBaseSingleFieldPeriod_betweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_withOrgJodaTimeDurationFieldType_(start, end, OrgJodaTimeDurationFieldType_weeks());
  return OrgJodaTimeWeeks_weeksWithInt_(amount);
}

OrgJodaTimeWeeks *OrgJodaTimeWeeks_weeksBetweenWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_(id<OrgJodaTimeReadablePartial> start, id<OrgJodaTimeReadablePartial> end) {
  OrgJodaTimeWeeks_initialize();
  if ([start isKindOfClass:[OrgJodaTimeLocalDate class]] && [end isKindOfClass:[OrgJodaTimeLocalDate class]]) {
    OrgJodaTimeChronology *chrono = OrgJodaTimeDateTimeUtils_getChronologyWithOrgJodaTimeChronology_([((id<OrgJodaTimeReadablePartial>) nil_chk(start)) getChronology]);
    jint weeks = [((OrgJodaTimeDurationField *) nil_chk([((OrgJodaTimeChronology *) nil_chk(chrono)) weeks])) getDifferenceWithLong:[((OrgJodaTimeLocalDate *) nil_chk(((OrgJodaTimeLocalDate *) cast_chk(end, [OrgJodaTimeLocalDate class])))) getLocalMillis] withLong:[((OrgJodaTimeLocalDate *) cast_chk(start, [OrgJodaTimeLocalDate class])) getLocalMillis]];
    return OrgJodaTimeWeeks_weeksWithInt_(weeks);
  }
  jint amount = OrgJodaTimeBaseBaseSingleFieldPeriod_betweenWithOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePartial_withOrgJodaTimeReadablePeriod_(start, end, OrgJodaTimeWeeks_ZERO);
  return OrgJodaTimeWeeks_weeksWithInt_(amount);
}

OrgJodaTimeWeeks *OrgJodaTimeWeeks_weeksInWithOrgJodaTimeReadableInterval_(id<OrgJodaTimeReadableInterval> interval) {
  OrgJodaTimeWeeks_initialize();
  if (interval == nil) {
    return OrgJodaTimeWeeks_ZERO;
  }
  jint amount = OrgJodaTimeBaseBaseSingleFieldPeriod_betweenWithOrgJodaTimeReadableInstant_withOrgJodaTimeReadableInstant_withOrgJodaTimeDurationFieldType_([interval getStart], [interval getEnd], OrgJodaTimeDurationFieldType_weeks());
  return OrgJodaTimeWeeks_weeksWithInt_(amount);
}

OrgJodaTimeWeeks *OrgJodaTimeWeeks_standardWeeksInWithOrgJodaTimeReadablePeriod_(id<OrgJodaTimeReadablePeriod> period) {
  OrgJodaTimeWeeks_initialize();
  jint amount = OrgJodaTimeBaseBaseSingleFieldPeriod_standardPeriodInWithOrgJodaTimeReadablePeriod_withLong_(period, OrgJodaTimeDateTimeConstants_MILLIS_PER_WEEK);
  return OrgJodaTimeWeeks_weeksWithInt_(amount);
}

OrgJodaTimeWeeks *OrgJodaTimeWeeks_parseWeeksWithNSString_(NSString *periodStr) {
  OrgJodaTimeWeeks_initialize();
  if (periodStr == nil) {
    return OrgJodaTimeWeeks_ZERO;
  }
  OrgJodaTimePeriod *p = [((OrgJodaTimeFormatPeriodFormatter *) nil_chk(OrgJodaTimeWeeks_PARSER)) parsePeriodWithNSString:periodStr];
  return OrgJodaTimeWeeks_weeksWithInt_([((OrgJodaTimePeriod *) nil_chk(p)) getWeeks]);
}

void OrgJodaTimeWeeks_initWithInt_(OrgJodaTimeWeeks *self, jint weeks) {
  OrgJodaTimeBaseBaseSingleFieldPeriod_initWithInt_(self, weeks);
}

OrgJodaTimeWeeks *new_OrgJodaTimeWeeks_initWithInt_(jint weeks) {
  J2OBJC_NEW_IMPL(OrgJodaTimeWeeks, initWithInt_, weeks)
}

OrgJodaTimeWeeks *create_OrgJodaTimeWeeks_initWithInt_(jint weeks) {
  J2OBJC_CREATE_IMPL(OrgJodaTimeWeeks, initWithInt_, weeks)
}

IOSObjectArray *OrgJodaTimeWeeks__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_OrgJodaConvertFromString() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgJodaTimeWeeks__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_OrgJodaConvertToString() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaTimeWeeks)
